{{fbdoc item="title" value="WITH"}}----
Bloc d'instructions pour permettre un acc&egrave;s implicite &agrave; des champs dans une variable de type d&eacute;fini par l'utilisateur

{{fbdoc item="syntax"}}##
	**With** //user_defined_var//
		//statements//
	**End With**
##
{{fbdoc item="desc"}}
	Le bloc ##**With...End With**## permet l'omission du nom d'une variable d'un ##[[KeyPgType Type]]## d&eacute;fini par l'utilisateur quand on se r&eacute;f&eacute;re &agrave; ses champs. Les champs peuvent &ecirc;tre accessibles avec seulement un point (##.##)plac&eacute; devant, par exemple si le ##[[KeyPgType Type]]## contient un &eacute;l&eacute;ment champ appel&eacute; "//##element##//", on peut y acc&eacute;der dans le bloc ##**With**## par "##//.element//##".

	Il peut &ecirc;tre utilis&eacute; comme un raccourci pour &eacute;viter de taper beaucoup de texte et ainsi ne pas encombrer le fichier source. ##**With**## peut &eacute;galement &ecirc;tre utilis&eacute; avec des pointeurs d&eacute;r&eacute;f&eacute;renc&eacute;s, comme le montre le second exemple.

	Les blocs ##**With**##peuvent &ecirc;tre imbriqu&eacute;s.  Dans ce cas, seul le bloc ##**With**## le plus interne avec est actif, et tous les blocs externes sont ignor&eacute;es jusqu'&agrave; ce que celui de l'int&eacute;rieur soit de nouveau ferm&eacute;.  Voir le troisi&egrave;me exemple pour une illustration de cela.

	En interne, une r&eacute;f&eacute;rence &agrave; la variable est prise au d&eacute;but du bloc ##**With**##, et est ensuite utilis&eacute;e pour calculer tous les acc&egrave;s aux &eacute;l&eacute;ments dans le bloc.  Notez que cela signifie que ##[[KeyPgGoto Goto]]## ne doit pas &ecirc;tre utilis&eacute; pour entrer dans un bloc ##**With**##, sinon la r&eacute;f&eacute;rence n'aura pas &eacute;t&eacute; r&eacute;gl&eacute;e, et les r&eacute;sultats pour essayer d'y acc&eacute;der seront ind&eacute;finis.

{{fbdoc item="ex"}}
{{fbdoc item="filename" value="examples/manual/udt/with-1.bas"}}%%(freebasic)
type rect_type
	x as single
	y as single
end type

dim the_rectangle as rect_type
dim as integer temp, t

with the_rectangle
	temp = .x
	.x = 234 * t + 48 + .y
	.y = 321 * t + 2
end with
%%

{{fbdoc item="filename" value="examples/manual/udt/with-2.bas"}}%%(freebasic)
type rect_type
	x as single
	y as single
end type

dim the_rectangle as rect_type ptr

the_rectangle = callocate( 5 * len( rect_type ) )

dim as integer loopvar, temp, t

for loopvar = 0 to 4

  with the_rectangle[loopvar]

	temp = .x
	.x = 234 * t + 48 + .y
	.y = 321 * t + 2

  end with

next
%%

{{fbdoc item="filename" value="examples/manual/udt/with-3.bas"}}%%(freebasic)

type rect_type
	x as single
	y as single
end type

dim as rect_type rect1, rect2

'' Nested With blocks
with rect1

	.x = 1
	.y = 2

	with rect2

		.x = 3
		.y = 4

	end with

end with

print rect1.x, rect1.y '' 1,  2
print rect2.x, rect2.y '' 3,  4
%%

{{fbdoc item="section" value="Diff&eacute;rences dialecte
	- Non disponible dans le dialecte //[[CompilerOptlang -lang qb]]// sauf si r&eacute;f&eacute;renc&eacute; avec l'alias ##**__With**##.

{{fbdoc item="diff"}}
	- Nouveau pour FreeBASIC

{{fbdoc item="see"}}
	- ##[[KeyPgType Type]]##
	
{{fbdoc item="back" value="CatPgUserDefTypes|User Defined Types"}}