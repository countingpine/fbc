{{fbdoc item="title" value="WITH"}}----
Bloc d'instructions pour permettre un accès implicite à des champs dans une variable de type défini par l'utilisateur

{{fbdoc item="syntax"}}##
	**With** //user_defined_var//
		//statements//
	**End With**
##
{{fbdoc item="desc"}}
	Le bloc ##**With...End With**## permet l'omission du nom d'une variable d'un ##[[KeyPgType Type]]## défini par l'utilisateur quand on se référe à ses champs. Les champs peuvent être accessibles avec seulement un point (##.##)placé devant, par exemple si le ##[[KeyPgType Type]]## contient un élément champ appelé "//##element##//", on peut y accéder dans le bloc ##**With**## par "##//.element//##".

	Il peut être utilisé comme un raccourci pour éviter de taper beaucoup de texte et ainsi ne pas encombrer le fichier source. ##**With**## peut également être utilisé avec des pointeurs déréférencés, comme le montre le second exemple.

	Les blocs ##**With**##peuvent être imbriqués.  Dans ce cas, seul le bloc ##**With**## le plus interne avec est actif, et tous les blocs externes sont ignorées jusqu'à ce que celui de l'intérieur soit de nouveau fermé.  Voir le troisième exemple pour une illustration de cela.

	En interne, une référence à la variable est prise au début du bloc ##**With**##, et est ensuite utilisée pour calculer tous les accès aux éléments dans le bloc.  Notez que cela signifie que ##[[KeyPgGoto Goto]]## ne doit pas être utilisé pour entrer dans un bloc ##**With**##, sinon la référence n'aura pas été réglée, et les résultats pour essayer d'y accéder seront indéfinis.

{{fbdoc item="ex"}}
{{fbdoc item="filename" value="examples/manual/udt/with-1.bas"}}%%(freebasic)
type rect_type
	x as single
	y as single
end type

dim the_rectangle as rect_type
dim as integer temp, t

with the_rectangle
	temp = .x
	.x = 234 * t + 48 + .y
	.y = 321 * t + 2
end with
%%

{{fbdoc item="filename" value="examples/manual/udt/with-2.bas"}}%%(freebasic)
type rect_type
	x as single
	y as single
end type

dim the_rectangle as rect_type ptr

the_rectangle = callocate( 5 * len( rect_type ) )

dim as integer loopvar, temp, t

for loopvar = 0 to 4

  with the_rectangle[loopvar]

	temp = .x
	.x = 234 * t + 48 + .y
	.y = 321 * t + 2

  end with

next
%%

{{fbdoc item="filename" value="examples/manual/udt/with-3.bas"}}%%(freebasic)

type rect_type
	x as single
	y as single
end type

dim as rect_type rect1, rect2

'' Nested With blocks
with rect1

	.x = 1
	.y = 2

	with rect2

		.x = 3
		.y = 4

	end with

end with

print rect1.x, rect1.y '' 1,  2
print rect2.x, rect2.y '' 3,  4
%%

{{fbdoc item="lang"}}
	- Non disponible dans le dialecte //[[CompilerOptlang -lang qb]]// sauf si référencé avec l'alias ##**""__With""**##.

{{fbdoc item="diff"}}
	- Nouveau pour ""FreeBASIC""

{{fbdoc item="see"}}
	- ##[[KeyPgType Type]]##
	
{{fbdoc item="back" value="CatPgUserDefTypes|User Defined Types"}}

