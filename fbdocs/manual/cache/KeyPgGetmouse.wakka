{{fbdoc item="title" value="GETMOUSE"}}----
R&eacute;cup&egrave;re l'&eacute;tat du dispositif de pointage de la souris

{{fbdoc item="syntax"}}##
	[[KeyPgDeclare declare]] [[KeyPgFunction function]] **Getmouse** ( [[KeyPgByref byref]] //x// [[KeyPgAs as]] [[KeyPgInteger integer]], [[KeyPgByref byref]] //y// [[KeyPgAs as]] [[KeyPgInteger integer]], [[KeyPgByref byref]] //wheel// [[KeyPgAs as]] [[KeyPgInteger integer]] = 0, [[KeyPgByref byref]] //buttons// [[KeyPgAs as]] [[KeyPgInteger integer]] = 0, [[KeyPgByref byref]] //clip// [[KeyPgAs as]] [[KeyPgInteger integer]] = 0 ) [[KeyPgAs as]] [[KeyPgInteger integer]]
##
{{fbdoc item="usage"}}##
	//result// = **Getmouse** (//x//, //y// [, [ //wheel// ] [, [ //buttons// ] [, [ //clip// ]]]])
##
{{fbdoc item="param"}}
	##//x//##
		valeur de la coordonn&eacute;e x
	##//y//##
		valeur de la coordonn&eacute;e y
	##//wheel//##
		valeur de la molette
	##//buttons//##
		&eacute;tat des boutons
	##//clip//##
		&eacute;tat "clip"

{{fbdoc item="section" value="Valeur retourn&eacute;e
	##0## si succ&egrave;s ou ##1## si &eacute;chec.

{{fbdoc item="desc"}}
	##**GetMouse**## d&eacute;termine la position de la souris et l'&eacute;tat des boutons; l'information est retourn&eacute;e dans les variables pass&eacute;es par r&eacute;f&eacute;rence &agrave; la fonction. Si aucune souris n'est disponible, toutes les variables contiendront la valeur ##-1##. 
	
	En mode console, les coordonn&eacute;es ##//x//## et ##//y//## sont les coordonn&eacute;es de la cellule caract&egrave;re o&ugrave; se trouve la souris; le coin en haut &agrave; gauche de l'&eacute;cran  a les coordonn&eacute;es ##0,0##.. Si la souris sort de la fen&ecirc;tre console, ##**GetMouse**## renvoie les derni&egrave;res coordonn&eacute;es lorsque la souris &eacute;tait encore sur la fen&ecirc;tre. 
	
	En mode graphique, ##//x//## et ##//y//## retournent toujours les coordonn&eacute;es en pixels relatives au coin en haut &agrave; gauche de l'&eacute;cran, qui lui a les coordonn&eacute;es 0,0; un syst&egrave;me de coordonn&eacute;es personnel &eacute;tabli via ##[[KeyPgViewgraphics View]]## ou ##[[KeyPgWindow Window]]## n'affectera pas les coordonn&eacute;es retourn&eacute;es par ##**GetMouse**##. Si la souris sort de la fen&ecirc;tre, toutes les valeurs seront mises &agrave; ##-1##.
	
	##//Wheel//## est le compteur de la molette souris; actionner la molette vers l'avant augmentera la valeur du compteur, une rotation vers l'arri&egrave;re diminuera la valeur du compteur. Au d&eacute;part du programme ou quand un nouveau mode graphique est valid&eacute; via ##[[KeyPgScreengraphics Screen]]##, la position de la molette est remise &agrave; 0. FreeBASIC ne g&egrave;re pas toujours la molette pour certaines plates-formes, dans ce cas une valeur 0 est toujours renvoy&eacute;e.
	
	##//Buttons//## stocke l'&eacute;tat des boutons sous la forme d'un masque de bits: le bit 0 est valide (&agrave; 1) si le bouton gauche est appuy&eacute;; le bit 1 est valide si le bouton droit est appuy&eacute;; le bit 2 est valide si le bouton central / molette est appuy&eacute;.

	##//Clip//## stocke l'&eacute;tat de "clipping"; si &agrave; ##1##, la souris est "clipp&eacute;e" &agrave; la fen&ecirc;tre graphique; si &agrave; ##0##, la souris n'est pas "clipp&eacute;e".

{{fbdoc item="ex"}}
{{fbdoc item="filename" value="examples/manual/input/getmouse.bas"}}%%(freebasic)

DIM AS INTEGER x, y, buttons, res 
' Set video mode and enter loop
SCREENRES 640, 480, 8
DO
	' Recupere x, y souris et boutons. Discard wheel position.
	res = GETMOUSE (x, y, , buttons)
	LOCATE 1, 1
	IF res <> 0 THEN '' Failure

#IFDEF __FB_DOS__
		PRINT "Mouse or mouse driver not available"
#ELSE
		PRINT "Mouse not available or not on window"
#ENDIF

	ELSE
		PRINT USING "Mouse position: ###:###  Buttons: "; x; y;
		IF buttons AND 1 THEN PRINT "L";
		IF buttons AND 2 THEN PRINT "R";
		IF buttons AND 4 THEN PRINT "M";
		PRINT "   "
	END IF
LOOP WHILE INKEY = ""
END
%%
{{fbdoc item="filename" value="examples/manual/input/getmouse2.bas"}}%%(freebasic)
'Example 2: type-union-type structure
type mouse
	as integer res
	as integer x, y, wheel, clip
	union
	    buttons as integer
	    type
	        left:1 as integer
	        right:1 as integer
	        middle:1 as integer
	    end type
	end union
end type
 
screen 11
dim as mouse m

do
	m.res = getmouse( m.x, m.y, m.wheel, m.buttons, m.clip )
	cls
	print using "res = #"; m.res
	print using "x = ###; y = ###; wheel = +###; clip = ##"; m.x; m.y; m.wheel; m.clip
	print using "buttons = ##; left = #; middle = #; right = #"; m.buttons; m.left; m.middle; m.right
	sleep 10, 1
loop while inkey = ""
%%

{{fbdoc item="lang"}}
	- Non disponible dans le dialecte //[[CompilerOptlang -lang qb]]// sauf si r&eacute;f&eacute;renc&eacute; avec l'alias ##**__Getmouse**##.  Les variables pass&eacute;es doivent aussi &ecirc;tre du type ##[[KeyPgLong Long]]## au lieu de ##[[KeyPgInteger Integer (Entier)]]##.

{{fbdoc item="diff"}}
	- Nouveau pour FreeBASIC
	{{fbdoc item="see"}}

- ##[[KeyPgScreenres ScreenRes]]## valide le mode graphique par r&eacute;solution
	- ##[[KeyPgScreengraphics Screen (Graphiques)]]## valide le mode graphique m&eacute;thode QB

- ##[[KeyPgSetmouse SetMouse]]##
	- ##[[KeyPgMultikey MultiKey]]##
	- ##[[KeyPgGetjoystick GetJoystick]]##
	- ##[[KeyPgSetmouse Setmouse]]##
	- ##[[KeyPgMultikey Multikey]]##
	- ##[[KeyPgGetjoystick Getjoystick]]##

{{fbdoc item="back" value="CatPgGfxInput|User Input Functions"}}