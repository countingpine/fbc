{{fbdoc item="title" value="ALLOCATE"}}----
Alloue un bloc de mémoire à partir de la mémoire libre

{{fbdoc item="syntax"}}##
	[[KeyPgDeclare declare]] [[KeyPgFunction function]] **Allocate** [[KeyPgCdecl cdecl]] ( [[KeyPgByval byval]] //count// [[KeyPgAs as]] [[KeyPgInteger integer]] ) [[KeyPgAs as]] [[KeyPgAny any]] [[KeyPgPtr ptr]]
##
{{fbdoc item="usage"}}##
	//result// = **Allocate**( //count// )
##
{{fbdoc item="param"}}
	##//count//##
		La taille, en octets du bloc de mémoire à allouer.

{{fbdoc item="ret"}}
	En cas de succès, l'adresse du début de la mémoire allouée est retournée. Sinon, si la taille demandée du bloc ne peut être attribuée ou si ##//count// < 0##, alors le pointeur (##0##) est retourné.

{{fbdoc item="desc"}}
	Tente d'attribuer, ou de réserver, ##//count//## octets à partir de la mémoire libre (heap = tas). La valeur initiale de la mémoire nouvellement allouée n'est pas spécifiée. Le pointeur retourné est un [[KeyPgAny any]] [[KeyPgPtr ptr]] et pointe sur le début de la mémoire allouée. Ce pointeur est garanti comme étant unique, même si ##//count//## est zéro.

	La mémoire occupée doit être libérée, ou retourner au "tas"" libre, avec ##[[KeyPgDeallocate Deallocate]]## quand elle n'est plus utlisée. 

{{fbdoc item="ex"}}
{{fbdoc item="filename" value="examples/manual/memory/allocate.bas"}}%%(freebasic)
'' This program uses the ALLOCATE(...) function to create a buffer of 15 integers that is
'' then filled with the first 15 numbers of the Fibonacci Sequence, then output to the
'' screen. Note the call to DEALLOCATE(...) at the end of the program.

	const integerCount as integer = 15

	'' Try allocating memory for a number of integers.
	''
	dim buffer as integer ptr
	buffer = allocate(integerCount * sizeof(integer))

	if (0 = buffer) then
		print "Error: unable to allocate memory, quitting."
		end -1
	end if

	'' Prime and fill the memory with the fibonacci sequence.
	''
	buffer[0] = 0
	buffer[1] = 1
	for i as integer = 2 to integerCount - 1
		buffer[i] = buffer[i - 1] + buffer[i - 2]
	next

	'' Display the sequence.
	''
	for i as integer = 0 to integerCount - 1
		print buffer[i] ;
	next

	deallocate(buffer)
	end 0
%%
	Affichage:
	<<## 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377##>>
	::c::

	Il est important de libérer la mémoire allouée si elle ne sera plus utilisée. La mémoire non utilisée non-libérée est simplement une perte de mémoire, et si son adresse est d'une certaine façon écrasée ou oubliée, cette mémoire ne pourra jamais être libérée. Ceci est une perte de mémoire et doit être évité à tout prix. Notez que la mémoire perdue est toujours entièrement libérée lorsque l'application se termine, soit par une sortie "ordinaire" ou un "crash", donc la fuite "persiste" tant que l'application s'exécute; malgré tout c'est une bonne habitude de libérer toute la mémoire allouée à l'intérieur de votre application . L'exemple suivant montre une fonction avec une fuite de mémoire, où l'adresse de mémoire allouée est perdue et n'est pas et ne peut pas être libérée. Si une telle fonction est appelée souvent, le montant total de la mémoire perdue peut augmenter rapidement.

{{fbdoc item="filename" value="examples/manual/memory/allocate2.bas"}}%%(freebasic)
'' Bad example of Allocate usage, causing memory leaks

sub BadAllocateExample()

	dim p as byte ptr

	p = allocate(420)   '' assign pointer to new memory

	p = allocate(420)   '' reassign same pointer to different memory,
	                    '' old address is lost and that memory is leaked

	deallocate(p)

end sub

	'' Main
	BadAllocateExample() '' Creates a memory leak
	print "Memory leak!"
	BadAllocateExample() '' ... and another
	print "Memory leak!"
	end
%%

{{fbdoc item="target"}}
	- Cette procédure n'est pas garantie d'être "thread-safe".

{{fbdoc item="lang"}}
	Non disponible dans le dialecte //[[CompilerOptlang -lang qb]]// sauf si référencé avec l'alias ##**__Allocate**##

{{fbdoc item="diff"}} 
	- Nouveau pour ""FreeBASIC""

{{fbdoc item="see"}}
	- ##[[KeyPgCallocate Callocate]]##
	- ##[[KeyPgReallocate Reallocate]]##
	- ##[[KeyPgDeallocate Deallocate]]##

{{fbdoc item="back" value="CatPgMemory|Memory Functions"}}