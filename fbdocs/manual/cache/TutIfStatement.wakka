{{fbdoc item="title" value="L'instruction IF"}}----
//Ecrit par [[WikiRick rdc]]//

Imaginez le bloc d'instructions IF comme une question qui exige une réponse Vrai ou Faux. La réponse détermine l'exécution de la section de code de votre programme . Puisque les ordinateurs ne fonctionnent qu'avec des chiffres, vous formuler la question comme une équation conditionnelle qui entraînera soit 0 pour faux ou non nul pour vrai. 

L'instruction IF admet les formats suivants.

%%(freebasic)
If <expression> Then do something[:do something]
%%

expression> est la question qui requiert la réponse Vrai ou Faux. Si la réponse est Vrai, c'est à dire non Faux, alors le code suivant le THEN est exécuté. Si la réponse est Faux alors la ligne suivante de code est exécutée.

Vous pouvez exécuter plus d'une déclaration après le THEN si vous séparez les déclarations par deux points (:). Toutes les déclarations doivent être sur la même ligne. Un format plus facile est d'utiliser le bloc de code IF, comme indiqué ci-dessous.

%%(freebasic)
If <expression> Then
	do something 1
	do something 2
	...
End If
%%

Dans ce format, si la réponse est Vrai le bloc de code suivant est alors exécuté, en commençant avec la déclaration de 1 et l'exécution de toutes les déclarations jusqu'à ce que END IF soit atteint. Le programme va alors commencer à exécuter le code après le END IF. Si la réponse est fausse, le code dans le bloc de code est ignoré et le code suivant le END IF est exécuté.

%%(freebasic)
If <expression> Then
	do something
	...
Else
	do something else
	...
End If
%%

Dans ce format si <expression> is Vrai alors le code suivant le THEN est exécuté. Si la réponse est Faux alors le code suivant le ELSE est exécuté. Dans ce format, vous pouvez donner du code à la fois les réponses Vrai et Faux de l'<expression>. 

%%(freebasic)
If <expression> Then
	do something
ElseIf <expression> Then
	do something
End If
%%

Dans ce format si <expression> is Vrai alors le code suivant le THEN est exécuté. Si la réponse est Faux alors le ELSEIF est exécuté. Si le ELSEIF est Vrai, le code suivant le THEN (du ELSEIF) est exécuté, sinon le code suivant le ENDIF est exécuté. Vous pouvez avoir autant de déclarations ELSEIF que nécessaire pour couvrir entièrement la gamme de questions que vous avez à poser.

%%(freebasic)
If <expression> Then
	do something
ElseIf <expression> Then
	do something
Else
	do something else
End If
%%

Ce format est une combinaison de tous les autres formats. Si <expression> est Vrai, alors le code suivant le THEN est ensuite exécuté. Si la réponse est Faux alors le ELSEIF est exécuté. Si le ELSEIF est Vrai, le code suivant le THEN (du ELSEIF) est exécuté, sinon le code suivant le ELSE est exécuté.

Ce format vous permet de poser une série de questions et si la réponse est Faux à toutes les questions, vous pouvez prendre une direction par défaut de l'action basée sur le bloc ELSE.

Comme vous pouvez le voir, vous pouvez poser la question d'un certain nombre de façons, puis exécuter le code basé sur un certain nombre de combinaisons de réponses. Cela vous donne beaucoup de flexibilité à la fois dans la façon de formuler une question et de quoi faire sur la base des réponses.

expression> C'est la question qui nécessite une réponse et vous formulez la question à l'aide d'[[CatPgOperators opérateurs logiques]]. 

Vous pouvez mélanger l'arithmétique et les opérateurs logiques, ainsi que les parenthèses, dans une instruction IF. Le compilateur évalue les instructions conditionnelles de gauche à droite, en tenant compte de la priorité des opérateurs. Par exemple, tous les extraits de code suivants ont des constructions IF correctes.

%%(freebasic)
If var1 = 5 Then
If (var1 = 5) And (var2 < 3) Then
If (var1 + 6) > 10 Then
%%

Vous remarquerez que les parenthèses sont utilisées pour regrouper les différentes parties de l'expression. Vous devez utiliser des parenthèses pour vous assurer de l'exécution logique des portions d'expressions. L'expression doit finalement donner Vrai ou Faux, même si vous utilisez des opérateurs arithmétiques dans l'expression.

=== Utilisation des opérateurs bit à bit dans une déclaration IF ===

Rappelez-vous que les opérateurs AND, OR et NOT sont des opérateurs binaires. Autrement dit, ils retournent une valeur basée sur le fonctionnement binaire qu'ils effectuent. Vous devez veiller lors de l'utilisation d'opérateurs de bits dans une instruction IF que le résultat sera évalué correctement. 

Voyez l'extrait de code ci-dessous. 

%%(freebasic)
If (var1 = 5) And (var2 < 3) Then
%%

Si ##var1## est égal à 5, le compilateur retourne Vrai, sinon -1 pour l'expression. Si ##var2## est inférieur à 3 alors le compilateur retourne Vrai, sinon -1 pour cette expression. Le compilateur évalue ensuite l'opérateur AND, avec -1 AND -1 retourne -1. Comme -1 est non-zéro, ou Vrai, le code qui suit le THEN sera exécuté. 

Si l'une ou l'autre des déclarations entre parenthèses est évaluée à 0, alors le AND retournera 0, ce qui correspond à Faux, et le code qui suit le THEN ne sera pas exécuté. Lorsque vous utilisez les opérateurs de bits, vous devez formuler les expressions conditionnelles de chaque côté de l'opérateur de bits de telle sorte que leur retour soit Vrai ou Faux. Cela vous donnera des résultats cohérents dans vos évaluations.

=== Le problème NOT ===

L'opérateur binaire NOT peut être un problème dans une déclaration IF. Vous pouvez être amené à utiliser l'écriture //If Not var Then//, avec NOT effectuant une opération logique, plutôt qu'une opération bit à bit. En FreeBASIC, NOT effectue une opération bit à bit, et non pas une opération logique. 

Si //var// contient la valeur de 3, alors NOT 3 donne -4, ce qui sera considéré comme le résultat Vrai et le code suivant le THEN sera exécuté, ce qui n'est probablement pas ce qui est attendu. Au lieu d'écrire //If Not var Then//, écrivez //If var <> 0 Then//.

=== Conditions qui se chevauchent ===

Lorsque vous utilisez des conditions combinées, assurez-vous que les conditions ne se chevauchent pas. Dans la plupart des cas, cela va produire des résultats imprévisibles. Chaque condition doit produire un résultat unique, et la combinaison des résultats individuels doit exprimer un résultat unique. C'est primordial dans les constructions IF-ELSEIF; des conditions qui se chevauchent dans un bloc IF-ELSEIF peuvent exécuter un code erroné, au mauvais moment.

===Déclarations IF imbriquées ===

Parfois, il est nécessaire d'imbriquer des déclarations IF afin de mieux décrire le processus décisionnel de l'évaluation. Bien que la déclaration IF puisse gérer plusieurs arguments dans une expression, il y a des cas où vous voudrez peut-être progressivement contrôler certaines gammes de valeurs en utilisant des blocs de IF imbriquées.

%%(freebasic)
If <expression> Then 
	<statement>
	...
	If <expression> Then
		<statement>
		<statement>
		...
	End If
End If
%%

Il est important de fermer chaque bloc correctement avec un END IF lorsqu'il est ouvert par un IF pour éviter des erreurs compilateur ou  de logique. Les erreurs du compilateur sont assez faciles à résoudre, tandis que les erreurs de logique peuvent être difficiles à traquer et corriger. La meilleure façon de s'assurer que vous fermer les blocs correctement est l'indentation des déclarations IF imbriquées et ensuite l'indentation des déclarations END IF correspondant au même niveau que le IF. Dans l'exemple ci-dessus, l'indentation vous visualise les couples IF .... END IF. 

=== La fonction IIF===

IIF, ou fonction "immediate If" renvoie l'une des deux valeurs numériques basées sur une expression. Vous pouvez penser si la fonction IIF comme une fonction "in-line If" qui agit comme un appel de fonction.

%%(freebasic)
Value = Iif(<expression>, numeric_value_if_true, numeric_value_if_false)
%%

IIF peut être utilisé comme une fonction autonome ou à l'intérieur d'autres expressions où vous ne voulez pas diviser l'expression pour insérer une instruction IF. Les valeurs numériques peuvent être des valeurs littérales, des variables ou des appels de fonctions numériques. La limitation de la fonction, c'est qu'elle ne retourne qu'une valeur numérique, et non une chaîne, mais vous pouvez contourner cette limitation en utilisant des pointeurs.

{{table columns="1" cellpadding="2" cells="L'instruction IIF évalue à la fois les conditions Vrai et Faux si devez éviter d'effectuer une opération illégale comme la division par zéro dans un des états, même si cette condition n'est pas retournée par la fonction.

=== Formuler la question ===

La déclaration IF est un outil puissant, mais vous devez vous assurer que vous formulez correctement la question qui est l'<expression>. Chaque expression doit se résoudre par Vrai ou faux, toujours avec Vrai exécutant le code qui suit THEN.

Lors de l'écriture une déclaration IF vous devez vous demander si l'expression se résout par Vrai ou Faux? Cela est particulièrement vrai pour les expressions composées qui ont un certain nombre de termes dans l'expression. Chaque terme doit se résoudre par Vrai ou faux, et l'ensemble des termes doit se résoudre par True ou False. S'il existe le moindre doute sur l'évaluation correcte de l'expression composé, cassez les déclarations IF imbriquées.

=== Vérification des gammes de valeurs ===

Souvent, vous aurez besoin de vérifier pour une plage de valeurs dans une instruction IF, et pour que le compilateur évalue correctement la condition pour la plage, vous devez formuler les expressions correctement. Il existe essentiellement deux types d'expressions de gamme: exclusives et inclusives. Les expressions exclusives excluent une plage de valeurs. Les expressions inclusives incluent une gamme de valeurs. Chaque famille a un format particulier qui doit être suivi d'une évaluation adéquate.

== Excluure une plage de valeurs ==

Supposez que vous avez une plage de valeurs et que vous vouliez faire quelque chose de spécial si la valeur est inférieure ou égale à 1 ou supérieure ou égale à 10. Pour exécuter cela vous devez exclure les nombres de 2 à 9 de l'action spéciale. 

Vous pouvez formuler cela comme une question qui peut ensuite être traduite en code.

%%(freebasic)
Is the value a number less than Or equal To 1 Or a number greater than Or equal To 10?
If Yes, then do special action.
If No, then do standard action.
%%

La clef ici est OR. Si la borne inférieure de la valeur est égale ou inférieure à 1 OU la limite supérieure de la valeur est égale ou supérieure à 10 alors effectuer l'action spéciale.

%%(freebasic)
If (value <= 1) Or (value >= 10) Then
	do_special
Else
	do_standard
End If
%%

Rappelez-vous que OU retournera Vrai si la condition est Vraie. Si la valeur est 1 ou moins, ou la valeur est de 10 ou plus, alors l'expression retournera Vrai et l'action spéciale sera effectuée.

== Inclure une gamme de valeurs ==

L'inclusion est l'opposé de l'exclusion. Comme vous pouvez le deviner, le format est similaire, mais vous utilisez l'opérateur AND qui est l'opposé de l'opérateur OR.

Supposons que vous voulez faire quelque chose de spécial si la valeur est de 5, 6 ou 7. Donc que vous souhaitez inclure ces nombres dans votre expression de gamme. Encore une fois, vous pouvez commencer par poser une question.

%%(freebasic)
Is the value a number between 5 And 7 (inclusive)?
If Yes, then do special action
If No, then do standard action
%%

Ici vous souhaitez inclure les nombres 5, 6, 7 pour examen. Donc si la valeur est de 5 ou supérieure et la valeur est de 7 ou inférieure on fait quelque chose de spécial. Cela se traduit par le code suivant.

%%(freebasic)
If (value >= 5) And (value <= 7) Then
	do_special
Else
	do_standard
End If
%%

Rappelez-vous que l'opérateur AND ne retourneront Vrai que si les deux opérandes sont Vrai. Si la valeur est de 6, 6 est supérieur à 5 et 6 est également inférieur à 7, alors les deux affirmations sont Vrai, et l'expression prend la valeur Vrai..

