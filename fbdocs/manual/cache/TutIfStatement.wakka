{{fbdoc item="title" value="The IF Statement"}}----
//Ecrit par [[WikiRick rdc]]//

Imaginez le bloc d'instructions IF comme une question qui exige une r&eacute;ponse Vrai ou Faux. La r&eacute;ponse d&eacute;termine l'ex&eacute;cution de la section de code de votre programme . Puisque les ordinateurs ne fonctionnent qu'avec des chiffres, vous formuler la question comme une &eacute;quation conditionnelle qui entra&icirc;nera soit 0 pour faux ou non nul pour vrai.

L'instruction IF admet les formats suivants.

%%(freebasic)
If <expression> Then do something[:do something]
%%

<expression> est la question qui requiert la r&eacute;ponse Vrai ou Faux. Si la r&eacute;ponse est Vrai, c'est &agrave; dire non Faux, alors le code suivant le THEN est ex&eacute;cut&eacute;. Si la r&eacute;ponse est Faux alors la ligne suivante de code est ex&eacute;cut&eacute;e.

Vous pouvez ex&eacute;cuter plus d'une d&eacute;claration apr&egrave;s le THEN si vous s&eacute;parez les d&eacute;clarations par deux points (:). Toutes les d&eacute;clarations doivent &ecirc;tre sur la m&ecirc;me ligne. Un format plus facile est d'utiliser le bloc de code IF, comme indiqu&eacute; ci-dessous.

%%(freebasic)
If <expression> Then
	do something 1
	do something 2
	...
End If
%%

Dans ce format, si la r&eacute;ponse est Vrai le bloc de code suivant est alors ex&eacute;cut&eacute;, en commen&ccedil;ant avec la d&eacute;claration de 1 et l'ex&eacute;cution de toutes les d&eacute;clarations jusqu'&agrave; ce que END IF soit atteint. Le programme va alors commencer &agrave; ex&eacute;cuter le code apr&egrave;s le END IF. Si la r&eacute;ponse est fausse, le code dans le bloc de code est ignor&eacute; et le code suivant le END IF est ex&eacute;cut&eacute;.

%%(freebasic)
If <expression> Then
	do something
	...
Else
	do something else
	...
End If
%%

Dans ce format si <expression> is Vrai alors le code suivant le THEN est ex&eacute;cut&eacute;. Si la r&eacute;ponse est Faux alors le code suivant le ELSE est ex&eacute;cut&eacute;. Dans ce format, vous pouvez donner du code &agrave; la fois les r&eacute;ponses Vrai et Faux de l'<expression>.

%%(freebasic)
If <expression> Then
	do something
ElseIf <expression> Then
	do something
End If
%%

Dans ce format si <expression> is Vrai alors le code suivant le THEN est ex&eacute;cut&eacute;. Si la r&eacute;ponse est Faux alors le ELSEIF est ex&eacute;cut&eacute;. Si le ELSEIF est Vrai, le code suivant le THEN (du ELSEIF) est ex&eacute;cut&eacute;, sinon le code suivant le ENDIF est ex&eacute;cut&eacute;. Vous pouvez avoir autant de d&eacute;clarations ELSEIF que n&eacute;cessaire pour couvrir enti&egrave;rement la gamme de questions que vous avez &agrave; poser.

%%(freebasic)
If <expression> Then
	do something
ElseIf <expression> Then
	do something
Else
	do something else
End If
%%

Ce format est une combinaison de tous les autres formats. Si <expression> est Vrai, alors le code suivant le THEN est ensuite ex&eacute;cut&eacute;. Si la r&eacute;ponse est Faux alors le ELSEIF est ex&eacute;cut&eacute;. Si le ELSEIF est Vrai, le code suivant le THEN (du ELSEIF) est ex&eacute;cut&eacute;, sinon le code suivant le ELSE est ex&eacute;cut&eacute;.

Ce format vous permet de poser une s&eacute;rie de questions et si la r&eacute;ponse est Faux &agrave; toutes les questions, vous pouvez prendre une direction par d&eacute;faut de l'action bas&eacute;e sur le bloc ELSE.

Comme vous pouvez le voir, vous pouvez poser la question d'un certain nombre de fa&ccedil;ons, puis ex&eacute;cuter le code bas&eacute; sur un certain nombre de combinaisons de r&eacute;ponses. Cela vous donne beaucoup de flexibilit&eacute; &agrave; la fois dans la fa&ccedil;on de formuler une question et de quoi faire sur la base des r&eacute;ponses.

<expression> C'est la question qui n&eacute;cessite une r&eacute;ponse et vous formulez la question &agrave; l'aide d'[[CatPgOperators op&eacute;rateurs logiques]]. 

Vous pouvez m&eacute;langer l'arithm&eacute;tique et les op&eacute;rateurs logiques, ainsi que les parenth&egrave;ses, dans une instruction IF. Le compilateur &eacute;value les instructions conditionnelles de gauche &agrave; droite, en tenant compte de la priorit&eacute; des op&eacute;rateurs. Par exemple, tous les extraits de code suivants ont des constructions IF correctes.

%%(freebasic)
If var1 = 5 Then
If (var1 = 5) And (var2 < 3) Then
If (var1 + 6) > 10 Then
%%

Vous remarquerez que les parenth&egrave;ses sont utilis&eacute;es pour regrouper les diff&eacute;rentes parties de l'expression. Vous devez utiliser des parenth&egrave;ses pour vous assurer de l'ex&eacute;cution logique des portions d'expressions. L'expression doit finalement donner Vrai ou Faux, m&ecirc;me si vous utilisez des op&eacute;rateurs arithm&eacute;tiques dans l'expression.

<div class="fb_header"> Utilisation des op&eacute;rateurs bit &agrave; bit dans une d&eacute;claration IF 

Rappelez-vous que les op&eacute;rateurs AND, OR et NOT sont des op&eacute;rateurs binaires. Autrement dit, ils retournent une valeur bas&eacute;e sur le fonctionnement binaire qu'ils effectuent. Vous devez veiller lors de l'utilisation d'op&eacute;rateurs de bits dans une instruction IF que le r&eacute;sultat sera &eacute;valu&eacute; correctement.

Voyez l'extrait de code ci-dessous. 

%%(freebasic)
If (var1 = 5) And (var2 < 3) Then
%%

Si ##var1## est &eacute;gal &agrave; 5, le compilateur retourne Vrai, sinon -1 pour l'expression. Si ##var2## est inf&eacute;rieur &agrave; 3 alors le compilateur retourne Vrai, sinon -1 pour cette expression. Le compilateur &eacute;value ensuite l'op&eacute;rateur AND, avec -1 AND -1 retourne -1. Comme -1 est non-z&eacute;ro, ou Vrai, le code qui suit le THEN sera ex&eacute;cut&eacute;. 

Si l'une ou l'autre des d&eacute;clarations entre parenth&egrave;ses est &eacute;valu&eacute;e &agrave; 0, alors le AND retournera 0, ce qui correspond &agrave; Faux, et le code qui suit le THEN ne sera pas ex&eacute;cut&eacute;. Lorsque vous utilisez les op&eacute;rateurs de bits, vous devez formuler les expressions conditionnelles de chaque c&ocirc;t&eacute; de l'op&eacute;rateur de bits de telle sorte que leur retour soit Vrai ou Faux. Cela vous donnera des r&eacute;sultats coh&eacute;rents dans vos &eacute;valuations.

<div class="fb_header"> Le probl&egrave;me NOT 

L'op&eacute;rateur binaire NOT peut &ecirc;tre un probl&egrave;me dans une d&eacute;claration IF. Vous pouvez &ecirc;tre amen&eacute; &agrave; utiliser l'&eacute;criture //If Not var Then//, avec NOT effectuant une op&eacute;ration logique, plut&ocirc;t qu'une op&eacute;ration bit &agrave; bit. En FreeBASIC, NOT effectue une op&eacute;ration bit &agrave; bit, et non pas une op&eacute;ration logique.

Si //var// contient la valeur de 3, alors NOT 3 donne -4, ce qui sera consid&eacute;r&eacute; comme le r&eacute;sultat Vrai et le code suivant le THEN sera ex&eacute;cut&eacute;, ce qui n'est probablement pas ce qui est attendu. Au lieu d'&eacute;crire //If Not var Then//, &eacute;crivez //If var <> 0 Then//.

<div class="fb_header"> Conditions qui se chevauchent 

Lorsque vous utilisez des conditions combin&eacute;es, assurez-vous que les conditions ne se chevauchent pas. Dans la plupart des cas, cela va produire des r&eacute;sultats impr&eacute;visibles. Chaque condition doit produire un r&eacute;sultat unique, et la combinaison des r&eacute;sultats individuels doit exprimer un r&eacute;sultat unique. C'est primordial dans les constructions IF-ELSEIF; des conditions qui se chevauchent dans un bloc IF-ELSEIF peuvent ex&eacute;cuter un code erron&eacute;, au mauvais moment.

<div class="fb_header">D&eacute;clarations IF imbriqu&eacute;es 

Parfois, il est n&eacute;cessaire d'imbriquer des d&eacute;clarations IF afin de mieux d&eacute;crire le processus d&eacute;cisionnel de l'&eacute;valuation. Bien que la d&eacute;claration IF puisse g&eacute;rer plusieurs arguments dans une expression, il y a des cas o&ugrave; vous voudrez peut-&ecirc;tre progressivement contr&ocirc;ler certaines gammes de valeurs en utilisant des blocs de IF imbriqu&eacute;es.

%%(freebasic)
If <expression> Then 
	<statement>
	...
	If <expression> Then
		<statement>
		<statement>
		...
	End If
End If
%%

Il est important de fermer chaque bloc correctement avec un END IF lorsqu'il est ouvert par un IF pour &eacute;viter des erreurs compilateur ou  de logique. Les erreurs du compilateur sont assez faciles &agrave; r&eacute;soudre, tandis que les erreurs de logique peuvent &ecirc;tre difficiles &agrave; traquer et corriger. La meilleure fa&ccedil;on de s'assurer que vous fermer les blocs correctement est l'indentation des d&eacute;clarations IF imbriqu&eacute;es et ensuite l'indentation des d&eacute;clarations END IF correspondant au m&ecirc;me niveau que le IF. Dans l'exemple ci-dessus, l'indentation vous visualise les couples IF .... END IF. 

<div class="fb_header"> La fonction IIF

IIF, ou fonction "immediate If" renvoie l'une des deux valeurs num&eacute;riques bas&eacute;es sur une expression. Vous pouvez penser si la fonction IIF comme une fonction "in-line If" qui agit comme un appel de fonction.

%%(freebasic)
Value = Iif(<expression>, numeric_value_if_true, numeric_value_if_false)
%%

IIF peut &ecirc;tre utilis&eacute; comme une fonction autonome ou &agrave; l'int&eacute;rieur d'autres expressions o&ugrave; vous ne voulez pas diviser l'expression pour ins&eacute;rer une instruction IF. Les valeurs num&eacute;riques peuvent &ecirc;tre des valeurs litt&eacute;rales, des variables ou des appels de fonctions num&eacute;riques. La limitation de la fonction, c'est qu'elle ne retourne qu'une valeur num&eacute;rique, et non une cha&icirc;ne, mais vous pouvez contourner cette limitation en utilisant des pointeurs.

{{table columns="" cellpadding="2" cells="<table>L'instruction IIF &eacute;value &agrave; la fois les conditions Vrai et Faux si devez &eacute;viter d'effectuer une op&eacute;ration ill&eacute;gale comme la division par z&eacute;ro dans un des &eacute;tats, m&ecirc;me si cette condition n'est pas retourn&eacute;e par la fonction.;</table>

<div class="fb_header"> Formuler la question 

La d&eacute;claration IF est un outil puissant, mais vous devez vous assurer que vous formulez correctement la question qui est l'<expression>. Chaque expression doit se r&eacute;soudre par Vrai ou faux, toujours avec Vrai ex&eacute;cutant le code qui suit THEN.

Lors de l'&eacute;criture une d&eacute;claration IF vous devez vous demander si l'expression se r&eacute;sout par Vrai ou Faux? Cela est particuli&egrave;rement vrai pour les expressions compos&eacute;es qui ont un certain nombre de termes dans l'expression. Chaque terme doit se r&eacute;soudre par Vrai ou faux, et l'ensemble des termes doit se r&eacute;soudre par True ou False. S'il existe le moindre doute sur l'&eacute;valuation correcte de l'expression compos&eacute;, cassez les d&eacute;clarations IF imbriqu&eacute;es.

<div class="fb_header"> V&eacute;rification des gammes de valeurs 

Souvent, vous aurez besoin de v&eacute;rifier pour une plage de valeurs dans une instruction IF, et pour que le compilateur &eacute;value correctement la condition pour la plage, vous devez formuler les expressions correctement. Il existe essentiellement deux types d'expressions de gamme: exclusives et inclusives. Les expressions exclusives excluent une plage de valeurs. Les expressions inclusives incluent une gamme de valeurs. Chaque famille a un format particulier qui doit &ecirc;tre suivi d'une &eacute;valuation ad&eacute;quate.

** Excluure une plage de valeurs **

Supposez que vous avez une plage de valeurs et que vous vouliez faire quelque chose de sp&eacute;cial si la valeur est inf&eacute;rieure ou &eacute;gale &agrave; 1 ou sup&eacute;rieure ou &eacute;gale &agrave; 10. Pour ex&eacute;cuter cela vous devez exclure les nombres de 2 &agrave; 9 de l'action sp&eacute;ciale.

Vous pouvez formuler cela comme une question qui peut ensuite &ecirc;tre traduite en code.

%%(freebasic)
Is the value a number less than or equal to 1 or a number greater than or equal to 10?
If Yes, then do special action.
If No, then do standard action.
%%

La clef ici est OR. Si la borne inf&eacute;rieure de la valeur est &eacute;gale ou inf&eacute;rieure &agrave; 1 OU la limite sup&eacute;rieure de la valeur est &eacute;gale ou sup&eacute;rieure &agrave; 10 alors effectuer l'action sp&eacute;ciale.

%%(freebasic)
If (value <= 1) Or (value >= 10) Then
	do_special
Else
	do_standard
End If
%%

Rappelez-vous que OU retournera Vrai si la condition est Vraie. Si la valeur est 1 ou moins, ou la valeur est de 10 ou plus, alors l'expression retournera Vrai et l'action sp&eacute;ciale sera effectu&eacute;e.

** Inclure une gamme de valeurs **

L'inclusion est l'oppos&eacute; de l'exclusion. Comme vous pouvez le deviner, le format est similaire, mais vous utilisez l'op&eacute;rateur AND qui est l'oppos&eacute; de l'op&eacute;rateur OR.

Supposons que vous voulez faire quelque chose de sp&eacute;cial si la valeur est de 5, 6 ou 7. Donc que vous souhaitez inclure ces nombres dans votre expression de gamme. Encore une fois, vous pouvez commencer par poser une question.

%%(freebasic)
Is the value a number between 5 and 7 (inclusive)?
If Yes, then do special action
If No, then do standard action
%%

Ici vous souhaitez inclure les nombres 5, 6, 7 pour examen. Donc si la valeur est de 5 ou sup&eacute;rieure et la valeur est de 7 ou inf&eacute;rieure on fait quelque chose de sp&eacute;cial. Cela se traduit par le code suivant.

%%(freebasic)
If (value >= 5) And (value <= 7) Then
	do_special
Else
	do_standard
End If
%%

Rappelez-vous que l'op&eacute;rateur AND ne retourneront Vrai que si les deux op&eacute;randes sont Vrai. Si la valeur est de 6, 6 est sup&eacute;rieur &agrave; 5 et 6 est &eacute;galement inf&eacute;rieur &agrave; 7, alors les deux affirmations sont Vrai, et l'expression prend la valeur Vrai..
