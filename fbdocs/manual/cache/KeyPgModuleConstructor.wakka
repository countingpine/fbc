{{fbdoc item="title" value="CONSTRUCTOR (Module)"}}----
Spécifie l'exécution d'une procédure avant le code niveau module

{{fbdoc item="syntax"}}##
	[[[KeyPgPublic Public]] | [[KeyPgPrivate Private]]] [[KeyPgSub Sub]] //procedure_name// [[[KeyPgAlias Alias]] "//external_identifier//"] [()] **Constructor** [//priority//] [[[KeyPgStatic Static]]]
		{ //procedure body// }
	[[KeyPgEndblock End]] [[KeyPgSub Sub]]
##
{{fbdoc item="desc"}}
	Le mot-clé ##**Constructor**## est utilisé dans les définitions de ##[[KeyPgSub Sub]]## pour forcer l'exécution de la procédure avant celle du code au niveau module. Les procédures définies comme des constructeurs peuvent être utilisés de la même manière que les procédures ordinaires, c'est à dire, qu'elles peuvent être appelées à partir du code au niveau du module, ainsi que d'autres procédures.

	La procédure doit avoir une liste de paramètres vide.  Une erreur de compilation sera générée si le mot-clef ##**Constructor**## est utilisé dans une définition de ##[[KeyPgSub Sub]]## ayant un ou plusieurs paramètres. Dans un ensemble de procédures surchargées, un seul (1) constructeur peut être défini en raison de l'ambiguïté d'avoir plusieurs ##[[KeyPgSub Sub]]## qui n'ont aucun argument.

	Dans un seul module, les constructeurs sont normalement exécutés dans l'ordre dans lequel ils ont été définis.

	L'attribut ##//priority//##, un entier compris entre 101 et 65535, peut être utilisé pour forcer les constructeurs à être exécutés dans un certain ordre.  La valeur de ##//priority//## n'a pas de signification particulière, que la relation entre le numéro et les priorités des autres constructeurs.  101 est la plus haute priorité et est exécuté en premier.  Tous les constructeurs ayant un attribut de ##//priority//## sont exécutés avant les constructeurs n'ayant pas cet attribut.  La valeur de priorité de 65535 est équivalente à "ne pas attribuer une valeur de priorité".

	Un module peut définir des procédures constructeur multiples, et plusieurs modules peuvent définir des constructeurs supplémentaires à condition que deux constructeurs ##[[KeyPgPublic Public]]## ne partagent pas la même //procedure_name//.
	
	Lors de l'édition de liens avec des modules qui définissent également les constructeurs, l'ordre d'exécution n'est pas garanti au moment de la liaison sauf si l'attribut ##//priority//## est utilisé. Par conséquent, une attention particulière doit être prise lors de l'utilisation de constructeurs qui font appel à un module secondaire qui également définit un constructeur.  Dans un tel cas, il est conseillé d'utiliser un seul constructeur qui appelle explicitement les procédures d'initialisation dans ces modules.

{{fbdoc item="ex"}}
{{fbdoc item="filename" value="examples/manual/procs/mod-ctor.bas"}}%%(freebasic)
'' ConDesExample.bas : An example program that defines two sets of
'' constructors and destructors. Demonstrates when and in what order
'' they are called when linking a single module.

sub Constructor1() constructor
	print "Constructor1() called"
end sub

sub Destructor1() destructor
	print "Destructor1() called"
end sub

sub Constructor2() constructor
	print "Constructor2() called"
end sub

sub Destructor2() destructor
	print "Destructor2() called"
end sub

	'' ----------------------
	print "module-level code"

	end 0
	'' ----------------------
%%
	**Affichage:**
%%
Constructor1() called
Constructor2() called
module-level code
Destructor1() called
Destructor2() called
%%

{{fbdoc item="diff"}}
	- Nouveau pour ""FreeBASIC""

{{fbdoc item="see"}}
	- [[KeyPgConstructor Constructor (Classe)]]
	- [[KeyPgModuleDestructor Destructor (Module)]]
	- [[KeyPgSub Sub]]

{{fbdoc item="back" value="CatPgProcedures|Procedures"}}