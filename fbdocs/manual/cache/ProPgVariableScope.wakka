{{fbdoc item="title" value="Port&eacute;e des variables"}}----
Règles de visibilité et d'accès pour les variables et objets

La portée d'une variable se réfère à sa visibilité dans le programme. Une variable n'est pas visible (n'est pas accessible) en dehors de la portée pour laquelle elle a été déclarée. Où et comment une variable est déclarée détermine son champ d'application.

	En FreeBASIC, il ya 4 catégories de portée: **//local//**, **//shared//**, **//common//** et **//common shared//**. Chacune de ces portées a des règles de visibilité différentes qui sont détaillées ci-dessous.

{{fbdoc item="section" value="Portée locale (local)"}}

	Les variables déclarées dans la portée locale sont visibles uniquement dans l'instance la plus locale d'une fonction IF, FOR, SCOPE ou du bloc module où elles ont été déclarées.

	- ##[[KeyPgSub Sub]]##, ##[[KeyPgFunction Function]]##, le corps principal du programme et chaque instruction composée définissent implicitement des blocs de nouvelles portées locales. 
	- Les variables déclarées explicitement en utilisant ##[[KeyPgDim Dim]]## ou ##[[KeyPgRedim Redim]]## prennent la portée du bloc le plus local dans lequel sont déclarées. 
	- Les variables implicites prennent la portée du bloc le plus local ##[[KeyPgScope Scope...End Scope]]## dans lequel elles ont été utilisées en premier, autrement elles ont la portée de ##[[KeyPgSub Sub]]##, ##[[KeyPgFunction Function]]## ou du corps principal où elles sont utilisées. 

	Dans la portée locale il n'y a pas de visibilité entre le code au niveau du module et le code au niveau de la fonction. En outre, les variables dimensionnées dans un bloc de décision ou une instruction de boucle ne seront visibles que dans le bloc dans lequel ont été dimensionnées. Les variables déclarées dans portée locale d'un module ne sont pas visibles dans l'une quelconque des fonctions au sein de ce module. De même, les variables locales déclarées à l'intérieur des fonctions ne sont pas visibles dans la code au niveau du module, ni aucune autre fonction au sein du module.

	Les variables déclarées à l'intérieur de blocs ##[[KeyPgScope Scope]]## ne peuvent être déclarées que de portée locale et ne sont pas visibles à l'extérieur du bloc. Les blocs ##[[KeyPgScope Scope]]##, cependant, héritent de la portée environnante, ainsi les variables locales déclarées en dehors du bloc ##[[KeyPgScope Scope]]## seront visibles à l'intérieur de celui-ci (//voir exemple de programme//).

	Vous pouvez déclarer une variable comme étant de portée locale explicitement en utilisant l'instruction ##[[KeyPgDim Dim]]## ou implicitement par simple introduction de la variable (//voir [[ProPgImplicitdeclarations Les déclarations implicites]]//). L'exemple de programme ##**local.bas**## démontre les règles de visibilité pour la portée locale.

**local.bas**
{{fbdoc item="filename" value="examples/manual/proguide/varscope/local.bas"}}%%(freebasic)
'' visible seulement dans ce module
Dim As Integer local_moduleLevel1

'' OK.
Print local_moduleLevel1

Scope
  '' OK; Blocs SCOPE heritent portée environnante
  Print local_moduleLevel1
  
  '' visible seulement dans ce Bloc SCOPE
  Dim As Integer local_moduleLevel2

  '' OK.
  Print local_moduleLevel2
End Scope

'' Error; impossible voir variables SCOPE-interieure
'' print local_moduleLevel2

Function some_function( ) As Integer
  '' visible seulement dans cette fonction
  Dim As Integer local_functionLevel

  '' OK.
  Print local_functionLevel

  '' Error; impossible voir variables niveau-module local  
  '' print local_moduleLevel1

  '' Error; impossible voir variables niveau-module local
  '' print local_moduleLevel2

  function = 0

End Function

'' print local_functionLevel                    '' Error; impossible voir variables niveau_fonction
End 0
%%

{{fbdoc item="section" value="Portée partagée (Shared Scope)"}}

	Les variables déclarées de portée partagée (shared scope) dans un module sont visibles dans tout le module ainsi que toutes les fonctions de celui-ci.

	Contrairement à la portée locale, la portée partagée (shared scope) rend les variables de niveau module visibles à toutes les fonctions de ce module. En d'autres termes le module //partage// ses déclarations avec ses fonctions.

	Les variables peuvent seulement être déclarées de portée partagée au niveau du module. C'est à dire, seuls les modules peuvent partager des variables. Ni les fonctions, ni les blocs ##[[KeyPgScope Scope]]## ne peuvent déclarer des variables de portée partagée, donc les variables déclarées peuvent seulement être locales à cette fonction ou bloc.

	Vous pouvez déclarer une variable comme étant de portée partagée en utilisant l'instruction DIM avec mot-clé ##[[KeyPgShared Shared]]##. L'exemple de programme ##**shared_scope.bas**## démontre les règles de visibilité pour la portée partagée.

##**shared.bas**##
{{fbdoc item="filename" value="examples/manual/proguide/varscope/shared.bas"}}%%(freebasic)
'' visible dans tout le module
Dim Shared As Integer shared_moduleLevel1

'' OK.
Print shared_moduleLevel1

Scope
  '' OK; peut voir variables portee-environnante
  Print shared_moduleLevel1
  
  '' Error; variables niveau-SCOPE impossible etre partagees
  '' dim shared as integer shared_ModuleLevel2
End Scope

End 0

Function some_function( ) As Integer
  '' OK; peut voir variables niveau-module partagees
  Print shared_moduleLevel1

  '' Error; variables niveau-fonction impossible etre partagees  
  '' dim shared as integer sharedFunctionLevel

  function = 0
End Function
%%

{{fbdoc item="section" value="Portée commune (Common Scope)"}}

	Les variables déclarées de portée commune (Common Scope) sont visibles pour tous les modules.

	Les variables déclarées avec ##[[KeyPgCommon Common]]## sont visibles à d'autres modules avec une déclaration de variable ##[[KeyPgCommon Common]]## correspondant.  Le nom de la variable déclarée doit correspondre aux modules entre eux.

##**module1.bas**##
{{fbdoc item="filename" value="examples/manual/proguide/varscope/module1.bas"}}%%(freebasic)
'' compiler avec:
''    fbc -lang qb module1.bas module2.bas

'$lang: "qb"

Declare Sub Print_Values()
Common m1 As Integer
Common m2 As Integer
	                  ' Ceci est execute apres tous autres modules
m1 = 1

Print "Module1"       
Print "m1 = "; m1     ' m1 = 1 comme defini dans ce module
Print "m2 = "; m2     ' m2 = 2 comme defini dans module2

Print_Values
%%

##**module2.bas**##
{{fbdoc item="filename" value="examples/manual/proguide/varscope/module2.bas"}}%%(freebasic)
Common m1 As Integer
Common m2 As Integer

m2 = 2

Print "Module2"       ' Ceci est execute en premier
Print "m1 = "; m1     ' m1 = 0 (par defaut)
print "m2 = "; m2     ' m2 = 2

Sub Print_Values()
  print "Module2.Print_Values"
  Print "m1 = "; m1   ' Variable implicite = 0    
  Print "m2 = "; m2   ' Variable implicite = 0  
End Sub
%%

**Affichage:**
%%
  Module2
  m1 = 0
  m2 = 2
  Module1
  m1 = 1
  m2 = 2
  Module2.Print_Values
  m1 = 0
  m2 = 0
%%

{{fbdoc item="section" value="Portée commune partagée (Common Shared Scope)"}}

	Les variables déclarées de portée commune partagée (Common Shared Scope) sont visibles à tous les modules et toutes leurs fonctions.

	Les variables déclarées avec ##[[KeyPgCommon Common]]## sont visibles aux autres modules avec une déclaration de variable ##[[KeyPgCommon Common]]## correspondant.  Le nom de la variable déclarée doit correspondre aux modules entre eux.  Dans un module le modificateur de déclaration ##[[KeyPgShared Shared]]## donne à la variable la portée niveau-module et la rend visible à tous les "sub" et fonctions.

//**##module3.bas##**//
{{fbdoc item="filename" value="examples/manual/proguide/varscope/module3.bas"}}%%(freebasic)
'' compile with:
''    fbc module3.bas module4.bas

Declare Sub Print_Values()
Common m1 As Integer
Common m2 As Integer

'' This is executed after all other modules
m1 = 1

print "Module3"       
print "m1 = "; m1     '' m1 = 1 as set in this module
print "m2 = "; m2     '' m2 = 2 as set in module2

Print_Values
%%

##**module4.bas**##
{{fbdoc item="filename" value="examples/manual/proguide/varscope/module4.bas"}}%%(freebasic)
Common Shared m1 As Integer
Common Shared m2 As Integer

m2 = 2

print "Module4"       '' This is executed first
print "m1 = "; m1     '' m1 = 0 (by default)
print "m2 = "; m2     '' m2 = 2

Sub Print_Values()
  print "Module4.Print_Values"
  print "m1 = "; m1   '' m1 = 1    
  print "m2 = "; m2   '' m2 = 2
End Sub
%%

//**##Output:##**//
%%
  Module4
  m1 = 0
  m2 = 2
  Module3
  m1 = 1
  m2 = 2
  Module4.Print_Values
  m1 = 1
  m2 = 2
%%

{{fbdoc item="ex"}}
	Voir les exemples ci-dessus.

{{fbdoc item="see"}}
	- ##[[KeyPgScope Scope]]##
	- ##[[KeyPgDim Dim]]##
	- ##[[KeyPgCommon Common]]##
	- ##[[KeyPgShared Shared]]##
	- [[ProPgVariables Variables]]
	- [[ProPgImplicitdeclarations Les déclarations implicites]]

{{fbdoc item="back" value="CatPgProgrammer|Programmer's Guide"}}
   
   

