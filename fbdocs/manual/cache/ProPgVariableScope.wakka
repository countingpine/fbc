{{fbdoc item="title" value="Variable Scope"}}----
R&egrave;gles de visibilit&eacute; et d'acc&egrave;s pour les variables et objets

La port&eacute;e d'une variable se r&eacute;f&egrave;re &agrave; sa visibilit&eacute; dans le programme. Une variable n'est pas visible (n'est pas accessible) en dehors de la port&eacute;e pour laquelle elle a &eacute;t&eacute; d&eacute;clar&eacute;e. O&ugrave; et comment une variable est d&eacute;clar&eacute;e d&eacute;termine son champ d'application.

	En FreeBasic, il ya 4 cat&eacute;gories de port&eacute;e: **//local//**, **//shared//**, **//common//** et **//common shared//**. Chacune de ces port&eacute;es a des r&egrave;gles de visibilit&eacute; diff&eacute;rentes qui sont d&eacute;taill&eacute;es ci-dessous.

{{fbdoc item="section" value="Port&eacute;e locale (local)

	Les variables d&eacute;clar&eacute;es dans la port&eacute;e locale sont visibles uniquement dans l'instance la plus locale d'une fonction IF, FOR, SCOPE ou du bloc module o&ugrave; elles ont &eacute;t&eacute; d&eacute;clar&eacute;es.

	- ##[[KeyPgSub Sub]]##, ##[[KeyPgFunction Function]]##, le corps principal du programme et chaque instruction compos&eacute;e d&eacute;finissent implicitement des blocs de nouvelles port&eacute;es locales. 
	- Les variables d&eacute;clar&eacute;es explicitement en utilisant ##[[KeyPgDim Dim]]## ou ##[[KeyPgRedim ReDim]]## prennent la port&eacute;e du bloc le plus local dans lequel sont d&eacute;clar&eacute;es. 
	- Les variables implicites prennent la port&eacute;e du bloc le plus local ##[[KeyPgScope Scope...End Scope]]## dans lequel elles ont &eacute;t&eacute; utilis&eacute;es en premier, autrement elles ont la port&eacute;e de ##[[KeyPgSub Sub]]##, ##[[KeyPgFunction Function]]## ou du corps principal o&ugrave; elles sont utilis&eacute;es. 

	Dans la port&eacute;e locale il n'y a pas de visibilit&eacute; entre le code au niveau du module et le code au niveau de la fonction. En outre, les variables dimensionn&eacute;es dans un bloc de d&eacute;cision ou une instruction de boucle ne seront visibles que dans le bloc dans lequel ont &eacute;t&eacute; dimensionn&eacute;es. Les variables d&eacute;clar&eacute;es dans port&eacute;e locale d'un module ne sont pas visibles dans l'une quelconque des fonctions au sein de ce module. De m&ecirc;me, les variables locales d&eacute;clar&eacute;es &agrave; l'int&eacute;rieur des fonctions ne sont pas visibles dans la code au niveau du module, ni aucune autre fonction au sein du module.

	Les variables d&eacute;clar&eacute;es &agrave; l'int&eacute;rieur de blocs ##[[KeyPgScope Scope]]## ne peuvent &ecirc;tre d&eacute;clar&eacute;es que de port&eacute;e locale et ne sont pas visibles &agrave; l'ext&eacute;rieur du bloc. Les blocs ##[[KeyPgScope Scope]]##, cependant, h&eacute;ritent de la port&eacute;e environnante, ainsi les variables locales d&eacute;clar&eacute;es en dehors du bloc ##[[KeyPgScope Scope]]## seront visibles &agrave; l'int&eacute;rieur de celui-ci (//voir exemple de programme//).

	Vous pouvez d&eacute;clarer une variable comme &eacute;tant de port&eacute;e locale explicitement en utilisant l'instruction ##[[KeyPgDim Dim]]## ou implicitement par simple introduction de la variable (//voir [[ProPgImplicitdeclarations Les d&eacute;clarations implicites]]//). L'exemple de programme ##**local.bas**## d&eacute;montre les r&egrave;gles de visibilit&eacute; pour la port&eacute;e locale.

**local.bas**
{{fbdoc item="filename" value="examples/manual/proguide/varscope/local.bas"}}%%(freebasic)
'' visible seulement dans ce module
Dim As Integer local_moduleLevel1

'' OK.
Print local_moduleLevel1

Scope
  '' OK; Blocs SCOPE heritent port&eacute;e environnante
  Print local_moduleLevel1
  
  '' visible seulement dans ce Bloc SCOPE
  Dim As Integer local_moduleLevel2

  '' OK.
  Print local_moduleLevel2
End Scope

'' Error; impossible voir variables SCOPE-interieure
'' print local_moduleLevel2

Function some_function( ) As Integer
  '' visible seulement dans cette fonction
  Dim As Integer local_functionLevel

  '' OK.
  Print local_functionLevel

  '' Error; impossible voir variables niveau-module local  
  '' print local_moduleLevel1

  '' Error; impossible voir variables niveau-module local
  '' print local_moduleLevel2

  function = 0

End Function

'' print local_functionLevel'' Error; impossible voir variables niveau_fonction
End 0
%%

{{fbdoc item="section" value="Port&eacute;e partag&eacute;e (Shared Scope)

	Les variables d&eacute;clar&eacute;es de port&eacute;e partag&eacute;e (shared scope) dans un module sont visibles dans tout le module ainsi que toutes les fonctions de celui-ci.

	Contrairement &agrave; la port&eacute;e locale, la port&eacute;e partag&eacute;e (shared scope) rend les variables de niveau module visibles &agrave; toutes les fonctions de ce module. En d'autres termes le module //partage// ses d&eacute;clarations avec ses fonctions.

	Les variables peuvent seulement &ecirc;tre d&eacute;clar&eacute;es de port&eacute;e partag&eacute;e au niveau du module. C'est &agrave; dire, seuls les modules peuvent partager des variables. Ni les fonctions, ni les blocs ##[[KeyPgScope Scope]]## ne peuvent d&eacute;clarer des variables de port&eacute;e partag&eacute;e, donc les variables d&eacute;clar&eacute;es peuvent seulement &ecirc;tre locales &agrave; cette fonction ou bloc.

	Vous pouvez d&eacute;clarer une variable comme &eacute;tant de port&eacute;e partag&eacute;e en utilisant l'instruction DIM avec mot-cl&eacute; ##[[KeyPgShared Shared]]##. L'exemple de programme ##**shared_scope.bas**## d&eacute;montre les r&egrave;gles de visibilit&eacute; pour la port&eacute;e partag&eacute;e.

##**shared.bas**##
{{fbdoc item="filename" value="examples/manual/proguide/varscope/shared.bas"}}%%(freebasic)
'' visible dans tout le module
Dim Shared As Integer shared_moduleLevel1

'' OK.
Print shared_moduleLevel1

Scope
  '' OK; peut voir variables portee-environnante
  Print shared_moduleLevel1
  
  '' Error; variables niveau-SCOPE impossible etre partagees
  '' dim shared as integer shared_ModuleLevel2
End Scope

End 0

Function some_function( ) As Integer
  '' OK; peut voir variables niveau-module partagees
  Print shared_moduleLevel1

  '' Error; variables niveau-fonction impossible etre partagees  
  '' dim shared as integer sharedFunctionLevel

  function = 0
End Function
%%

{{fbdoc item="section" value="Port&eacute;e commune (Common Scope)

	Les variables d&eacute;clar&eacute;es de port&eacute;e commune (Common Scope) sont visibles pour tous les modules.

	Les variables d&eacute;clar&eacute;es avec ##[[KeyPgCommon Common]]## sont visibles &agrave; d'autres modules avec une d&eacute;claration de variable ##[[KeyPgCommon Common]]## correspondant.  Le nom de la variable d&eacute;clar&eacute;e doit correspondre aux modules entre eux.

##**module1.bas**##
{{fbdoc item="filename" value="examples/manual/proguide/varscope/module1.bas"}}%%(freebasic)
'' compiler avec:
''    fbc -lang qb module1.bas module2.bas

'$lang: "qb"

Declare Sub Print_Values()
Common m1 As Integer
Common m2 As Integer
	                  ' Ceci est execute apres tous autres modules
m1 = 1

Print "Module1"       
Print "m1 = "; m1     ' m1 = 1 comme defini dans ce module
Print "m2 = "; m2     ' m2 = 2 comme defini dans module2

Print_Values
%%

##**module2.bas**##
{{fbdoc item="filename" value="examples/manual/proguide/varscope/module2.bas"}}%%(freebasic)
Common m1 As Integer
Common m2 As Integer

m2 = 2

Print "Module2"       ' Ceci est execute en premier
Print "m1 = "; m1     ' m1 = 0 (par defaut)
print "m2 = "; m2     ' m2 = 2

Sub Print_Values()
  print "Module2.Print_Values"
  Print "m1 = "; m1   ' Variable implicite = 0    
  Print "m2 = "; m2   ' Variable implicite = 0  
End Sub
%%

**Affichage:**
%%
  Module2
  m1 = 0
  m2 = 2
  Module1
  m1 = 1
  m2 = 2
  Module2.Print_Values
  m1 = 0
  m2 = 0
%%

{{fbdoc item="section" value="Port&eacute;e commune partag&eacute;e (Common Shared Scope)

	Les variables d&eacute;clar&eacute;es de port&eacute;e commune partag&eacute;e (Common Shared Scope) sont visibles &agrave; tous les modules et toutes leurs fonctions.

	Les variables d&eacute;clar&eacute;es avec ##[[KeyPgCommon Common]]## sont visibles aux autres modules avec une d&eacute;claration de variable ##[[KeyPgCommon Common]]## correspondant.  Le nom de la variable d&eacute;clar&eacute;e doit correspondre aux modules entre eux.  Dans un module le modificateur de d&eacute;claration ##[[KeyPgShared Shared]]## donne &agrave; la variable la port&eacute;e niveau-module et la rend visible &agrave; tous les "sub" et fonctions.

//**##module3.bas##**//
{{fbdoc item="filename" value="examples/manual/proguide/varscope/module3.bas"}}%%(freebasic)
'' compile with:
''    fbc module3.bas module4.bas

Declare Sub Print_Values()
Common m1 As Integer
Common m2 As Integer

'' This is executed after all other modules
m1 = 1

print "Module3"       
print "m1 = "; m1     '' m1 = 1 as set in this module
print "m2 = "; m2     '' m2 = 2 as set in module2

Print_Values
%%

##**module4.bas**##
{{fbdoc item="filename" value="examples/manual/proguide/varscope/module4.bas"}}%%(freebasic)
Common Shared m1 As Integer
Common Shared m2 As Integer

m2 = 2

print "Module4"       '' This is executed first
print "m1 = "; m1     '' m1 = 0 (by default)
print "m2 = "; m2     '' m2 = 2

Sub Print_Values()
  print "Module4.Print_Values"
  print "m1 = "; m1   '' m1 = 1    
  print "m2 = "; m2   '' m2 = 2
End Sub
%%

//**##Output:##**//
%%
  Module4
  m1 = 0
  m2 = 2
  Module3
  m1 = 1
  m2 = 2
  Module4.Print_Values
  m1 = 1
  m2 = 2
%%

{{fbdoc item="ex"}}
	Voir les exemples ci-dessus.

{{fbdoc item="see"}}
	- ##[[KeyPgScope Scope]]##
	- ##[[KeyPgDim Dim]]##
	- ##[[KeyPgCommon Common]]##
	- ##[[KeyPgShared Shared]]##
	- [[ProPgVariables Variables]]
	- [[ProPgImplicitdeclarations Les d&eacute;clarations implicites]]

{{fbdoc item="back" value="CatPgProgrammer|Programmer's Guide"}}
   
