{{fbdoc item="title" value="Gestion des erreurs"}}----
Gestion des erreurs d'exécution.

	""FreeBASIC"" peut gérer les erreurs de la manière suivante:
	- Par défaut, le programme ne fait rien avec les erreurs - elles sont ignorées et le code continue. Dans ce cas, le code devrait traiter les erreurs possibles dans la ligne suivante en utilisant la fonction ##[[KeyPgErr Err]]##.
	- S'il est compilé avec les options //[[CompilerOpte -e]]// ou //[[CompilerOptex -ex]]//, ""FreeBASIC"" utilise la gestion des erreurs comme dans QB.
	- Les **futures** versions POO de ""FreeBASIC"" auront un gestionnaire d'exception comme dans Java: TRY..CATCH...FINALLY.

	**NOTE:** Les informations suivantes sont valables sauf si l'erreur produit un: "OS General Protection Fault" = "système d'exploitation erreur de protection générale"  (par exemple, si le programme écrit en dehors de la zone mémoire du processus). Dans ces cas, le système d'exploitation va immédiatement arrêter le programme et émettre une erreur: rien ne peut l'éviter à l'intérieur de ""FreeBASIC"".

{{fbdoc item="section" value="La gestion des erreurs, par défaut"}}

	Le comportement par défaut ""FreeBASIC"" est de définir la variable ERR et de continuer. 

{{fbdoc item="filename" value="examples/manual/proguide/errors/err.bas"}}%%(freebasic)
Dim as integer e
Open "xzxwz.zwz" For Input As #1
e = Err
Print e
Sleep
%%

	(Le programme d'exemple suppose il n'y a pas de fichier ##xzxwz.zwz##). Le programme ne s'arrête pas; il définit la variable ERR et continue. L'erreur peut être traitée sur la ligne suivante.

	Certaines fonctions d'entrée/sortie telles que ##[[KeyPgOpen Open]]## et ##[[KeyPgPutfileio Put #]]##... peuvent être utilisées sous forme de fonction qui retourne un numéro d'erreur ou zéro en cas de succès.

{{fbdoc item="filename" value="examples/manual/proguide/errors/result.bas"}}%%(freebasic)
Print Open ("xzxwz.zwz" For Input As #1)
Sleep
%%

{{fbdoc item="section" value="La gestion des erreurs comme dans QuickBasic"}}

	Si l'option //[[CompilerOpte -e]]// ou //[[CompilerOptex -ex]]// est utilisée lors de la compilation, le programme est supposé avoir un gestionnaire d'erreurs comme dans QB. Si aucun gestionnaire ne gère l'erreur, le programme s'arrête avec une erreur.

	Note: si une gestion des erreurs comme dans QB est utilisée, le programmeur doit être préparé à gérer toutes les conditions d'erreur.

{{fbdoc item="filename" value="examples/manual/proguide/errors/on-error.bas"}}%%(freebasic)
'' Compile with QB (-lang qb) dialect

'$lang: "qb"

On Error Goto FAILED
Open "xzxwz.zwz" For Input As #1
On Error Goto 0
Sleep
End

FAILED:
Dim as integer e = Err
Print e
Sleep
End
%%

	##[[KeyPgOnerror On Error]]## définit une routine de gestion d'erreur dans laquelle le programme va sauter au moment où une erreur est trouvée. ##[[KeyPgOnerror On Error]] [[KeyPgGoto Goto]] 0## désactive la gestion des erreurs.

	Si une routine de gestion d'erreur n'est pas définie quand une erreur survient, le programme s'arrête et envoie sur la console un message d'erreur.
%%
Aborting program due to runtime error 2 (file not found)%%::c::
%%
::c::
	La routine de gestionnaire d'erreurs peut être à la fin du programme, comme dans QB. L'instruction ##[[KeyPgLocal On Local Error]]## permet la création d'une routine de gestion locale de l'erreur à la fin de la même ##[[KeyPgSub Sub]]## ou ##[[KeyPgFunction Function]]## dans laquelle l'erreur se produit.

{{fbdoc item="filename" value="examples/manual/proguide/errors/on-local.bas"}}%%(freebasic)
'' Compile with -e
'' The -e command line option is needed to enable error handling.

Declare Sub foo
  foo
Sleep

Sub foo
	
	Dim filename As String
	Dim errmsg As String
	filename = ""
	On Local Error Goto fail
  Open filename For Input Access Read As #1
	Print "No error"
	On Local Error Goto 0
	Exit Sub
	
  fail:
  errmsg = "Error " & Err & _
	       " in function " & *Erfn & _
	       " on line " & Erl
  Print errmsg
	
End Sub
%%

	Si l'option //[[CompilerOpte -e]]// est utilisée, le gestionnaire d'erreurs doit terminer le programme. 
	Avec //[[CompilerOptex -ex]]// la routine d'erreur peut se terminer en utilisant ##[[KeyPgResume Resume]]## (réessaie la déclaration qui a provoqué l'erreur) ou ##[[KeyPgResumenext Resume Next]]## (se poursuit à l'instruction suivante) .

{{fbdoc item="section" value="Les codes d'erreur"}}

	Voir [[TblRuntimeErrors Codes d'erreurs de fonctionnement]] pour une liste des numéros d'erreur d'exécution et leur signification associée.

	Aucune gamme de code d'erreurs utilisateur n'est définie. Si ##[[KeyPgError Error]]## est utilisée pour définir un code d'erreur, il est sage d'utiliser des valeurs élevées pour éviter les collisions avec la liste des codes d'erreurs intégrée. (Cette liste intégrée pouvant être étendue ultérieurement.)

{{fbdoc item="see"}}
	- [[CatPgError Fonctions de gestion des erreurs]]
	- [[TblRuntimeErrors Codes d'erreurs de fonctionnement]]

{{fbdoc item="back" value="CatPgProgrammer|Programmer's Guide"}}{{fbdoc item="back" value="DocToc|Table of Contents"}}

