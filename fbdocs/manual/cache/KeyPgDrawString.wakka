<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">  {{fbdoc item="title" value="Draw String"}}----<div id="fb_tab_r"> <img src="images/fblogo_mini.gif">
D&eacute;claration graphique pour afficher un texte surune image ou &agrave; l'&eacute;cran.<br \=""><br \="">{{fbdoc item="syntax"}}##<br \="">**Draw String** [//buffer//,] [STEP] (//x//, //y//), //text//[,//color// [, //font// [, //method// [, (//alpha//|//blender//)] ] ] ]<br \="">##<br \="">

{{fbdoc item="usage"}}##
	**Draw String** [//buffer//,] [STEP] (//x//, //y//), //text// [, //color//]
**Draw String** [//buffer//,] [STEP] (//x//, //y//), //text// , , //font// [, //method// [, //alpha// ] ]
**Draw String** [//buffer//,] [STEP] (//x//, //y//), //text// , , //font//, [[KeyPgCustomgfx Custom]], //blender// [, //parameter//]
	##
	{{fbdoc item="param"}}<br \="">##//buffer//##<br \="">		le <span style="font-style: italic;">sprite sur lequel &eacute;crire la cha&icirc;ne. S'il n'est pas pr&eacute;cis&eacute;, l'&eacute;criture se fera &agrave; l'&eacute;cran.<br \="">
	##STEP##<br \="">		utilise des coordonn&eacute;es relatives. Si ##STEP## est ajout&eacute;, les coordonn&eacute;es x et y sont calcul&eacute;es par rapport au dernier point trac&eacute;.<br \="">
##//x//##, ##//y//##<br \="">		les coordonn&eacute;es horizontales / verticales o&ugrave; dessiner, par rapport au coin en haut &agrave; gauche de l'&eacute;cran (sauf si ##STEP## est utilis&eacute; - voir au-dessus). Le coin en haut &agrave; gauche du texte sera dessin&eacute; &agrave; cette position.<br \="">
##//text//##<br \="">		la cha&icirc;ne contenant le texte &agrave; dessiner<br \="">
	##//color//##<br \="">		si aucune police n'a &eacute;t&eacute; pr&eacute;cis&eacute;e, ceci vous permet de choisir la couleur du texte. Si omis, la ##[[KeyPgColor Color]]## d'arri&egrave;re-plan est utilis&eacute;e par d&eacute;faut.<br \="">
		##//font//##<br \="">		un tampon image contenant une police personnalis&eacute;e. Si aucune police n'est fournie, la police standard dans la r&eacute;solution du texte actuel est utilis&eacute;e, et les param&eacute;tres suivants sont ignor&eacute;s.<br \="">
	##//method//##<br \="">		sp&eacute;cifie comment les caract&egrave;res de la police sont dessin&eacute;s sur la surface cible. Les m&ecirc;mes m&eacute;thodes utilis&eacute;es pour la d&eacute;claration ##[[KeyPgPutgraphics Put]]## sont permises, avec la seule diff&eacute;rence que la m&eacute;thode par d&eacute;faut est la fonction ##TRANS##.<br \="">
		##//alpha//##<br \="">		valeur alpha, de 0 &agrave; 255. Ce param&egrave;tre s'applique seulement aux m&eacute;thodes ##[[KeyPgAddGfx Add]]## ou ##[[KeyPgAlphaGfx Alpha]]##.<br \="">
	##//blender//##<br \="">		fonction <em>blender</em> personnelle pour la m&eacute;thode de dessin ##[[KeyPgCustomgfx Custom]]##; voir la description de la m&eacute;thode ##[[KeyPgPutgraphics Put (Graphique)]]## pour plus de d&eacute;tails. Ce param&egrave;tre s'applique seulement &agrave; la m&eacute;thode ##[[KeyPgCustomgfx Custom]]##.<br \="">
		##//parameter//##
	##[[KeyPgPointer Pointeur]]## facultatif pass&eacute; &agrave; la fonction <em>blender</em> personnelle; si omis, la valeur par d&eacute;faut est (##0##).
		<br \="">
	{{fbdoc item="desc"}}<br \="">Ce mot-clef graphique affiche une cha&icirc;ne &agrave; l'&eacute;cran avec positionnement des pixels, un arri&egrave;re-plan transparent et peut utiliser une police personnelle. **##Draw String##** ne met pas &agrave; jour le curseur texte ou graphique. Il ne coupe pas en fin de ligne. Tabulations, retours chariot et autres caract&egrave;res sp&eacute;ciaux n'ont pas de comportement sp&eacute;cial dans **##Draw String##**, et sont tra&icirc;t&eacute;s comme des caract&egrave;res normaux.<br \=""><br \="">En mode graphique, cette fonction procure une alternative flexible &agrave; ##[[KeyPgPrint Print]]##. Elle a plusieurs avantages:<br \=""> - ##**Draw String**## peut afficher un texte &agrave; n'importe quelle position de l'&eacute;cran , alors que ##[[KeyPgPrint Print]]## est oblig&eacute; de respecter la grille de caract&egrave;res accessibles par ##[[KeyPgLocate Locate]]##.<br \=""> - ##[[KeyPgPrint Print]]## remplace l'arri&egrave;re-plan derri&egrave;re le texte avec la couleur courante d'arri&egrave;re-plan. ##**Draw String**## ne fait pas cela et laisse les pixels de l'arri&egrave;re-plan intacts.<br \=""> - Comme ##[[KeyPgPutgraphics Put]]##, ##**Draw String**## a diff&eacute;rentes m&eacute;thodes pour afficher un texte, comme ##[[KeyPgAlphaGfx Alpha]]## et ##[[KeyPgCustomgfx Custom]]##.<br \=""> - ##**Draw String**## ne se limite pas &agrave; un seul jeu de caract&egrave;res: il est possible de fournir une police personnelle en remplacement.<br \=""><br \="">Note: Si aucune police n'est fournie, **##Draw String##** utilise par d&eacute;faut la police standard, comme pour ##[[KeyPgPrint Print]]##, avec la taille de caract&egrave;res indiqu&eacute;e par ##[[KeyPgWidth Width]]##. ##//method//## - s'il est donn&eacute; - sera ignor&eacute;, et le texte sera dans la couleur s&eacute;cifi&eacute;e, avec un arri&egrave;re-plan transparent.<br \=""><br \="">**Format de la police personnelle:**<br \="">La police est stock&eacute;e dans un tampon ##[[KeyPgGetgraphics Get]]##/##[[KeyPgPutgraphics Put]]## standard; la police doit &ecirc;tre stock&eacute;e dans un tampon utilisant la m&ecirc;me profondeur que la profondeur de couleur courante, autrement **##Draw String##** provoquera une erreur d'appel ill&eacute;gal &agrave; une fonction.<br \=""><br \="">La premi&egrave;re ligne de pixels dans le tampon de la police contient l'en-t&ecirc;te de la police, sur la base d'un octet (**not** pixel). Le premier octet identifie la version en-t&ecirc;te de la police; actuellement, ce doit &ecirc;tre 0. Le second octet donne le code ASCII du premier caract&egrave;re pris en charge par la police; le troisi&egrave;me octet donne le code ASCII du dernier caract&egrave;re pris en charge. Ainsi si la police prend en charge de 0 &agrave; 255, ##0## et ##255## seront le contenu de ces deux octets.<br \="">Puis vient la largeur de chacun des caract&egrave;res pris en charge, chacune dans un octet. Supposons que la police prenne en charge 96 caract&egrave;res, de 32 &agrave; 127 (inclus), les trois premiers octets de l'en-t&ecirc;te contiendront ##0##, ##32## et ##127##, suivis de 96 octets donnant les largeurs des caract&egrave;res correspondants.<br \=""><br \="">La hauteur de la police est obtenue en soustrayant 1 de la hauteur du tampon, ceci &eacute;tant, tandis que la premi&egrave;re ligne de pixels du tampon agit comme un en-t&ecirc;te de la police, les lignes restantes d&eacute;finissent les glyphes. Le tampon doit &ecirc;tre assez large pour contenir tous les dessins des caract&egrave;res support&eacute;s dans la m&ecirc;me ligne, l'un apr&egrave;s l'autre.<br \=""><br \="">
		{{fbdoc item="ex"}}<br \="">Ceci est un exemple de l'usage basic de ##**Draw String**## : on l'utilise pour &eacute;crire ##"Hello world"## au centre de l'&eacute;cran:<br \="">##<div class="freebasic">Const w = 320, h = 200 ''dimensions ecran<br><br>Dim x As Integer, y As Integer, s As String<br><br>'' Ouvre une fenetre graphique<br>ScreenRes w, h<br><br>'' Affiche une chaine au centre de l' ecran:<br><br>s = "Hello world"<br>x = (w - Len(s) * 8) \ 2<br>y = (h - 1 * 8) \ 2<br><br>Draw String (x, y), s<br><br>'' Attente d'une touche appuyee avant sortie du programme<br>Sleep<br>
		##<br><div class="fb_img"><img src="images/drawstr1.png">
	<br \=""><br \="">Cet exemple montre comment vous pouvez cr&eacute;er et utiser votre proprepolice. Pour plus de simplicit&eacute;, on utilise ##**Draw String**##avec la police par d&eacute;faut pour cr&eacute;er les glyphes.<br \="">##<div class="freebasic">'' Definition espace caracteres<br>Const FIRSTCHAR = 32, LASTCHAR = 127<br><br>Const NUMCHARS = (LASTCHAR - FIRSTCHAR) + 1<br>Dim As UByte Ptr p, myFont<br>Dim As Integer i<br><br>'' Ouvrir un ecran 256 couleurs (320*200)<br>ScreenRes 320, 200, 8<br><br>'' Creer police personnelle dans tampon PUT<br><br>myFont = ImageCreate(NUMCHARS * 8, 9)<br><br> '' Place entete police au debut des donnees pixel<br><br>#ifndef ImageInfo '' older versions of FB don't have the ImageInfo feature<br>p = myFont + IIf(myFont[0] = 7, 32, 4)<br>#else<br>ImageInfo( myFont, , , , , p )<br>#endif<br><br>p[0] = 0<br>p[1] = FIRSTCHAR<br>p[2] = LASTCHAR<br><br> '' PUT chaque caractere dans la police et mise-a-jour information longueur<br>For i = FIRSTCHAR To LASTCHAR<br>    <br>    '' Ici nous pouvons definir une largeur utilisateur pour chaque lettre, mais par simplicite nous utilisons<br>    '' une largeur fixe de 8 puisque nous re-utilisons les glyphes par defaut de police<br>    p[3 + i - FIRSTCHAR] = 8<br>    <br>    '' Creer un caractere dans tampon police utilisateur en dessinant avec police defaut<br>    Draw String myFont, ((i - FIRSTCHAR) * 8, 1), Chr(i), 32 + (i Mod 24) + 24<br>    <br>Next i<br><br>'' Maintenant le tampon police est pret; nous pouvons le sauver avec BSAVE pour utilisation ulterieur<br>Rem BSave "myfont.bmp", myFont<br><br>'' Ici nous affichons une chaine avec la police personelle<br>Draw String (10, 10), "ABCDEFGHIJKLMNOPQRSTUVWXYZ", , myFont<br>Draw String (10, 26), "abcdefghijklmnopqrstuvwxyz", , myFont<br>Draw String (66, 58), "Hello world!", , myFont<br><br>'' Libere la police de la memoire, maintenant que nous en avons fini<br>ImageDestroy myFont<br><br>Sleep<br>
		##<br><div class="fb_img"><img src="images/drawstr2.png">
	<br \=""><br \="">
		{{fbdoc item="diff"}}<br \="">  	- Nouveau pour FreeBASIC<br \="">    <br \="">  </li>
	{{fbdoc item="see"}}<br \="">  	- ##[[KeyPgPrint Print]]##<br \="">  </li>  	- ##[[KeyPgDraw Draw]]##<br \="">  </li>  	- ##[[KeyPgImagecreate ImageCreate]]##<br \="">  </li>  	- ##[[KeyPgImageDestroy ImageDestroy]]##<br \="">  </li>  	- ##[[KeyPgImageInfo ImageInfo]]##<br \="">  </li>  	- ##[[KeyPgPutgraphics Put (Graphique)]]##<br \="">  </li>  	- ##[[KeyPgWidth Width]]##<br \="">    <br \="">  </li>
		alpha value, ranging 0-255.  This parameter only applies to the ##[[KeyPgAddGfx Add]]## or ##[[KeyPgAlphaGfx Alpha]]## methods.
	##//blender//##
		custom blender function for the ##[[KeyPgCustomgfx Custom]]## drawing method; see ##[[KeyPgPutgraphics Put (Graphics)]]## statement description for details.  This parameter only applies to the ##[[KeyPgCustomgfx Custom]]## method.
	##//parameter//##
		optional ##[[KeyPgPointer pointer]]## to be passed to the custom blender function; if omitted, the default value is zero (##0##).

{{fbdoc item="desc"}}
	This graphics keyword prints a string to the screen with pixel positioning, transparent background, and can use an user-supplied font. **##Draw String##** does not update any text or graphics cursor.  It doesn't wrap at the end of line.  Tabs, carriage returns and other special characters have no special behavior in **##Draw String##**, and are treated as normal characters.
	
	In graphics mode, this function provides a flexible alternative to ##[[KeyPgPrint Print]]##.  It has several key advantages:
	    - ##**Draw String**## can print text to any coordinate on the screen, while ##[[KeyPgPrint Print]]## is constrained to the character grid accessible by ##[[KeyPgLocate Locate]]##.
	    - ##[[KeyPgPrint Print]]## will override the background behind the text with the current background color.  ##**Draw String**## does not do this: it leaves the pixels in the background untouched.
	    - Like ##[[KeyPgPutgraphics Put]]##, ##**Draw String**## has several different methods for printing text, such as ##[[KeyPgAlphaGfx Alpha]]## and ##[[KeyPgCustomgfx Custom]]##.
	    - ##**Draw String**## isn't limited to a single character set: it is possible to supply a custom font to be used instead.
	
	Note: If a custom font isn't supplied, **##Draw String##** will default to the standard font, as used by ##[[KeyPgPrint Print]]##, with character size dictated by ##[[KeyPgWidth Width]]##.  ##//method//## - if passed - will be ignored, and the text will be drawn using the color supplied, with a transparent background.

==The custom font format:==
	The font is stored in a standard ##[[KeyPgGetgraphics Get]]##/##[[KeyPgPutgraphics Put]]## buffer; the font has to be stored in a buffer using the same depth as the current color depth, otherwise **##Draw String##** will bump out with an illegal function call runtime error.

	The first line of pixels in the font buffer holds the header of the font, on a byte (**not** pixel) basis. The very first byte identifies the font header version; currently this must be ##0##. The second byte gives the ascii code of the first supported character in the font; the third byte gives the ascii code of the last supported character. So if the font supports the full range 0-255, ##0## and ##255## will be the contents of these two bytes.
	Next comes the width of each of the supported characters, each in a byte. Supposing the font holds 96 characters, ranging from 32 to 127 (inclusive), the header would have the first three bytes holding ##0##, ##32## and ##127##, followed by 96 bytes giving the widths of the corresponding chars.

	The font height is obtained by subtracting 1 from the buffer height, that is, while the first buffer line of pixels acts as a font header, the remaining lines define the glyphs' layout. The buffer must be as wide as necessary to hold all the supported character sprites in the same row, one after another.

{{fbdoc item="ex"}}
	This gives an example of basic ##**Draw String**## usage: it uses it to print ##"Hello world"## in the center of the screen:
{{fbdoc item="filename" value="examples/manual/gfx/drawstring.bas"}}%%(freebasic)
const w = 320, h = 200 '' screen dimensions

dim x as integer, y as integer, s as string

'' Open a graphics window
screenres w, h

'' Draw a string in the centre of the screen:

s = "Hello world"
x = (w - len(s) * 8) \ 2
y = (h - 1 * 8) \ 2

draw string (x, y), s

'' Wait for a keypress before ending the program
sleep
%%
{{image class="center" title="Draw String Example 1" url="/images/drawstr1.png"}}

	This example shows you how to create and use your own custom font.  For simplicity, it uses ##**Draw String**## with the default font to create the glyphs.
{{fbdoc item="filename" value="examples/manual/gfx/drawstring-custom.bas"}}%%(freebasic)
'' Define character range
const FIRSTCHAR = 32, LASTCHAR = 127

const NUMCHARS = (LASTCHAR - FIRSTCHAR) + 1
dim as ubyte ptr p, myFont
dim as integer i

'' Open a 256 color graphics screen (320*200)
screenres 320, 200, 8

'' Create custom font into PUT buffer

myFont = imagecreate(NUMCHARS * 8, 9)

 '' Put font header at start of pixel data

#ifndef ImageInfo '' older versions of FB don't have the ImageInfo feature
p = myFont + IIf(myFont[0] = 7, 32, 4)
#else
ImageInfo( myFont, , , , , p )
#endif

p[0] = 0
p[1] = FIRSTCHAR
p[2] = LASTCHAR

 '' PUT each character into the font and update width information
for i = FIRSTCHAR to LASTCHAR
	
	'' Here we could define a custom width for each letter, but for simplicity we use
	'' a fixed width of 8 since we are reusing the default font glyphs
	p[3 + i - FIRSTCHAR] = 8
	
	'' Create character onto custom font buffer by drawing using default font
	draw string myFont, ((i - FIRSTCHAR) * 8, 1), chr(i), 32 + (i mod 24) + 24
	
next i

'' Now the font buffer is ready; we could save it using BSAVE for later use
rem bsave "myfont.bmp", myFont

'' Here we draw a string using the custom font
draw string (10, 10), "ABCDEFGHIJKLMNOPQRSTUVWXYZ", , myFont
draw string (10, 26), "abcdefghijklmnopqrstuvwxyz", , myFont
draw string (66, 58), "Hello world!", , myFont

'' Free the font from memory, now we are done with it
imagedestroy myFont

sleep
%%
{{image class="center" title="Draw String Example 2" url="/images/drawstr2.png"}}

{{fbdoc item="diff"}}
	- New to ""FreeBASIC""

{{fbdoc item="see"}}
	- ##[[KeyPgPrint Print]]##
	- ##[[KeyPgDraw Draw]]##
	- ##[[KeyPgImagecreate ImageCreate]]##
	- ##[[KeyPgImageDestroy ImageDestroy]]##
	- ##[[KeyPgImageInfo ImageInfo]]##
	- ##[[KeyPgPutgraphics Put (Graphics)]]##
	- ##[[KeyPgWidth Width]]##

{{fbdoc item="back" value="CatPgGfx2D|2D Drawing Functions"}}