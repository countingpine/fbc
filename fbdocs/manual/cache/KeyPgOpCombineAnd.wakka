{{fbdoc item="title" value="Operator AND= (Conjunction and Assign)"}}----
Effectue une manipulation de bits AND (conjonction) et attribue le r&eacute;sultat &agrave; une variable

{{fbdoc item="syntax"}}##
	[[KeyPgDeclare declare]] [[KeyPgOperator operator]] **And=** ( [[KeyPgByref byref]] //lhs// [[KeyPgAs as]] //T1//, [[KeyPgByref byref]] //rhs// [[KeyPgAs as]] //T2// )
##
{{fbdoc item="usage"}}##
	//lhs// **And=** //rhs//
##
{{fbdoc item="param"}}
	##//lhs//##
		La variable &agrave; assigner.
	##//T1//##
		Tout type num&eacute;rique.
	##//rhs//##
		La valeur qui sert &agrave; effectuer le AND avec ##//lhs//##.
	##//T2//##
		Tout type num&eacute;rique.

{{fbdoc item="desc"}}
	Cet op&eacute;rateur effectue un AND et attribue le r&eacute;sultat &agrave; une variable. Il est fonctionnellement &eacute;quivalent &agrave;:
##
		//lhs// = //lhs// [[KeyPgOpAnd and]] //rhs//
##
	##**And=**## compare chaque bit de ses op&eacute;randes, ##//lhs//## et ##//rhs//##, et si les deux bits sont 1, alors le bit correspondant dans le premier op&eacute;rande, ##//lhs//##, est mis &agrave; 1, sinon il est mis &agrave; 0.

	##**And=**## ne peut pas &ecirc;tre utilis&eacute; dans des expressions conditionnelles.

	Cet op&eacute;rateur peut &ecirc;tre surcharg&eacute; pour des types d&eacute;finis par l'utilisateur.

{{fbdoc item="ex"}}
{{fbdoc item="filename" value="examples/manual/operator/and-assign.bas"}}%%(freebasic)
' Using the AND= operator on two numeric values
DIM AS UBYTE numeric_value1, numeric_value2
numeric_value1 = 15 '' 00001111
numeric_value2 = 30 '' 00011110

numeric_value1 AND= numeric_value2

'' Result =  14  =     00001110
PRINT numeric_value1
SLEEP
%%

{{fbdoc item="lang"}}
	- Dans le dialecte //[[CompilerOptlang -lang qb]]//, cet op&eacute;rateur ne peut pas &ecirc;tre surcharg&eacute;.

{{fbdoc item="diff"}}
	- Nouveau pour FreeBASIC

{{fbdoc item="see"}}
	- ##[[KeyPgOpAnd And]]##

{{fbdoc item="back" value="CatPgOpAssignment|Assignment Operators"}}{{fbdoc item="back" value="CatPgOperators|Operators"}}