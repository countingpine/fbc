{{fbdoc item="title" value="PRINT"}}----
Ecrire du texte à l'écran

{{fbdoc item="syntax"}}##
	**Print** [ //expressionlist// ] [ , | ; ]
##
{{fbdoc item="param"}}
	##//expressionlist//##
		liste des items à afficher

{{fbdoc item="desc"}}
	##**Print**## envoie une liste de valeurs à l'écran. Les valeurs numériques sont converties vers leur représentation chaîne, avec un remplissage à gauche pour le signe. Des objets de types définis par l'utilisateur doivent surcharger **Operator Cast () As String**.

	Les valeurs consécutives dans la liste d'expressions sont séparées par une virgule (##,##) ou point-virgule (##;##). Une virgule indique que l'affichage suivant devrait avoir lieu  14 colonnes plus loin, alors que point-virgule indique que toutes les valeurs sont affichées à la suite sans espace entre elles.  Cela a le même effet que la concaténation d'expressions en utilisant ##[[KeyPgOpConcat +]]## ou ##[[KeyPgOpConcatConvert &]]##.

	##**Print**## supporte aussi les expressions spéciales, ##[[KeyPgSpc Spc]]()## et ##[[KeyPgTab Tab]]()##.  Celles-ci peuvent être utilisées pour espacer les expressions ou pour aligner l'affichage sur une colonne spécifique.

	Un caractère "nouvelle ligne" est affiché après les valeurs de la liste des expressions à moins que la liste des expressions ne soit terminée par une virgule ou un point-virgule.  Un ##**Print**## sans aucune expression ou séparateur, affichera seulement un caractère "nouvelle ligne".

	    NOTE: ##**Print**## ré-initialise la valeur ##[[KeyPgErr Err]]## dès chaque expression est imprimée.
	    
	Pour plus de contrôle sur le style des caractères et la position du texte dans les modes graphiques, pensez à utiliser ##[[KeyPgDrawString Draw String]]##.

{{fbdoc item="ex"}}
{{fbdoc item="filename" value="examples/manual/console/print.bas"}}%%(freebasic)
'' print "Hello World!", and a new-line
Print "Hello World!"

'' print several strings on one line, then print a new-line
Print "Hello";
Print "World"; "!";
Print

'' column separator
Print "Hello!", "World!"
%%
{{fbdoc item="filename" value="examples/manual/console/print2.bas"}}%%(freebasic)
'' printing variables/expressions
Dim As Double pi = Atn(1) * 4
Dim As String s = "FreeBASIC"

Print "3 * 4 ="; 3 * 4

Print "Pi is approximately"; pi
Print s; " is great!"
%%

{{fbdoc item="lang"}}
	- Dans le dialecte //[[CompilerOptlang -lang qb]]//, un espace supplémentaire est affiché après les nombres.

{{fbdoc item="diff"}}
	- Aucune, si vous utilisez des types de variables QBASIC dans //[[CompilerOptlang -lang qb]]//.
	- Les nombres non-signés sont affichés sans espace devant eux.
	- QB ne supporte pas le "casting" pour les types définis par l'utilisateur (UDT = User-Defined Type), alors on ne peut utiliser ##**Print**## avec eux.

{{fbdoc item="see"}}
	- ##[[KeyPgSpc Spc]]##
	- ##[[KeyPgTab Tab]]##
	- ##[[KeyPgPrintPp Print #]]##
	- ##[[KeyPgPrintusing Print Using]]##
	- ##[[KeyPgWrite Write]]##
	- ##[[KeyPgDrawString Draw String]]##
	- ##[[KeyPgInput Input]]##

{{fbdoc item="back" value="CatPgConsole|Console Functions"}}

