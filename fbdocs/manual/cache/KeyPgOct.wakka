{{fbdoc item="title" value="OCT"}}----
Conversion d'un nombre dans sa représentation octale

{{fbdoc item="syntax"}}##
	[[KeyPgDeclare declare]] [[KeyPgFunction function]] **""Oct""**( [[KeyPgByval byval]] //number// [[KeyPgAs as]] [[KeyPgByte byte]] ) [[KeyPgAs as]] [[KeyPgString string]]
	[[KeyPgDeclare declare]] [[KeyPgFunction function]] **""Oct""**( [[KeyPgByval byval]] //number// [[KeyPgAs as]] [[KeyPgByte byte]], [[KeyPgByval byval]] //digits// [[KeyPgAs as]] [[KeyPgInteger integer]] ) [[KeyPgAs as]] [[KeyPgString string]]
	
	[[KeyPgDeclare declare]] [[KeyPgFunction function]] **""Oct""**( [[KeyPgByval byval]] //number// [[KeyPgAs as]] [[KeyPgShort short]] ) [[KeyPgAs as]] [[KeyPgString string]]
	[[KeyPgDeclare declare]] [[KeyPgFunction function]] **""Oct""**( [[KeyPgByval byval]] //number// [[KeyPgAs as]] [[KeyPgShort short]], [[KeyPgByval byval]] //digits// [[KeyPgAs as]] [[KeyPgInteger integer]] ) [[KeyPgAs as]] [[KeyPgString string]]

	[[KeyPgDeclare declare]] [[KeyPgFunction function]] **""Oct""**( [[KeyPgByval byval]] //number// [[KeyPgAs as]] [[KeyPgInteger integer]] ) [[KeyPgAs as]] [[KeyPgString string]]
	[[KeyPgDeclare declare]] [[KeyPgFunction function]] **""Oct""**( [[KeyPgByval byval]] //number// [[KeyPgAs as]] [[KeyPgInteger integer]], [[KeyPgByval byval]] //digits// [[KeyPgAs as]] [[KeyPgInteger integer]] ) [[KeyPgAs as]] [[KeyPgString string]]
	
	[[KeyPgDeclare declare]] [[KeyPgFunction function]] **""Oct""**( [[KeyPgByval byval]] //number// [[KeyPgAs as]] [[KeyPgLongint longint]] ) [[KeyPgAs as]] [[KeyPgString string]]
	[[KeyPgDeclare declare]] [[KeyPgFunction function]] **""Oct""**( [[KeyPgByval byval]] //number// [[KeyPgAs as]] [[KeyPgLongint longint]], [[KeyPgByval byval]] //digits// [[KeyPgAs as]] [[KeyPgInteger integer]] ) [[KeyPgAs as]] [[KeyPgString string]]
##
{{fbdoc item="usage"}}##
	//result// = **Oct**[$]( //number// [, //digits// ] )
##
{{fbdoc item="param"}}
	##//number//##
		Un nombre ou une expression numérique représentant un nombre.  Un nombre à virgule flottante sera converti en ##[[KeyPgLongint LongInt (entier long)]]##.
	##//digits//##
		Nombre de chiffres désirés pour la chaîne retournée.

{{fbdoc item="ret"}}
	Une chaîne contenant la représentation octale non-signée de ##//number//##.

{{fbdoc item="desc"}}
	Retourne la représentation octale non-signée de ##//number//##. Chiffres octals de 0 à 7.

	Si vous spécifiez ##//digits//## > 0, la chaîne résultat aura exactement cette longueur.  Elle sera tronquée ou complétée avec des zéros sur la gauche, si nécessaire.

	La longueur de la chaîne ne dépassera pas le nombre de bits maximum requis pour le type de ##//number//## (3 caractères pour ##[[KeyPgByte Byte (octet)]]##, 6 pour ##[[KeyPgShort Short (entier court)]]##, 11 pour ##[[KeyPgInteger Integer (entier)]]##, et 22 pour ##[[KeyPgLongint LongInt (entier long)]]##)

	Si vous désirez l'opposé, par exemple convertir une chaîne octale vers un nombre, la meilleure façon de le faire est d'ajouter ##"&O"##, au début de la chaîne, et la convertir en utilisant ##[[KeyPgValint Valint]]## ou ##[[KeyPgVallng Vallng]]##, de façon similaire à une chaîne numérique normale. Par exemple ##[[KeyPgValint Valint]]("&O77")##

{{fbdoc item="ex"}}
{{fbdoc item="filename" value="examples/manual/strings/oct.bas"}}%%(freebasic)
Print Oct(54321)
Print Oct(54321, 4)
Print Oct(54321, 8)
%%
	produira la sortie:

%%152061
2061
00152061
%%

{{fbdoc item="lang"}}
	- Le suffixe de type chaîne ##"$"## est obligatoire dans le dialecte //[[CompilerOptlang -lang qb]]//.
	- Le suffixe de type chaîne ##"$"## est facultatif dans les dialectes //[[CompilerOptlang -lang fblite]]// et //[[CompilerOptlang -lang fb]]//.

{{fbdoc item="diff"}}
	- Dans QBASIC, il n'y avait aucun moyen de spécifier le nombre de chiffres retournés.
	- La taille de la chaîne retournée était limitée à 32 bits, ou 11 chiffres octals.

{{fbdoc item="see"}}
	- ##[[KeyPgBin Bin]]##
	- ##[[KeyPgHex Hex]]##
	- ##[[KeyPgValint Valint]]##
	- ##[[KeyPgVallng Vallng]]##

{{fbdoc item="back" value="CatPgString|String Functions"}}

