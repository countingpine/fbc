{{fbdoc item="title" value="PCOPY"}}----
Copie une page texte ou graphique vers une autre page

{{fbdoc item="syntax"}}##
	[[KeyPgDeclare declare]] [[KeyPgSub sub]] **Pcopy** ( [[KeyPgByval byval]] //source// [[KeyPgAs as]] [[KeyPgInteger integer]] = -1, [[KeyPgByval byval]] //destination// [[KeyPgAs as]] [[KeyPgInteger integer]] = -1 )
##
{{fbdoc item="usage"}}##
	**Pcopy** [ //source// ] [, //destination// ]
##
{{fbdoc item="param"}}
	##//source//##
		page à copier
	##//destination//##
		page vers laquelle on copie

{{fbdoc item="desc"}}
	Copie une page texte ou graphique vers une autre page texte ou graphique. Utile pour copier tous les graphiques d'une page invisible vers la page visible active - création de graphiques et d'animations en douceur. Connu sous l'appellation 'double buffering' ou 'page flipping'.

	##//source//## et ##//destination//## font référence aux numéros de pages. La page 'source' est copiée sur la page 'destination' quand 'Pcopy' est appelé.

	Si l'argument ##//source//## est omis, la page de travail courante est utilisée.  Si la page ##//destination//## est omise, la page visible courante est utilisé.

{{fbdoc item="ex"}}
{{fbdoc item="filename" value="examples/manual/gfx/pcopy.bas"}}%%(freebasic)
screenres 320, 240, 32, 2    'Valide l' ecran a 320x240 en couleur 32-bit avec 2 pages video.
dim as integer max_x_value = 270, x_value = 50    'Dimensionne les variables de  travail.

do while x_value < max_x_value     'Boucle tant que x_value est inferieur a max
	screenset 2,1     'Valide la page travail a 2 et la page affichage a 1
	cls    'Efface ecran ainsi nous demarrons ecran propre
	circle (x_value,50),50,&h00FFFF00     'Dessine un cercle jaune avec un rayon de 50 pixels sur page 2
	screenset 1,1    'Page de travail a 1 et page affichage a 1
	screensync    'Attend rafraichissement vertical
	pcopy 2,1    'Copie cercle depuis page 2 vers page 1
	x_value += 1     'Incremente x_value ainsi il se deplacera.
	sleep 25     'Delai de 25 millisecondes.
loop     'Continue tant que x_value est inferieur a x_max_value

sleep   'Attend touche appuyee.
%%

{{fbdoc item="ex"}}
{{fbdoc item="filename" value="examples/manual/gfx/pcopy_cons.bas"}}%%(freebasic)
' Exemple mode Console:

'' Valide page travail a nombre 0, et page visible a nombre 1
#if __FB_LANG__ = "QB"
screen ,, 0, 1
#else
screen , 0, 1
#endif

dim as integer i, frames, fps
dim as double t

t = timer

do


	'' remplit page travail with avec certain couleur et caractere
	cls
	locate 1, 1
	color (i and 15), 0
	print string$(80 * 25, hex$(i, 1));
	i += 1


	'' montre images par seconde
	color 15, 0
	locate 1, 1
	print "fps: " & fps,
	if int(t) <> int(timer) then
		t = timer
		fps = frames
		frames = 0
	end if
	frames += 1


	'' copie page travail vers page visible
	pcopy


	'' arret 50ms par image liberer temps cpu
	sleep 50, 1


	'' boucle jusqu'a utilisateur appuie une touche
loop until len(inkey$)
%%

{{fbdoc item="target"}}
	- Le nombre maximum de pages texte est de 4 dans Windows.
	- Le nombre maximum de pages texte est de 8 dans DOS.
	- Le nombre maximum de pages texte est de 1 dans toutes les autres.
	- Le nombre maximum de pages graphiques dépend de ce qui a été spécifié avec ##[[KeyPgScreengraphics Screen]]## ou ##[[KeyPgScreenres Screenres]]##.

{{fbdoc item="diff"}}
	- Aucune

{{fbdoc item="see"}}
	- ##[[KeyPgScreencopy Screencopy]]##
	- ##[[KeyPgFlip Flip]]##
	- ##[[KeyPgScreengraphics Screen]]##


{{fbdoc item="back" value="CatPgGfxScreen|Screen Functions"}}

