{{fbdoc item="title" value="Passing Arguments to Procedures"}}----
Transmettre des informations à des procédures.

{{fbdoc item="section" value="Déclarer des paramètres"}}
	On peut passer des informations sous forme de variables et d'objets, aux procédures lorsqu'elles sont appelées. Dans le cadre d'un appel de procédure, ces variables et d'objets sont appelées arguments. Ces arguments sont alors représentés en tant que paramètres à l'intérieur du corps de procédure. Les paramètres peuvent être utilisée comme n'importe quelle autre variable ou objet.

	Pour spécifier qu'une procédure devrait passer des arguments lorsqu'on l'appelle, il faut déclarer la procédure avec une liste de paramètres. Une liste de paramètres est une liste d'un ou plusieurs noms et types que la procédure utilisera lorsqu'elle se réfèrera aux arguments qui lui sont passés. Les listes de paramètres sont entourées de parenthèses.

{{fbdoc item="filename" value="examples/manual/proguide/procs/passargs.bas"}}%%(freebasic)
sub Procedure (s as string, n as integer)
	print "The parameters have the values: " & s & " and " & n
end sub

Procedure "abc", 123
%%
	produira le résultat suivant:

%%
The parameters have the values: abc and 123
%%
	Il y a deux façons de passer des arguments aux procédures: par valeur et par référence. Par défaut, les arguments sont passés par valeur, sauf indication contraire.

{{fbdoc item="section" value="Passage d'arguments par valeur"}}
	Les arguments qui sont passés par valeur ne sont pas réellement passés aux procédures; au lieu de cela une copie de l'argument est faite et passée. Cela permet à la procédure de modifier la copie et la variable ou l'objet d'origine restent inchangés.

	Lors du passage d'objets aux procédures par valeur, la copie est faite en appelant le constructeur de copie du ##[[KeyPgType Type]]## ou de la ##[[KeyPgClass Class]]##.

	Pour spécifier qu'un argument doit être passé par valeur, faire précéder le nom du paramètre de la déclaration de procédure du mot-clé ##[[KeyPgByval Byval]]##:

{{fbdoc item="filename" value="examples/manual/proguide/procs/passbyval.bas"}}%%(freebasic)
sub Procedure (byval param as integer)
	param *= 2
	print "The parameter 'param' = " & param
end sub

dim arg as integer = 10
print "The variable 'arg' before the call = " & arg
Procedure(arg)
print "The variable 'arg' after the call = " & arg
%%
	produira le résultat suivant:

%%
The variable 'arg' before the call = 10
The parameter 'param' = 20
The variable 'arg' after the call = 10
%%
	Remarquez comment les parenthèses entourent les arguments - dans ce cas, un seul, ##//arg//## - dans l'appel de procédure. Ces parenthèses sont facultatives, mais sont une convention commune pour signifier un appel de procédure.

{{fbdoc item="section" value="Passage d'arguments par référence"}}
	Contrairement aux arguments qui sont passés par valeur, les arguments qui sont passés aux procédures par référence sont vraiment passés; aucune copie n'est faite. Cela permet à la procédure de modifier la variable ou objet d'origine qui lui a été passé.

	Une référence est comme un alias pour une variable ou un objet. Chaque fois que vous faites appel à une référence, vous faites allusion à la variable ou à l'objet réel(le) dont elle est l'alias. En d'autres termes, vous pouvez imaginer une référence à un paramètre d'une procédure comme étant l'argument qui lui est passé; les modifications apportées à la référence du paramètre sont en fait des changements à l'argument qu'il représente.

	Pour spécifier qu'un argument doit être passé par référence, faire précéder le nom du paramètre dans la déclaration de procédure avec le mot-clé ##[[KeyPgByref Byref]]##:

{{fbdoc item="filename" value="examples/manual/proguide/procs/passbyref.bas"}}%%(freebasic)
sub Procedure (byref param as integer)
	param *= 2
	print "The parameter 'param' = " & param
end sub

dim arg as integer = 10
print "The variable 'arg' before the call = " & arg
Procedure(arg)
print "The variable 'arg' after the call = " & arg
%%
	produira le résultat suivant::

%%
The variable 'arg' before the call = 10
The parameter 'param' = 20
The variable 'arg' after the call = 20
%%

{{fbdoc item="see"}}
	- [[ProPgProcedures Vue d'ensemble des procédures]]
	- [[ProPgReturnValue Retourner une valeur]]
	- ##[[KeyPgDeclare Declare]]##
	- ##[[KeyPgSub Sub]]##
	- ##[[KeyPgFunction Function]]##
	- ##[[KeyPgByval Byval]]##
	- ##[[KeyPgByref Byref]]##

{{fbdoc item="back" value="CatPgProgrammer|Programmer's Guide"}}