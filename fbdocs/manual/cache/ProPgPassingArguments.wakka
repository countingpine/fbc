{{fbdoc item="title" value="Passing Arguments to Procedures"}}----
Transmettre des informations &agrave; des proc&eacute;dures.

{{fbdoc item="section" value="D&eacute;clarer des param&egrave;tres
	On peut passer des informations sous forme de variables et d'objets, aux proc&eacute;dures lorsqu'elles sont appel&eacute;es. Dans le cadre d'un appel de proc&eacute;dure, ces variables et d'objets sont appel&eacute;es arguments. Ces arguments sont alors repr&eacute;sent&eacute;s en tant que param&egrave;tres &agrave; l'int&eacute;rieur du corps de proc&eacute;dure. Les param&egrave;tres peuvent &ecirc;tre utilis&eacute;e comme n'importe quelle autre variable ou objet.

	Pour sp&eacute;cifier qu'une proc&eacute;dure devrait passer des arguments lorsqu'on l'appelle, il faut d&eacute;clarer la proc&eacute;dure avec une liste de param&egrave;tres. Une liste de param&egrave;tres est une liste d'un ou plusieurs noms et types que la proc&eacute;dure utilisera lorsqu'elle se r&eacute;f&egrave;rera aux arguments qui lui sont pass&eacute;s. Les listes de param&egrave;tres sont entour&eacute;es de parenth&egrave;ses.

{{fbdoc item="filename" value="examples/manual/proguide/procs/passargs.bas"}}%%(freebasic)
sub Procedure (s as string, n as integer)
	print "The parameters have the values: " & s & " and " & n
end sub

Procedure "abc", 123
%%
	produira le r&eacute;sultat suivant:

%%The parameters have the values: abc and 123%%Il y a deux fa&ccedil;ons de passer des arguments aux proc&eacute;dures: par valeur et par r&eacute;f&eacute;rence. Par d&eacute;faut, les arguments sont pass&eacute;s par valeur, sauf indication contraire.
{{fbdoc item="section" value="Passage d'arguments par valeur
Les arguments qui sont pass&eacute;s par valeur ne sont pas r&eacute;ellement pass&eacute;s aux proc&eacute;dures; au lieu de cela une copie de l'argument est faite et pass&eacute;e. Cela permet &agrave; la proc&eacute;dure de modifier la copie et la variable ou l'objet d'origine restent inchang&eacute;s.
	Lors du passage d'objets aux proc&eacute;dures par valeur, la copie est faite en appelant le constructeur de copie du ##[[KeyPgType Type]]## ou de la ##[[KeyPgClass Class]]##.

Pour sp&eacute;cifier qu'un argument doit &ecirc;tre pass&eacute; par valeur, faire pr&eacute;c&eacute;der le nom du param&egrave;tre de la d&eacute;claration de proc&eacute;dure du mot-cl&eacute; ##[[KeyPgByval ByVal]]##:
	%%(freebasic)

	Sub Procedure (ByVal param As Integer)

	param *= 2

Print "The parameter 'param' = " & param
End Sub
	Dim arg As Integer = 10
	Print "The variable 'arg' before the call = " & arg
Procedure(arg)

Print "The variable 'arg' after the call = " & arg
%%
produira le r&eacute;sultat suivant:
%%
The variable 'arg' before the call = 10
	The parameter 'param' = 20

The variable 'arg' after the call = 10
%%Remarquez comment les parenth&egrave;ses entourent les arguments - dans ce cas, un seul, ##//arg//## - dans l'appel de proc&eacute;dure. Ces parenth&egrave;ses sont facultatives, mais sont une convention commune pour signifier un appel de proc&eacute;dure.
{{fbdoc item="section" value="Passage d'arguments par r&eacute;f&eacute;rence
Contrairement aux arguments qui sont pass&eacute;s par valeur, les arguments qui sont pass&eacute;s aux proc&eacute;dures par r&eacute;f&eacute;rence sont vraiment pass&eacute;s; aucune copie n'est faite. Cela permet &agrave; la proc&eacute;dure de modifier la variable ou objet d'origine qui lui a &eacute;t&eacute; pass&eacute;.
Une r&eacute;f&eacute;rence est comme un alias pour une variable ou un objet. Chaque fois que vous faites appel &agrave; une r&eacute;f&eacute;rence, vous faites allusion &agrave; la variable ou &agrave; l'objet r&eacute;el(le) dont elle est l'alias. En d'autres termes, vous pouvez imaginer une r&eacute;f&eacute;rence &agrave; un param&egrave;tre d'une proc&eacute;dure comme &eacute;tant l'argument qui lui est pass&eacute;; les modifications apport&eacute;es &agrave; la r&eacute;f&eacute;rence du param&egrave;tre sont en fait des changements &agrave; l'argument qu'il repr&eacute;sente.
	Pour sp&eacute;cifier qu'un argument doit &ecirc;tre pass&eacute; par r&eacute;f&eacute;rence, faire pr&eacute;c&eacute;der le nom du param&egrave;tre dans la d&eacute;claration de proc&eacute;dure avec le mot-cl&eacute; ##[[KeyPgByref ByRef]]##:

{{fbdoc item="section" value="Passing arguments by reference"}}
	Sub Procedure (ByRef param As Integer)

	param *= 2

	Print "The parameter 'param' = " & param

End Sub
Dim arg As Integer = 10
	Print "The variable 'arg' before the call = " & arg
	Procedure(arg)
Print "The variable 'arg' after the call = " & arg

%%
produira le r&eacute;sultat suivant::
%%
The variable 'arg' before the call = 10
The parameter 'param' = 20
	The variable 'arg' after the call = 20

%%
{{fbdoc item="see"}}
- [[ProPgProcedures Vue d'ensemble des proc&eacute;dures]]
- [[ProPgReturnValue Retourner une valeur]]
- ##[[KeyPgDeclare Declare]]##

- ##[[KeyPgSub Sub]]##
	- ##[[KeyPgFunction Function]]##
	- ##[[KeyPgByval ByVal]]##
	- ##[[KeyPgByref ByRef]]##
	- ##[[KeyPgSub Sub]]##
	- ##[[KeyPgFunction Function]]##
	- ##[[KeyPgByval Byval]]##
	- ##[[KeyPgByref Byref]]##

{{fbdoc item="back" value="CatPgProgrammer|Programmer's Guide"}}