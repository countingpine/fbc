{{fbdoc item="title" value="Operator @ (Address of)"}}----
Retourne l'addresse d'une cha&icirc;ne de caract&egrave;res, d'une variable, d'un objet ou d'une proc&eacute;dure

{{fbdoc item="syntax"}}##
	[[KeyPgDeclare declare]] [[KeyPgOperator operator]] **@** ( [[KeyPgByref byref]] //rhs// [[KeyPgAs as]] //T// ) [[KeyPgAs as]] //T// [[KeyPgPointer pointer]]
##
{{fbdoc item="usage"}}##
	//result// = **@** //rhs//
##
{{fbdoc item="param"}}
	##//rhs//##
		La cha&icirc;ne de caract&egrave;res, variable, objet ou proc&eacute;dure dont on veut r&eacute;cup&eacute;rer l'adresse.
	##//T//##
		N'importe quel type [[CatPgStdDataTypes standard]], [[CatPgUserDefTypes d&eacute;fini par l'utilisateur]] ou proc&eacute;dure.

{{fbdoc item="section" value="Valeur retourn&eacute;e
	Retourne l'adresse de l'op&eacute;rande c&ocirc;t&eacute; droit (##//rhs//##).

{{fbdoc item="desc"}}
	**##L'op&eacute;rateur @## (Adresse de)** retourne l'adresse m&eacute;moire de son op&eacute;rande.

	Quand l'op&eacute;rande est de type ##[[KeyPgString String (Cha&icirc;ne)]]##, est retourn&eacute;e l'adresse du descripteur interne de la cha&icirc;ne. Utilisez l'##[[KeyPgOpStrptr Op&eacute;rateur Strptr]]## (Pointeur de cha&icirc;ne) pour r&eacute;cup&eacute;rer l'adresse de la cha&icirc;ne.

	L'op&eacute;rande ne peut &ecirc;tre un tableau, mais peut &ecirc;tre un &eacute;l&eacute;ment d'un tableau. Par exemple, ##"@myarray(0)"## retourne l'adresse de ##"myarray(0)"##.

	Cet op&eacute;rateur peut &ecirc;tre surcharg&eacute; pour des types d&eacute;finis par l'utilisateur.

{{fbdoc item="ex"}}
{{fbdoc item="filename" value="examples/manual/operator/address-var.bas"}}%%(freebasic)
'This program demonstrates the use of the @ operator.

Dim a As Integer
Dim b As Integer

Dim addr As Integer Ptr

a = 5   'Here we place the values 5 and 10 into a and b, respectively.
b = 10

'Here, we print the value of the variables, then where in memory they are stored.
Print "The value in A is ";a;" but the pointer to a is ";@a
Print "The value in B is ";b;" but the pointer to b is ";@b

'Now, we will take the integer ptr above, and use @ to place a value into it.
'Note that the * will check the value in the ptr, just as @ checked the ptr 
'for a normal variable.

addr = @a

Print "The pointer addr is now pointing at the memory address to a, value: ";*addr

addr = @b

Print "The pointer addr is now pointing at the memory address to b, value: ";*addr
%%

{{fbdoc item="filename" value="examples/manual/operator/address-func.bas"}}%%(freebasic)
'This program demonstrates how the @ symbol can be used
'to create pointers to subroutines.

Declare Sub mySubroutine ()

Dim say_Hello As Sub() 

say_Hello = @mySubroutine   'We tell say_Hello to point to mySubroutine.
	                        'The sub() datatype acts as a pointer here.

say_Hello() 'Now we can run say_Hello just like mySubroutine.

Sub mySubroutine
	Print "hi"
End Sub
%%

{{fbdoc item="lang"}}
	- Dans le dialecte //[[CompilerOptlang -lang qb]]//, cet op&eacute;rateur ne peut pas &ecirc;tre surcharg&eacute;.

{{fbdoc item="diff"}}
	- Nouveau pour FreeBASIC

{{fbdoc item="see"}}
	- ##[[KeyPgOpValueOf Op&eacute;rateur * (Valeur de)]]##
	- [[ProPgPointers Pointeurs]]

{{fbdoc item="back" value="CatPgOpPoint|Pointer Operators"}}{{fbdoc item="back" value="CatPgOperators|Operators"}}