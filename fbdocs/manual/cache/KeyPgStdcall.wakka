{{fbdoc item="title" value="STDCALL"}}----
Spécifie une convention d'appel de style-//stdcall// dans une déclaration de procédure

{{fbdoc item="syntax"}}##
	[[KeyPgDeclare Declare]] [[[KeyPgStatic Static]]] [[KeyPgSub Sub]] //procedure_name// [[[KeyPgOverload Overload]]] **Stdcall** [[[KeyPgAlias Alias]] //"""external_name"""//] [([//parameter_list//])] [[[KeyPgModuleConstructor Constructor]] [//priority//]] [[[KeyPgStatic Static]]] [[[KeyPgExport Export]]]

	[[KeyPgDeclare Declare]] [[[KeyPgStatic Static]]] [[KeyPgFunction Function]] //procedure_name// [[[KeyPgOverload Overload]]] **Stdcall** [[[KeyPgAlias Alias]] //"""external_name"""//] [([//parameter_list//])] [[KeyPgAs as]] //return_type// [[[KeyPgStatic Static]]] [[[KeyPgExport Export]]]

	[[[KeyPgPublic Public]]|[[KeyPgPrivate Private]]] [[KeyPgSub Sub]] //procedure_name// [[[KeyPgOverload Overload]]] **Stdcall** [[[KeyPgAlias Alias]] //"""external_name"""//] [([//parameter_list//])] [[[KeyPgModuleConstructor Constructor]] [//priority//]] [[[KeyPgStatic Static]]] [[[KeyPgExport Export]]]
		//..procedure body..//
	[[KeyPgEnd End]] [[KeyPgSub Sub]]
	
	[[[KeyPgPublic Public]]|[[KeyPgPrivate Private]]] [[KeyPgFunction Function]] //procedure_name// [[[KeyPgOverload Overload]]] **Stdcall** [[[KeyPgAlias Alias]] //"""external_name"""//] [([//parameter_list//])] [[KeyPgAs as]] //return_type//  [[[KeyPgStatic Static]]] [[[KeyPgExport Export]]]
		//..procedure body..//
	[[KeyPgEnd End]] [[KeyPgFunction Function]]
##
{{fbdoc item="desc"}}
	Dans une déclaration de procédure, ##**stdcall**## précise que la procédure va utiliser la convention d'appel //stdcall//. Dans la convention d'appel //stdcall//, tous les paramètres doivent être passés (push = pousser sur la pile) dans l'ordre inverse de celui où ils ont été listés, c'est à dire, de la droite vers la gauche. Les procédures n'ont pas besoin de préserver les registres ##EAX##, ##ECX## ou ##EDX## et doivent nettoyer la pile (pop = sortir tous les paramètres) avant le retour.
	
	##**stdcall**## n'est pas autorisé à être utilisé avec les déclarations de procédures "à variations" (variadic) (celles qui ont le dernier paramètre répertorié par "##[[KeyPgDots ...]]##").

	//stdcall// est la convention d'appel par défaut sous Windows, è moins qu'une autre convention d'appel ne soit explicitement spécifiée ou implicitement par [[KeyPgExternBlock EXTERN blocks]]. //stdcall// est aussi la convention standard (ou la plus commune) utilisée par les langages BASIC et de l'API Windows.

{{fbdoc item="ex"}}
{{fbdoc item="filename" value="examples/manual/procs/stdcall.bas"}}%%(freebasic)
Declare Function Exemple stdcall (param1 As Integer, param2 As Integer) As Integer
Declare Function Exemple2 cdecl (param1 As Integer, param2 As Integer) As Integer

Function Exemple stdcall (param1 As Integer, param2 As Integer) As Integer
	' This is an STDCALL function, the first parameter on the stack is param2, since it was pushed last.
	Print param1, param2
	Return param1 Mod param2
End Function

Function Exemple2 cdecl (param1 As Integer, param2 As Integer) As Integer
	' This is a CDECL function, the first parameter on the stack is param1, since it was pushed last.
	Print param1, param2
	Return param1 Mod param2
End Function
%%

{{fbdoc item="target"}}
	- Sur les systèmes Windows, les procédures //stdcall// ont un "@ N" décoration ajouté à leur nom interne / externe, où N est la taille de la liste des paramètres, en octets.

{{fbdoc item="diff"}}
	- Nouveau pour ""FreeBASIC""

{{fbdoc item="see"}}
	- [[KeyPgPascal Pascal]], [[KeyPgCdecl Cdecl]]
	- [[KeyPgDeclare Declare]]
	- [[KeyPgSub Sub]], [[KeyPgFunction Function]]

{{fbdoc item="back" value="CatPgProcedures|Procedures"}}