{{fbdoc item="title" value="STDCALL"}}----
Sp&eacute;cifie une convention d'appel de style-//stdcall// dans une d&eacute;claration de proc&eacute;dure

{{fbdoc item="syntax"}}##
	[[KeyPgDeclare Declare]] [[[KeyPgStatic Static]]] [[KeyPgSub Sub]] //procedure_name// [[[KeyPgOverload Overload]]] **stdcall** [[[KeyPgAlias Alias]] //"external_name"//] [([//parameter_list//])] [[[KeyPgModuleConstructor Constructor]] [//priority//]] [[[KeyPgStatic Static]]] [[[KeyPgExport Export]]]

	[[KeyPgDeclare Declare]] [[[KeyPgStatic Static]]] [[KeyPgFunction Function]] //procedure_name// [[[KeyPgOverload Overload]]] **stdcall** [[[KeyPgAlias Alias]] //"external_name"//] [([//parameter_list//])] [[KeyPgAs As]] //return_type// [[[KeyPgStatic Static]]] [[[KeyPgExport Export]]]

	[[[KeyPgPublic Public]]|[[KeyPgPrivate Private]]] [[KeyPgSub Sub]] //procedure_name// [[[KeyPgOverload Overload]]] **stdcall** [[[KeyPgAlias Alias]] //"external_name"//] [([//parameter_list//])] [[[KeyPgModuleConstructor Constructor]] [//priority//]] [[[KeyPgStatic Static]]] [[[KeyPgExport Export]]]
		//..procedure body..//
	[[KeyPgEnd End]] [[KeyPgSub Sub]]
	
	[[[KeyPgPublic Public]]|[[KeyPgPrivate Private]]] [[KeyPgFunction Function]] //procedure_name// [[[KeyPgOverload Overload]]] **stdcall** [[[KeyPgAlias Alias]] //"external_name"//] [([//parameter_list//])] [[KeyPgAs As]] //return_type//  [[[KeyPgStatic Static]]] [[[KeyPgExport Export]]]
		//..procedure body..//
	[[KeyPgEnd End]] [[KeyPgFunction Function]]
##
{{fbdoc item="desc"}}
	Dans une d&eacute;claration de proc&eacute;dure, ##**stdcall**## pr&eacute;cise que la proc&eacute;dure va utiliser la convention d'appel //stdcall//. Dans la convention d'appel //stdcall//, tous les param&egrave;tres doivent &ecirc;tre pass&eacute;s (push = pousser sur la pile) dans l'ordre inverse de celui o&ugrave; ils ont &eacute;t&eacute; list&eacute;s, c'est &agrave; dire, de la droite vers la gauche. Les proc&eacute;dures n'ont pas besoin de pr&eacute;server les registres ##EAX##, ##ECX## ou ##EDX## et doivent nettoyer la pile (pop = sortir tous les param&egrave;tres) avant le retour.
	
	##**stdcall**## n'est pas autoris&eacute; &agrave; &ecirc;tre utilis&eacute; avec les d&eacute;clarations de proc&eacute;dures "&agrave; variations" (variadic) (celles qui ont le dernier param&egrave;tre r&eacute;pertori&eacute; par "##[[KeyPgDots ...]]##").

	//stdcall// est la convention d'appel par d&eacute;faut sous Windows, &egrave; moins qu'une autre convention d'appel ne soit explicitement sp&eacute;cifi&eacute;e ou implicitement par [[KeyPgExternBlock Extern Blocks]]. //stdcall// est aussi la convention standard (ou la plus commune) utilis&eacute;e par les langages BASIC et de l'API Windows.

{{fbdoc item="ex"}}
{{fbdoc item="filename" value="examples/manual/procs/stdcall.bas"}}%%(freebasic)
Declare Function Example stdcall (param1 As Integer, param2 As Integer) As Integer
Declare Function Example2 cdecl (param1 As Integer, param2 As Integer) As Integer

Function Exemple stdcall (param1 As Integer, param2 As Integer) As Integer
	' This is an STDCALL function, the first parameter on the stack is param2, since it was pushed last.
	Print param1, param2
	Return param1 Mod param2
End Function

Function Exemple2 cdecl (param1 As Integer, param2 As Integer) As Integer
	' This is a CDECL function, the first parameter on the stack is param1, since it was pushed last.
	Print param1, param2
	Return param1 Mod param2
End Function
%%

{{fbdoc item="target"}}
	- Sur les syst&egrave;mes Windows, les proc&eacute;dures //stdcall// ont un "@ N" d&eacute;coration ajout&eacute; &agrave; leur nom interne / externe, o&ugrave; N est la taille de la liste des param&egrave;tres, en octets.

{{fbdoc item="diff"}}
	- Nouveau pour FreeBASIC

{{fbdoc item="see"}}
	- [[KeyPgPascal Pascal]], [[KeyPgCdecl Cdecl]]
	- [[KeyPgDeclare Declare]]
	- [[KeyPgSub Sub]], [[KeyPgFunction Function]]

{{fbdoc item="back" value="CatPgProcedures|Procedures"}}