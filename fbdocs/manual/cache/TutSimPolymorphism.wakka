{{fbdoc item="title" value="Simulating Polymorphism"}}----
//Ecrit par [[WikiRick rdc]]//

=== Introduction===

Le polymorphisme est un outil puissant dans les programmes orientés-objet. Une méthode polymorphe (Sub ou Function) se comporte différemment selon la définition de l'objet. Par exemple, un objet "animal" peut avoir une méthode "parler" qui émettra un aboiement pour un chien et un miaulement d'un chat. FreeBASIC ne supporte pas encore le vrai polymorphisme, il sera ajouté lorsque les classes seront implémentées. Cependant, vous pouvez simuler les méthodes polymorphes en utilisant les méthodes pointeurs. 

=== Polymorphisme===

Les méthodes polymorphes sont des "Sub" ou des "Function" qui ont le type et la même liste des paramètres, mais qui se comportent différemment lorsqu'elles sont liées à des objets différents. Un objet "animal" peut avoir une méthode "parler" qui émettra un aboiement pour un chien et un miaulement d'un chat.Comme FreeBASIC ne connaît pas encore les classes, vous ne pouvez implémenter de vraies méthodes polymorphes,  you cannot implement true polymorphic methods, mais vous pouvez simuler leur comportement en utilisant des méthodes pointeurs.

Le listing suivant montre un couple de "#define" et une déclaration de type étendu:
%%(freebasic)
#define isdog 1
#define iscat 2

Type animal
	Public:
	speak As Sub()
	Declare Constructor (anid As Integer)    
End Type
%%
Les "#define" sont passés au constructeur (Constructor) pour lui signaler quel type d'objet sera créé. La définition "speak As Sub()" définit la méthode pointeur. Comme vousle voyez, l'adresse de deux sous-programmes différents sera passée à la méthode pointeur "speak". Le listing suivant montre les sous-programmes speak différents et la méthode Constructor:
%%(freebasic)
'Speak method for dog object
Sub Bark()
	Print "Woof!"
End Sub

'Speak method for cat object
Sub Meow()
	Print "Meow!"
End Sub

'Set the proper method pointer based on animal id
Constructor animal(anid As Integer)
	If anid = isdog Then
	    this.speak = @Bark
	Elseif anid = iscat Then
	    this.speak = @Meow
	End If
End Constructor
%%
Le sous-programmes "Bark" sera appelé si l'objet est un chien et "Meow" si c'est un chat. Vous vous demandez pourquoi on n'a pas surchargé la méthode? Pour surcharger une méthode, le type et la liste de paramètres doivent être uniques, où dans une méthode polymorphe, le type et le paramètre doivent être le même. Comme "Bark" et "Meow" ont la même liste de paramètres, c'est à dire aucun paramètre, vous ne pouvez pas surcharger cette méthode.

C'est dans le code du Constructor que se décide quelle méthode à appeler pour l'utiliser. Si "anid" est égal à "isdog", alors la méthode pointeur "Speak" sera fixée sur l'adresse du sous-programme "Bark". Si "anid" est égal à "iscat",  alors la méthode pointeur "Speak" sera fixée sur l'adresse du sous-programme "Meow". L'opérateur @ (adresse de) est utilisé pour passer l'adresse de "Bark" et "Meow" au pointeur "Speak". 

La référence objet //this// est un paramètre caché qui est passé au constructeur et qui fait référence au type, qui dans ce cas est "animal". Vous pouvez l'utiliser pour référencer les variables internes au sein du type.

La seule chose qui reste à faire est de créer et d'initialiser l'objet:
%%(freebasic)
'Create a dog and cat object
Dim myDog As animal = isdog
Dim mycat As animal = iscat
%%
Ici "myDog" et "myCat" sont créés avec les indicateurs appropriés passés au constructeur ainsi les références appropriées peuvent être mises en place. Dès que les objets sont créés vous pouvez appeler la méthode "speak" de chaque objet.
%%(freebasic)
'Have the animals speak
Print "My dog says ";
myDog.speak()
Print "My cat says ";
myCat.speak()
%%
Notez que vous appelez la même méthode "speak", cependant les réponses sont différentes:
%%(freebasic)
My dog says Woof!
My cat says Meow!
%%
C'est l'essence même des méthodes polymorphes. 

Voici le listing du programme complet:
%%(freebasic)
'Simulated Polymorphism Using Method Pointers
'Richard D. Clark
'Requires the CVS version of FreeBasic
'**********************************************

#define isdog 1
#define iscat 2


Type animal
	Public:
	speak As Sub()
	Declare Constructor (anid As Integer)    
End Type

'Speak method for dog object
Sub Bark()
	Print "Woof!"
End Sub

'Speak mehod for cat object
Sub Meow()
	Print "Meow!"
End Sub

'Set the proper method pointer based on animal id
Constructor animal(anid As Integer)
	If anid = isdog Then
	    this.speak = @Bark
	Elseif anid = iscat Then
	    this.speak = @Meow
	End If
End Constructor

'Create a dog and cat object
Dim myDog As animal = isdog
Dim mycat As animal = iscat

'Have the animals speak
Print "My dog says ";
myDog.speak()
Print "My cat says ";
myCat.speak()

Sleep
End
%%
