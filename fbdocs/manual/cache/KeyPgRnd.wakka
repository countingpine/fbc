{{fbdoc item="title" value="RND"}}----
Renvoie un nombre aléatoire en [[KeyPgDouble double]] précision dans l'intervalle ##[0, 1)##

{{fbdoc item="syntax"}}##
	[[KeyPgDeclare declare]] [[KeyPgFunction function]] **Rnd** ( [[KeyPgByval byval]] //seed// [[KeyPgAs as]] [[KeyPgSingle single]] = 1.0 ) [[KeyPgAs as]] [[KeyPgDouble double]]
##
{{fbdoc item="usage"}}##
	//result// = **Rnd**( //seed// )
##
{{fbdoc item="param"}}
	##//seed//##
		Argument ##[[KeyPgSingle single]]## facultatif. Si ##//seed//## a une valeur de zéro, le dernier nombre aléatoire généré est répété, pour tout autre nombre, un nouveau nombre aléatoire est renvoyé. Avec l'algorithme QB-compatible, un nombre négatif regénère entièrement le générateur.  S'il n'y a aucun argument, par défaut un nouveau nombre aléatoire est retourné.

{{fbdoc item="ret"}}
	Retourne le nombre aléatoire généré.

{{fbdoc item="desc"}}
	Renvoie un nombre de type ##[[KeyPgDouble double]]## dans l'intervalle ##[0, 1)## (c'est à dire ##0 <= **Rnd** < 1##), basé sur une graine aléatoire (voir ##[[KeyPgRandomize Randomize]]##).

	##**Rnd**## peut utiliser une variété d'algorithmes différents - voir ##[[KeyPgRandomize Randomize]]## pour les détails de l'algorithme par défaut et des algorithmes sélectionnables.

	##**Rnd**## retournera la même séquence de nombres chaque fois que le programme est exécuté.  Cette séquence peut être modifiée en régnérant le générateur.

{{fbdoc item="ex"}}
{{fbdoc item="filename" value="examples/manual/math/rnd.bas"}}%%(freebasic)
'' Function to a random number in the range [first, last), or {first <= x < last}.
function rnd_range (first as double, last as double) as double
	function = rnd * (last - first) + first
end function

'' seed the random number generator, so the sequence is not the same each time
randomize

'' prints a random number in the range [0, 1), or {0 <= x < 1}.
print rnd

'' prints a random number in the range [0, 10), or  {0 <= x < 10}.
print rnd * 10

'' prints a random integral number in the range [1, 11), or  {1 <= x < 11}.
'' with integers, this is equivalent to [1, 10], or {1 <= n <= 10}.
print int(rnd * 10) + 1

'' prints a random integral number in the range [69, 421), or {69 <= x < 421}.
'' this is equivalent to [69, 420], or {69 <= n <= 420}.
print int(rnd_range(69, 421))
%%

{{fbdoc item="lang"}}
	L'algorithme utilisé par défaut dépend du dialecte en usage:
		- Avec le dialecte //[[CompilerOptlang -lang fb]]//, une fonction "Mersenne Twister" 32 bits avec une granularité de 32 bits est utilisée.
		- Avec le dialecte //[[CompilerOptlang -lang qb]]//, une fonction donnant le même résultat que ##**Rnd**## dans QB est utilisée. La granularité est de 24 bits.
		- Avec les dialectes //[[CompilerOptlang -lang deprecated]]// et //[[CompilerOptlang -lang fblite]]//, la fonction C disponible dans le système est utilisée. La fonction a une granularité de 15 bits dans Win32 et 32 bits sous Linux et DOS.
{{fbdoc item="diff"}}
	Aucune, si compilé avec le dialecte //[[CompilerOptlang -lang qb]]//.  Les autres dialectes peuvent également utiliser la même génération et algorithmes de génération en appelant ##[[KeyPgRandomize Randomize]]## avec le paramètre approprié.
	- Pour les algorithmes non-QB-compatibles, si l'argument optionnel est inférieur à 0, il est équivalent à passer 1 en argument.
{{fbdoc item="see"}}
	- ##[[KeyPgRandomize Randomize]]##
	- ##[[KeyPgTimer Timer]]##
	- ##[[KeyPgInt Int]]##

{{fbdoc item="back" value="CatPgMath|Math"}}

