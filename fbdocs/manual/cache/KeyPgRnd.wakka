{{fbdoc item="title" value="RND"}}----
Renvoie un nombre al&eacute;atoire en [[KeyPgDouble Double]]  pr&eacute;cision dans l'intervalle ##[0, 1]##

{{fbdoc item="syntax"}}##
	[[KeyPgDeclare declare]] [[KeyPgFunction function]] **Rnd** ( [[KeyPgByval byval]] //seed// [[KeyPgAs as]] [[KeyPgSingle single]] = 1.0 ) [[KeyPgAs as]] [[KeyPgDouble double]]
##
{{fbdoc item="usage"}}##
	//result// = **Rnd**( //seed// )
##
{{fbdoc item="param"}}
	##//seed//##
		Argument ##[[KeyPgSingle Single]]## facultatif. Si ##//seed//## a une valeur de z&eacute;ro, le dernier nombre al&eacute;atoire g&eacute;n&eacute;r&eacute; est r&eacute;p&eacute;t&eacute;, pour tout autre nombre, un nouveau nombre al&eacute;atoire est renvoy&eacute;. Avec l'algorithme QB-compatible, un nombre n&eacute;gatif reg&eacute;n&egrave;re enti&egrave;rement le g&eacute;n&eacute;rateur.  S'il n'y a aucun argument, par d&eacute;faut un nouveau nombre al&eacute;atoire est retourn&eacute;.

{{fbdoc item="section" value="Valeur retourn&eacute;e
	Retourne le nombre al&eacute;atoire g&eacute;n&eacute;r&eacute;.

{{fbdoc item="desc"}}
	Renvoie un nombre de type ##[[KeyPgDouble Double]]## dans l'intervalle ##[0, 1)## (c'est &agrave; dire ##0 <= **Rnd** < 1##), bas&eacute; sur une graine al&eacute;atoire (voir ##[[KeyPgRandomize Randomize]]##).

	##**Rnd**## peut utiliser une vari&eacute;t&eacute; d'algorithmes diff&eacute;rents - voir ##[[KeyPgRandomize Randomize]]## pour les d&eacute;tails de l'algorithme par d&eacute;faut et des algorithmes s&eacute;lectionnables.

	##**Rnd**## retournera la m&ecirc;me s&eacute;quence de nombres chaque fois que le programme est ex&eacute;cut&eacute;.  Cette s&eacute;quence peut &ecirc;tre modifi&eacute;e en r&eacute;gn&eacute;rant le g&eacute;n&eacute;rateur.

{{fbdoc item="ex"}}
{{fbdoc item="filename" value="examples/manual/math/rnd.bas"}}%%(freebasic)
'' Function to a random number in the range [first, last), or {first <= x < last}.
function rnd_range (first as double, last as double) as double
	function = rnd * (last - first) + first
end function

'' seed the random number generator, so the sequence is not the same each time
randomize

'' prints a random number in the range [0, 1), or {0 <= x < 1}.
print rnd

'' prints a random number in the range [0, 10), or  {0 <= x < 10}.
print rnd * 10

'' prints a random integral number in the range [1, 11), or  {1 <= x < 11}.
'' with integers, this is equivalent to [1, 10], or {1 <= n <= 10}.
print int(rnd * 10) + 1

'' prints a random integral number in the range [69, 421), or {69 <= x < 421}.
'' this is equivalent to [69, 420], or {69 <= n <= 420}.
print int(rnd_range(69, 421))
%%

{{fbdoc item="lang"}}
	L'algorithme utilis&eacute; par d&eacute;faut d&eacute;pend du dialecte en usage:	- Avec le dialecte //[[CompilerOptlang -lang fb]]//, une fonction "Mersenne Twister" 32 bits avec une granularit&eacute; de 32 bits est utilis&eacute;e.
		- Avec le dialecte //[[CompilerOptlang -lang qb]]//, une fonction donnant le m&ecirc;me r&eacute;sultat que ##**Rnd**## dans QB est utilis&eacute;e. La granularit&eacute; est de 24 bits.
		- Avec les dialectes //[[CompilerOptlang -lang deprecated]]// et //[[CompilerOptlang -lang fblite]]//, la fonction C disponible dans le syst&egrave;me est utilis&eacute;e. La fonction a une granularit&eacute; de 15 bits dans Win32 et 32 bits sous Linux et DOS.
		{{fbdoc item="diff"}}

- Aucune, si compil&eacute; avec le dialecte //[[CompilerOptlang -lang qb]]//.  Les autres dialectes peuvent &eacute;galement utiliser la m&ecirc;me g&eacute;n&eacute;ration et algorithmes de g&eacute;n&eacute;ration en appelant ##[[KeyPgRandomize Randomize]]## avec le param&egrave;tre appropri&eacute;.
	- Pour les algorithmes non-QB-compatibles, si l'argument optionnel est inf&eacute;rieur &agrave; 0, il est &eacute;quivalent &agrave; passer 1 en argument.
	{{fbdoc item="see"}}

- ##[[KeyPgRandomize Randomize]]##
	- ##[[KeyPgTimer Timer]]##
	- ##[[KeyPgInt Int]]##
	- ##[[KeyPgInt Int]]##

{{fbdoc item="back" value="CatPgMath|Math"}}