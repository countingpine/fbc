{{fbdoc item="title" value="Operator < (Less than)"}}----
Compare une expression &agrave; une autre pour savoir si elle lui est inf&eacute;rieure

{{fbdoc item="syntax"}}##
	[[KeyPgDeclare declare]] [[KeyPgOperator operator]] **<** ( [[KeyPgByref byref]] //lhs// [[KeyPgAs as]] [[KeyPgByte byte]], [[KeyPgByref byref]] //rhs// [[KeyPgAs as]] [[KeyPgByte byte]] ) [[KeyPgAs as]] [[KeyPgInteger integer]]
	[[KeyPgDeclare declare]] [[KeyPgOperator operator]] **<** ( [[KeyPgByref byref]] //lhs// [[KeyPgAs as]] [[KeyPgUbyte ubyte]], [[KeyPgByref byref]] //rhs// [[KeyPgAs as]] [[KeyPgUbyte ubyte]] ) [[KeyPgAs as]] [[KeyPgInteger integer]]
	[[KeyPgDeclare declare]] [[KeyPgOperator operator]] **<** ( [[KeyPgByref byref]] //lhs// [[KeyPgAs as]] [[KeyPgShort short]], [[KeyPgByref byref]] //rhs// [[KeyPgAs as]] [[KeyPgShort short]] ) [[KeyPgAs as]] [[KeyPgInteger integer]]
	[[KeyPgDeclare declare]] [[KeyPgOperator operator]] **<** ( [[KeyPgByref byref]] //lhs// [[KeyPgAs as]] [[KeyPgUshort ushort]], [[KeyPgByref byref]] //rhs// [[KeyPgAs as]] [[KeyPgUshort ushort]] ) [[KeyPgAs as]] [[KeyPgInteger integer]]
	[[KeyPgDeclare declare]] [[KeyPgOperator operator]] **<** ( [[KeyPgByref byref]] //lhs// [[KeyPgAs as]] [[KeyPgInteger integer]], [[KeyPgByref byref]] //rhs// [[KeyPgAs as]] [[KeyPgInteger integer]] ) [[KeyPgAs as]] [[KeyPgInteger integer]]
	[[KeyPgDeclare declare]] [[KeyPgOperator operator]] **<** ( [[KeyPgByref byref]] //lhs// [[KeyPgAs as]] [[KeyPgUinteger uinteger]], [[KeyPgByref byref]] //rhs// [[KeyPgAs as]] [[KeyPgUinteger uinteger]] ) [[KeyPgAs as]] [[KeyPgInteger integer]]
	[[KeyPgDeclare declare]] [[KeyPgOperator operator]] **<** ( [[KeyPgByref byref]] //lhs// [[KeyPgAs as]] [[KeyPgLongint longint]], [[KeyPgByref byref]] //rhs// [[KeyPgAs as]] [[KeyPgLongint longint]] ) [[KeyPgAs as]] [[KeyPgInteger integer]]
	[[KeyPgDeclare declare]] [[KeyPgOperator operator]] **<** ( [[KeyPgByref byref]] //lhs// [[KeyPgAs as]] [[KeyPgUlongint ulongint]], [[KeyPgByref byref]] //rhs// [[KeyPgAs as]] [[KeyPgUlongint ulongint]] ) [[KeyPgAs as]] [[KeyPgInteger integer]]

	[[KeyPgDeclare declare]] [[KeyPgOperator operator]] **<** ( [[KeyPgByref byref]] //lhs// [[KeyPgAs as]] [[KeyPgString string]], [[KeyPgByref byref]] //rhs// [[KeyPgAs as]] [[KeyPgString string]] ) [[KeyPgAs as]] [[KeyPgInteger integer]]
	[[KeyPgDeclare declare]] [[KeyPgOperator operator]] **<** ( [[KeyPgByref byref]] //lhs// [[KeyPgAs as]] [[KeyPgZstring zstring]], [[KeyPgByref byref]] //rhs// [[KeyPgAs as]] [[KeyPgZstring zstring]] ) [[KeyPgAs as]] [[KeyPgInteger integer]]
	[[KeyPgDeclare declare]] [[KeyPgOperator operator]] **<** ( [[KeyPgByref byref]] //lhs// [[KeyPgAs as]] [[KeyPgWstring wstring]], [[KeyPgByref byref]] //rhs// [[KeyPgAs as]] [[KeyPgWstring wstring]] ) [[KeyPgAs as]] [[KeyPgInteger integer]]

	[[KeyPgDeclare declare]] [[KeyPgOperator operator]] **<** ( [[KeyPgByref byref]] //lhs// [[KeyPgAs as]] //T//, [[KeyPgByref byref]] //rhs// [[KeyPgAs as]] //T// ) [[KeyPgAs as]] [[KeyPgInteger integer]]
##
{{fbdoc item="usage"}}##
	//result// = //lhs// **<** //rhs//
##
{{fbdoc item="param"}}
	##//lhs//##
		L'expression c&ocirc;t&eacute; gauche &agrave; comparer.
	##//rhs//##
		L'expression c&ocirc;t&eacute; droit &agrave; comparer.
	##//T//##
		N'importe quel type de pointeur.

{{fbdoc item="section" value="Valeur retourn&eacute;e
	Retourne une valeur n&eacute;gative (-1) si l'expression c&ocirc;t&eacute; gauche est inf&eacute;rieure &agrave; celle de droite ou z&eacute;ro (0) si elle est sup&eacute;rieure  ou &eacute;gale.

{{fbdoc item="desc"}}
	L'**##Op&eacute;rateur <##** (Inf&eacute;rieur &agrave;) est un op&eacute;rateur binaire qui compare une expression &agrave; une autre pour savoir si elle est plus petite et retourne un r&eacute;sultat - une valeur bol&eacute;enne sous la forme d'un ##[[KeyPgInteger Entier (Integer)]]##: negatif (-1) si c'est vrai et z&eacute;ro (0) si c'est faux. Les arguments ne sont en aucun cas modifi&eacute;s.

	Cet op&eacute;rateur peut &ecirc;tre surcharg&eacute; pour accepter aussi bien des types d&eacute;finis par l'utilisateur.

{{fbdoc item="ex"}}

{{fbdoc item="filename" value="examples/manual/operator/less-than1.bas"}}%%(freebasic)
const size as integer = 4
dim array(size - 1) as integer = { 1, 2, 3, 4 }

dim index as integer = 0
while (index < size)
   print array(index)
   index += 1
wend
%%
	L'##[[KeyPgOpGreaterThanOrEqual Op&eacute;rateur >=]]## (Sup&eacute;rieur ou &eacute;gal &agrave;) est compl&eacute;mentaire &agrave; l'**##Op&eacute;rateur <## (Inf&eacute;rieur &agrave;)** et est fonctionnellement identique si combin&eacute; avec l'##[[KeyPgOpNot Op&eacute;rateur Not]]## (Bit-wise Complement).

{{fbdoc item="filename" value="examples/manual/operator/less-than3.bas"}}%%(freebasic)
   if (69 < 420) then print "(69 < 420) is true."
   if not (69 >= 420) then print "not (69 >= 420) is true."
%%

{{fbdoc item="lang"}}
	- Dans le dialecte //[[CompilerOptlang -lang qb]]//, cet op&eacute;rateur ne peut pas &ecirc;tre surcharg&eacute;.

{{fbdoc item="diff"}}
	- Aucune

{{fbdoc item="see"}}
	- ##[[KeyPgOpGreaterThanOrEqual Op&eacute;rateur >=]]## (Sup&eacute;rieur ou &eacute;gal &agrave;)

{{fbdoc item="back" value="CatPgOpConditional|Relational Operators"}}{{fbdoc item="back" value="CatPgOperators|Operators"}}