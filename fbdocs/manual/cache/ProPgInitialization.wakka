{{fbdoc item="title" value="Initialiseurs de variables"}}----
Les initialiseurs de variables sont servent à initialiser des tableaux, des variables et des types définis par l'utilisateur.

{{fbdoc item="syntax"}}##
		[[KeyPgDim Dim]] //scalar_symbol// [AS [[DataType DataType]]] = //expression//
		[[KeyPgDim Dim]] //array_symbol// ([//lbound// TO] //ubound//) [AS [[DataType DataType]]] => { //expression// [, ...] }
		[[KeyPgDim Dim]] //udt_symbol// AS [[DataType DataType]] = ( //expression// [, ...] )
##
{{fbdoc item="desc"}}
	Les tableaux, les variables et les types définis par l'utilisateur peuvent recevoir une valeur lors de leur déclaration en utilisant ##[[KeyPgDim Dim]]##, avec la syntaxe ci-dessus.  S'il vous plaît, notez les différences importantes entre les différents types d'initialisation.  Les variables scalaires sont initialisées comme dans une affectation normale, en utilisant un signe égal.  Les types définis par l'utilisateur et les tableaux sont assignés à l'aide d'un signe égal suivi d'un signe plus grand que (=>).  Les valeurs d'un tableau sont données par des valeurs séparées par des virgules délimitées par des accolades, et les valeurs des types définis par l'utilisateur sont indiquées par des valeurs séparées par des virgules délimitées par des parenthèses.

	Ces méthodes d'initialisation des variables peuvent être imbriquées les unes dans les autres pour les tâches complexes.  Par exemple, pour initialiser un tableau multi-dimensionnel:

{{fbdoc item="filename" value="examples/manual/proguide/init/array.bas"}}%%(freebasic)
DIM array(1 to 2, 1 to 5) as Integer => {{1, 2, 3, 4, 5}, {1, 2, 3, 4, 5}}
%%
	Dans cette déclaration, les valeurs pour la dimension la plus à gauche sont données sous forme de tableaux d'index 5.  L'imbrication permet d'initialiser les tableaux de n'importe quelles dimensions.

	Les types définis par l'utilisateur et les tableaux peuvent aussi être imbriqués les uns dans les autres.  Par exemple, le code suivant déclare et initialise un tableau de types définis par l'utilisateur.

{{fbdoc item="filename" value="examples/manual/proguide/init/udtarray.bas"}}%%(freebasic)
Type mytype
	var1 As Double
	var2 As Integer
	var3 As ZString Ptr
End Type

Dim MyVar(2) As mytype => _
	{ _
		(1.0, 1, @"Hello"), _
		(2.0, 2, @"GoodBye") _
	}
%%
	Pour les variables statiques ou globales, au niveau module , les valeurs d'initialisation doivent être des expressions constantes.  Autrement, FreeBASIC signale une erreur de compilation.

{{fbdoc item="diff"}}
	- Les initialiseurs de variables sont nouveau pour ""FreeBASIC""

{{fbdoc item="see"}}
	- ##[[KeyPgDim Dim]]##

{{fbdoc item="back" value="CatPgProgrammer|Programmer's Guide"}}

