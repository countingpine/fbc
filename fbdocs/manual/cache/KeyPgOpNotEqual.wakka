{{fbdoc item="title" value="Operator <> (Not equal)"}}----
Compare deux expressions et v&eacute;rifie leur in&eacute;galit&eacute;

{{fbdoc item="syntax"}}##
	[[KeyPgDeclare declare]] [[KeyPgOperator operator]] **<>** ( [[KeyPgByref byref]] //lhs// [[KeyPgAs as]] [[KeyPgByte byte]], [[KeyPgByref byref]] //rhs// [[KeyPgAs as]] [[KeyPgByte byte]] ) [[KeyPgAs as]] [[KeyPgInteger integer]]
	[[KeyPgDeclare declare]] [[KeyPgOperator operator]] **<>** ( [[KeyPgByref byref]] //lhs// [[KeyPgAs as]] [[KeyPgUbyte ubyte]], [[KeyPgByref byref]] //rhs// [[KeyPgAs as]] [[KeyPgUbyte ubyte]] ) [[KeyPgAs as]] [[KeyPgInteger integer]]
	[[KeyPgDeclare declare]] [[KeyPgOperator operator]] **<>** ( [[KeyPgByref byref]] //lhs// [[KeyPgAs as]] [[KeyPgShort short]], [[KeyPgByref byref]] //rhs// [[KeyPgAs as]] [[KeyPgShort short]] ) [[KeyPgAs as]] [[KeyPgInteger integer]]
	[[KeyPgDeclare declare]] [[KeyPgOperator operator]] **<>** ( [[KeyPgByref byref]] //lhs// [[KeyPgAs as]] [[KeyPgUshort ushort]], [[KeyPgByref byref]] //rhs// [[KeyPgAs as]] [[KeyPgUshort ushort]] ) [[KeyPgAs as]] [[KeyPgInteger integer]]
	[[KeyPgDeclare declare]] [[KeyPgOperator operator]] **<>** ( [[KeyPgByref byref]] //lhs// [[KeyPgAs as]] [[KeyPgInteger integer]], [[KeyPgByref byref]] //rhs// [[KeyPgAs as]] [[KeyPgInteger integer]] ) [[KeyPgAs as]] [[KeyPgInteger integer]]
	[[KeyPgDeclare declare]] [[KeyPgOperator operator]] **<>** ( [[KeyPgByref byref]] //lhs// [[KeyPgAs as]] [[KeyPgUinteger uinteger]], [[KeyPgByref byref]] //rhs// [[KeyPgAs as]] [[KeyPgUinteger uinteger]] ) [[KeyPgAs as]] [[KeyPgInteger integer]]
	[[KeyPgDeclare declare]] [[KeyPgOperator operator]] **<>** ( [[KeyPgByref byref]] //lhs// [[KeyPgAs as]] [[KeyPgLongint longint]], [[KeyPgByref byref]] //rhs// [[KeyPgAs as]] [[KeyPgLongint longint]] ) [[KeyPgAs as]] [[KeyPgInteger integer]]
	[[KeyPgDeclare declare]] [[KeyPgOperator operator]] **<>** ( [[KeyPgByref byref]] //lhs// [[KeyPgAs as]] [[KeyPgUlongint ulongint]], [[KeyPgByref byref]] //rhs// [[KeyPgAs as]] [[KeyPgUlongint ulongint]] ) [[KeyPgAs as]] [[KeyPgInteger integer]]

	[[KeyPgDeclare declare]] [[KeyPgOperator operator]] **<>** ( [[KeyPgByref byref]] //lhs// [[KeyPgAs as]] [[KeyPgString string]], [[KeyPgByref byref]] //rhs// [[KeyPgAs as]] [[KeyPgString string]] ) [[KeyPgAs as]] [[KeyPgInteger integer]]
	[[KeyPgDeclare declare]] [[KeyPgOperator operator]] **<>** ( [[KeyPgByref byref]] //lhs// [[KeyPgAs as]] [[KeyPgZstring zstring]], [[KeyPgByref byref]] //rhs// [[KeyPgAs as]] [[KeyPgZstring zstring]] ) [[KeyPgAs as]] [[KeyPgInteger integer]]
	[[KeyPgDeclare declare]] [[KeyPgOperator operator]] **<>** ( [[KeyPgByref byref]] //lhs// [[KeyPgAs as]] [[KeyPgWstring wstring]], [[KeyPgByref byref]] //rhs// [[KeyPgAs as]] [[KeyPgWstring wstring]] ) [[KeyPgAs as]] [[KeyPgInteger integer]]

	[[KeyPgDeclare declare]] [[KeyPgOperator operator]] **<>** ( [[KeyPgByref byref]] //lhs// [[KeyPgAs as]] //T//, [[KeyPgByref byref]] //rhs// [[KeyPgAs as]] //T// ) [[KeyPgAs as]] [[KeyPgInteger integer]]
##
{{fbdoc item="usage"}}##
	//result// = //lhs// **<>** //rhs//
##
{{fbdoc item="param"}}
	##//lhs//##
		L'expression du c&ocirc;t&eacute; gauche &agrave; comparer.
	##//rhs//##
		L'expression du c&ocirc;t&eacute; droit &agrave; comparer.
	##//T//##
		N'importe quel type de pointeur.

{{fbdoc item="section" value="Valeur retourn&eacute;e
	Retourne une valeur n&eacute;gative (-1) si les expressions ne sont pas &eacute;gales ou z&eacute;ro (0) si &eacute;gales.

{{fbdoc item="desc"}}
	L'**##Op&eacute;rateur <>## (Not equal)** est un Op&eacute;rateur binaire qui compare deux expressions pour v&eacute;rifier leur in&eacute;galit&eacute; et retourne le r&eacute;sultat - une valeur bool&eacute;enne sous forme d'un ##[[KeyPgInteger Entier (Integer)]]##: n&eacute;gative (-1) pour vrai et z&eacute;ro (0) pour faux. Les arguments ne sont en aucun cas modifi&eacute;s.

	Cet op&eacute;rateur peut &ecirc;tre surcharg&eacute; pour accepter aussi des types d&eacute;finis par l'utilisateur.

{{fbdoc item="ex"}}

{{fbdoc item="filename" value="examples/manual/operator/not-equal.bas"}}%%(freebasic)
Dim As String a = "hello", b = "world"
Dim As Integer i = 10, j = i

If (a <> b) Then
  Print a & " does not equal " & b
End If

If (i <> j) Then
  Print "error: " & i & " does not equal " & j
End If
%%
	L'##[[KeyPgOpEqual Op&eacute;rateur =]]## (Egal) est compl&eacute;mentaire de l'**##Op&eacute;rateur <>## (Non &eacute;gal)** et est fonctionnellement identique si combin&eacute; avec l'##[[KeyPgOpNot Op&eacute;rateur Not]]## (Bit-wise Complement).

{{fbdoc item="filename" value="examples/manual/operator/not-equal2.bas"}}%%(freebasic)
   if (69 <> 420) then print "(420 <> 420) is true."
   if not (69 = 420) then print "not (69 = 420) is true."
%%

{{fbdoc item="lang"}}
	- Dans le dialecte //[[CompilerOptlang -lang qb]]//, cet op&eacute;rateur ne peut pas &ecirc;tre surcharg&eacute;.

{{fbdoc item="diff"}}
	- Aucune

{{fbdoc item="see"}}
	- ##[[KeyPgOpEqual Op&eacute;rateur =]]## (Egal)

{{fbdoc item="back" value="CatPgOpConditional|Relational Operators"}}{{fbdoc item="back" value="CatPgOperators|Operators"}}