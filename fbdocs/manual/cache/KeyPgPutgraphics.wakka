{{fbdoc item="title" value="PUT (GRAPHICS)"}}----
Copie une image sur une autre image ou sur l'écran

{{fbdoc item="syntax"}}##
	**Put** [ //target//, ] [ STEP ] ( //x//,//y// ), //source// [ ,( //x1//,//y1// )-[ STEP ]( //x2//,//y2// ) ] [ ,//method// [ ,( //alphaval//|//value//|//blender// [ ,//param//]) ] ]
##
{{fbdoc item="param"}}
	##//target//##
		est l'adresse du tampon où l'image doit êtredessinée (destination). Si omis, l'image est "blittée" (affichée) à l'écran. Voir ci-dessous.
	##STEP##
		indique que les coordonnées ##(//x//,  //y//)## sont relatives à  la position courante du curseur graphique.	
	##(//x//,  //y//)##
		indique les coordonnées par rapport au coin en haut à gauche du tampon destination ou de l'écran, sur lequel l'image est dessinée. 
	##//source//##
		est l'adresse du tampon image sur lequel dessiner. Voir ci-dessous.
	##(//x1//, //y1//)-[ STEP ](//x2//, //y2//)##
		une zone rectangulaire dans le tampon source, utilisée pour le dessin. Si omise, le tampon entier est utilisé pour le dessin. ##STEP## indique que ##//x2//## et ##//y2//## sont relatifs respectivement à ##//x1//## et ##//y1//##.
	##//method//##
		spécifie la méthode utilisée pour dessiner l'image sur le tampon destination et peut être une des méthodes suivantes (##XOR## est la méthode par défaut):

		Méthodes indépendantes de l'arrière-plan
			##[[KeyPgPsetGfx PSET]]## : Les valeurs pixel sont copiées sans modification.
			##PRESET## : Les valeurs pixel source sont complémentées à  1 négativement (1's-complement negated) avant la copie.
			##[[KeyPgTransGfx TRANS]]## : Les valeurs pixel source sont copiées sans modification. Ne dessine pas les pixels source du masque de couleur. Voir ci-dessous.
		Méthodes dépendant de l'arrière-plan
			##[[KeyPgAndGfx AND]]## : Les pixels destination subissent un AND avec les pixels source (dest AND source). Voir ci-dessous.
			##[[KeyPgOrGfx OR]]## : Les pixels destination subissent un OR avec les pixels source (dest OR source). Voir ci-dessous.
			##[[KeyPgXorGfx XOR]]## : Les pixels destination subissent un XOR avec les pixels source (dest XOR source). Voir ci-dessous.
			##[[KeyPgAlphaGfx ALPHA]]## : Source est mélangée avec un facteur de transparence spécifié soit par le paramètre ##//value//##, soit dans les pixels individuels de l'image.  Voir ci-dessous.
			##[[KeyPgAddGfx ADD]]##: Source est multiplié par une valeur et ajoutée avec saturation à  la destination. Voir ci-dessous.
			##[[KeyPgCustomgfx CUSTOM]]## : Utilise une fonction définie par l'utilisateur pour effectuer le mélange de la source avec la destination. Voir ci-dessous.

	##//value//##
		est une valeur de ##0 à 255## spécifiant la valeur de la transparence pour l'une des méthodes de transformation ##ADD## ou ##ALPHA##.
	##//blender//## 
		spécifie l'adresse de la fonction utilisateur à appeler pour la méthode de transformation ##CUSTOM##. Voir ci-dessous.
	##//param//## 
		indique le paramètre à passer à la fonction de transformation utilisateur.

{{fbdoc item="desc"}}
	##**Put**## peut être utilisé pour dessiner une image sur une autre image. Les coordonnées ##//x//## et ##//y//## sont affectées par le dernier appel à  ##[[KeyPgViewgraphics View]]## et ##[[KeyPgWindow Window]]##, et l'image placée respecte la région de découpage courante validée par le dernier appel à  ##[[KeyPgViewgraphics View]]##. L'image est tronquée si elle est dessinée en-dehors du tampon destination.

	**Tampons Image Valides**
		Les tampons image ##//source//## et ##//target//## doivent être des tampons image valides. Des tampons image valides sont créés par ##[[KeyPgGetgraphics Get]]## ou ##[[KeyPgImagecreate ImageCreate]]##. Des tampons image valides peuvent être spécifiés dans ##**Put**## utilisant un tableau avec un index optionnel ou un pointeur avec un index optionnel.

	**Méthodes de dessin**
		Dépendant de la méthode utilisée, les valeurs pixel dans le tampon destination sont utilisées pour calculer les valeurs pixel qui seront dessinées. Les méthodes ##PSET##, ##PRESET## et ##TRANS## n'utilisent pas le tampon destination pour calculer les valeurs finales, au contraire des méthodes ##AND##, ##OR##, ##XOR##, ##ALPHA## et ##ADD##. Les images qui sont dessinées par ces dernières méthodes seront différentes en fonction du contenu du tampon destination.

	**Différent formats de pixel**
		Le format de pixel d'un tampon image doit être compatible avec la profondeur de couleur du mode de graphique courant; autrement dit, si vous faites l'acquisition d'une image en utilisant ##[[KeyPgGetgraphics Get]]## et que plus tard vous changez de mode écran avec ##[[KeyPgScreengraphics Screen]]##, les données image ne seront peut être pas valides dans ce nouveau mode graphique, et vous ne pourrez peut être pas l'afficher à  l'écran. Vous noterez cependant que vous pourrez toujours dessiner un tampon image sur un autre tampon image via ##**Put**## tant que ces tampons auront été créés avec la même profondeur.

		Les méthodes ##AND##, ##OR## et ##XOR## donnent des résultats différents en fonction de la pofondeur de couleur courante, car les pixels sont stockés dans différents formats; voir [[GfxInternalFormats Formats internes des pixels]] pour des détails. 

	**Masque de couleur**
		Les méthodes ##TRANS##, ##ALPHA## et ##ADD## ne dessinent pas les pixels de l'image source qui utilisent le masque de couleur. Le masque de couleur dépend de la profondeur de la cible (un tampon image ou l'écran): pour des profondeurs jusqu'à  8 bpp (modes avec palette) c'est la couleur d'indice ##0##, alors qu'en profondeur 'hi/truecolor' (16 et 32 bpp) il correspond à  magenta, c'est à  dire ##[[KeyPgRgb RGB]](255, 0, 255)##. Notez que dans les modes 32 bpp la valeur alpha d'une couleur n'affecte pas l'identification de la couleur transparente; seuls les 24 bits de poids faibles sont utilisés pour l'identifier. Voir [[GfxInternalFormats Formats internes des pixels ]] pour plus de détails. 

	**Dessin de la transparence (Alpha drawing)**
		La méthode ##ALPHA## est utilisable dans deux modes. Si le paramètre ##//value//## est spécifié, il est utilisé pour spécifier le niveau de transparence pour l'image entière à  dessiner; une valeur de 0 dessinera une image complètement transparente, alors qu'une valeur de 255 en dessinera une sans aucune transparence. Ce mode ne fonctionne qu'avec des cibles 'hi/truecolor' (16 et 32 bpp).
		Si le paramètre ##//value//## est omis, la méthode ##ALPHA## prendra la valeur du niveau alpha sur une base par-pixel, permettant de dessiner des images avec un canal alpha (certaines parties de l'image pourront étre plus ou moins transparentes que d'autres). Ce mode ne fonctionne qu'avec des tampons image de 32 bpp, car c'est la seule profondeur de couleur permettant d'inclure la valeur alpha dans chaque pixel.

 	**Jouer avec le canal "alpha"**
		Normalement ##**Put**## ne permet d'écrire des tampons image que sur des cibles de même profondeur, mais il y a une exception. Quand vous dessinez un tampon image de 8 bpp sur une cible de 32 bpp et que la méthode ##ALPHA## est utilisée, l'image source de 8 bpp est dessinée dans le canal alpha de la cible 32 bpp. Cela permet de valider facilement la totalité du canal alpha d'une image sans étre obligé de manier individuellement ses données pixels.

	**Méthode CUSTOM de Modification des pixels**
		La méthode ##CUSTOM## utilise une fonction définie par l'utilisateur pour calculer les valeurs finales des pixels à dessiner dans le tampon destination. Cette fonction sera appelée pour chaque pixel de l'image source, et recevra les valeurs des pixels source et destination et un pointeur de données passé par la fonction ##**Put**##. La valeur du pixel renvoyée sera celle utilisée pour dessiner sur le tampon destination. La fonction est de la forme:

		##[[KeyPgDeclare declare]] [[KeyPgFunction function]] //identifier// ( [[KeyPgByval byval]] //source_pixel// [[KeyPgAs as]] [[KeyPgUinteger uinteger]], [[KeyPgByval byval]] //destination_pixel// [[KeyPgAs as]] [[KeyPgUinteger uinteger]], [[KeyPgByval byval]] //parameter// [[KeyPgAs as]] [[KeyPgAny any]] [[KeyPgPtr ptr]]) [[KeyPgAs as]] [[KeyPgUinteger uinteger]]##

			##//identifier//## est le nom de la fonction. Selon vos désirs.
			##//source_pixel//## est la valeur du pixel courant de l'image source.
			##//destination_pixel//## est la valeur du pixel courant de l'image destination.
			##//parameter//## c'est le paramètre passé par la commande ##**Put**##. Ce doit être un ##[[KeyPgPtr Pointeur]]## de données.  S'il est omis, sa valeur sera zéro.

{{fbdoc item="ex"}}
	Le programme ci-dessous donne un exemple simple de la façon d'utiliser ##**Put**## pour placer une image à l'écran, incluant la création d'un tampon image et la libération de la mémoire aprés utilisation.
	{{fbdoc item="filename" value="examples/manual/gfx/put.bas"}}%%(freebasic)
'' Valide ecran et remplit avec couleur arriere-plan
screenres 320, 200, 32
paint (0, 0), rgb(64, 128, 255)

'' Valide une image et dessine quelque chose dedans
dim img as any ptr = imagecreate( 32, 32, rgb(255, 0, 255) )
circle img, (16, 16), 15, rgb(255, 255, 0),     ,     , 1, f
circle img, (10, 10), 3,  rgb(  0,   0, 0),     ,     , 2, f
circle img, (23, 10), 3,  rgb(  0,   0, 0),     ,     , 2, f
circle img, (16, 18), 10, rgb(  0,   0, 0), 3.14, 6.28

'' PUT image au centre ecran
put (160 - 16, 100 - 16), img, trans

'' Libere memoire image
imagedestroy img

'' Attend touche appuyee
sleep
%%

{{image class="center" title="Simple Put example output" url="/images/putgfx1.png"}}

	L'exemple ci-dessous montre comment allouer de la mémoire pour une image, puis dessiner celle-ci en utilisant différentes méthodes, y compris en utilisant une fonction personnelle, puis comment libérer la mémoire utilisée:
	{{fbdoc item="filename" value="examples/manual/gfx/put-all.bas"}}%%(freebasic)
declare function checkered_blend( byval src as uinteger, byval dest as uinteger, byval param as any ptr ) as uinteger

   screen 14, 32                                   '' valide 320*240*32 mode gfx

   dim as any ptr sprite
   dim as integer counter = 0
   
   sprite = ImageCreate( 32, 32 )                  '' alloue memoire pour sprite 32x32

   line sprite, ( 0, 0 )-( 31, 31 ), rgba(255, 0, 0, 64), bf  '' draw a sprite ...
   line sprite, ( 4, 4 )-( 27, 27 ), rgba(255, 0, 0, 192), bf
   line sprite, ( 0, 0 )-( 31, 31 ), rgb(0, 255, 0), b
   line sprite, ( 8, 8 )-( 23, 23 ), rgba(255, 0, 255, 64), bf
   line sprite, ( 1, 1 )-( 30, 30 ), rgba(0, 0, 255, 192)
   line sprite, ( 30, 1 )-( 1, 30 ), rgba(0, 0, 255, 192)

   cls
   dim as integer i : for i = 0 to 63              '' draw l' arriere-plan
	  line( i,0 )-( i,240 ), rgb( i * 4, i * 4, i * 4 )
   next i

   '' Demonstration toutes methodes dessin ...
   put( 8,14 ), sprite, pset
   put step( 16,20 ), sprite, preset
   put step( -16,20 ), sprite, and
   put step( 16,20 ), sprite, or
   put step( -16,20 ), sprite, xor
   put step( 16,20 ), sprite, trans
   put step( -16,20 ), sprite, alpha, 96
   put step( 16,20 ), sprite, alpha
   put step( -16,20 ), sprite, add, 192
   put step( 16,20 ), sprite, custom, @checkered_blend, @counter

   '' Affiche une description a cote chaque demo
   draw string (100, 26), "<- pset"
   draw string step (0, 20), "<- preset"
   draw string step (0, 20), "<- and"
   draw string step (0, 20), "<- or"
   draw string step (0, 20), "<- xor"
   draw string step (0, 20), "<- trans"
   draw string step (0, 20), "<- alpha (uniform)"
   draw string step (0, 20), "<- alpha (per pixel)"
   draw string step (0, 20), "<- add"
   draw string step (0, 20), "<- custom"

   ImageDestroy( sprite )                          '' libere memoire sprite
   sleep : end 0
   
'' Fonction blender perso/span
function checkered_blend( byval src as uinteger, byval dest as uinteger, byval param as any ptr ) as uinteger
   dim as integer ptr counter
   dim as uinteger pixel
   
   counter = cast(integer ptr, param)
   pixel = iif(((*counter and 4) shr 2) xor ((*counter and 128) shr 7), src, dest)
   *counter += 1
   return pixel
end function
%%

{{image class="center" title="Put example output" url="/images/putgfx2.png"}}

{{fbdoc item="diff"}}
	- ##//target//## est nouveau pour ""FreeBASIC""
	- Les méthodes ##TRANS##, ##ALPHA##, ##ADD## et ##CUSTOM## sont nouvelles pour ""FreeBASIC"".
	- Dans QB, la destination est toujours l'écran.
	- QB produit une erreur de fonctionnement en cas d'écriture en dehors des limites de l'image.
	- Dans QB, seuls des tableaux (arrays) peuvent être spécifiés comme images source.
{{fbdoc item="see"}}
	- ##[[KeyPgPutfileio Put (File Entré/Sortie)]]##
	- ##[[KeyPgGetgraphics Get (Graphique)]]##
	- ##[[KeyPgImagecreate ImageCreate]]##
	- ##[[KeyPgAlphaGfx Alpha]]##
	- [[GfxInternalFormats Formats graphiques internes]]

{{fbdoc item="back" value="CatPgGfx2D|2D Drawing Functions"}}