{{fbdoc item="title" value="... (Ellipse - suggestion)"}}----
Utilisé à la place d'un paramètre de procédure pour passer un nombre variable d'arguments, ou comme limite supérieure dans une déclaration de tableau pour indiquer que le nombre d'éléments sera déterminé par l'initialiseur.

{{fbdoc item="syntax"}}##
	[[KeyPgDeclare declare]] { [[KeyPgSub sub]] | [[KeyPgFunction function]] } //proc_name// [[KeyPgCdecl cdecl]] ( //param// [[KeyPgAs as]] [[DataType datatype]], **...** )
	
	[[KeyPgDim dim]] //array_symbol// ([//lbound// [[KeyPgTo to]]] **...**) [[[KeyPgAs as]] [[DataType datatype]]] => { //expression_list// }
	
	[[KeyPgPpdefine #define]] //identifier//( [ //parameters//, ] //variadic_parameter//**...** ) //macro_text//
##

{{fbdoc item="desc"}}
	Les points de suspension (trois points, ##**...**##) sont utilisés dans les déclarations de procédure et les définitions pour indiquer une liste d'arguments variable. Un premier argument doit toujours être spécifié et la fonction doit être appelée avec la convention d'appel ##[[KeyPgCdecl cdecl]]## du langage C. Dans le corps de la procédure, ##[[KeyPgVaFirst va_first]]##, ##[[KeyPgVaArg va_arg]]## et ##[[KeyPgVaNext va_next]]## sont utilisés pour traiter les arguments variables.
	
	L'utilisation des points de suspension (##**...**##) pour remplacer la limite supérieure dans une déclaration de tableau, fait que la limite supérieure sera fixée selon les données qui apparaissent dans ##//expression_list//##. Lorsque l'ellipse est utilisée de cette manière, un initialiseur doit apparaître, et ne peut être ##[[KeyPgAny Any]]##.
	
	L'utilisation de l'ellipse dans ##[[KeyPgPpdefine #define]]## ou une déclaration de ##[[KeyPgPpmacro #macro]]## permet de créer une macro variable, voir ##[[KeyPgPpdefine #define]]##.

{{fbdoc item="ex"}}
{{fbdoc item="filename" value="examples/manual/procs/ellipsis.bas"}}%%(freebasic)
DECLARE FUNCTION FOO CDECL (X AS INTEGER, ...) AS INTEGER
%%

{{fbdoc item="ex"}}
{{fbdoc item="filename" value="examples/manual/array/ellipsis.bas"}}%%(freebasic)
Dim As Integer myarray(0 To ...) = {0, 1, 2, 3}
Print Lbound(myarray), Ubound(myarray)   '' 0, 3
%%

{{fbdoc item="diff"}}
	- Nouveau pour ""FreeBASIC""

{{fbdoc item="see"}}
	- ##[[KeyPgCdecl cdecl]]##
	- ##[[KeyPgVaArg va_arg]]##
	- ##[[KeyPgVaFirst va_first]]##
	- ##[[KeyPgVaNext va_next]]##
	- ##[[KeyPgDim dim]]##
	- ##[[KeyPgStatic static]]##

{{fbdoc item="back" value="CatPgProcedures|Procedures"}}{{fbdoc item="back" value="CatPgVarArg|Variable Argument list"}}

