{{fbdoc item="title" value="... (Ellipsis)"}}----
Utilis&eacute; &agrave; la place d'un param&egrave;tre de proc&eacute;dure pour passer un nombre variable d'arguments, ou comme limite sup&eacute;rieure dans une d&eacute;claration de tableau pour indiquer que le nombre d'&eacute;l&eacute;ments sera d&eacute;termin&eacute; par l'initialiseur.

{{fbdoc item="syntax"}}##
	[[KeyPgDeclare declare]] { [[KeyPgSub sub]] | [[KeyPgFunction function]] } //proc_name// [[KeyPgCdecl cdecl]] ( //param// [[KeyPgAs as]] [[DataType datatype]], **...** )
	
	[[KeyPgDim dim]] //array_symbol// ([//lbound// [[KeyPgTo to]]] **...**) [[[KeyPgAs as]] [[DataType datatype]]] => { //expression_list// }
	
	[[KeyPgPpdefine #define]] //identifier//( [ //parameters//, ] //variadic_parameter//**...** ) //macro_text//
##
{{fbdoc item="desc"}}
	Les points de suspension (trois points, ##**...**##) sont utilis&eacute;s dans les d&eacute;clarations de proc&eacute;dure et les d&eacute;finitions pour indiquer une liste d'arguments variable. Un premier argument doit toujours &ecirc;tre sp&eacute;cifi&eacute; et la fonction doit &ecirc;tre appel&eacute;e avec la convention d'appel ##[[KeyPgCdecl cdecl]]## du langage C. Dans le corps de la proc&eacute;dure, ##[[KeyPgVaFirst va_first]]##, ##[[KeyPgVaArg va_arg]]## et ##[[KeyPgVaNext va_next]]## sont utilis&eacute;s pour traiter les arguments variables.
	L'utilisation des points de suspension (##**...**##) pour remplacer la limite sup&eacute;rieure dans une d&eacute;claration de tableau, fait que la limite sup&eacute;rieure sera fix&eacute;e selon les donn&eacute;es qui apparaissent dans ##//expression_list//##. Lorsque l'ellipse est utilis&eacute;e de cette mani&egrave;re, un initialiseur doit appara&icirc;tre, et ne peut &ecirc;tre ##[[KeyPgAny Any]]##.
	
	L'utilisation de l'ellipse dans [[KeyPgPpdefine #define]] ou une d&eacute;claration de [[KeyPgPpmacro #macro]]  permet de cr&eacute;er une macro variable, voir [[KeyPgPpdefine #define]].
	
	{{fbdoc item="ex"}}

{{fbdoc item="ex"}}
Declare Function FOO cdecl (X As Integer, ...) As Integer
%%
{{fbdoc item="ex"}}

{{fbdoc item="filename" value="examples/manual/array/ellipsis.bas"}}%%(freebasic)
Dim As Integer myarray(0 To ...) = {0, 1, 2, 3}
Print Lbound(myarray), Ubound(myarray)   '' 0, 3
%%

{{fbdoc item="diff"}}
- Nouveau pour Freebasic
{{fbdoc item="see"}}
- ##[[KeyPgCdecl cdecl]]##
- ##[[KeyPgVaArg va_arg]]##

- ##[[KeyPgVaFirst va_first]]##
- ##[[KeyPgVaNext va_next]]##
- ##[[KeyPgDim Dim]]##
- ##[[KeyPgStatic Static]]##

{{fbdoc item="diff"}}
	- New to ""FreeBASIC""

{{fbdoc item="see"}}
	- ##[[KeyPgCdecl cdecl]]##
	- ##[[KeyPgVaArg va_arg]]##
	- ##[[KeyPgVaFirst va_first]]##
	- ##[[KeyPgVaNext va_next]]##
	- ##[[KeyPgDim dim]]##
	- ##[[KeyPgStatic static]]##
	- ##[[KeyPgPpdefine #define]]##

{{fbdoc item="back" value="CatPgProcedures|Procedures"}}{{fbdoc item="back" value="CatPgVarArg|Variable Argument list"}}