{{fbdoc item="title" value="Principales caract&eacute;ristiques"}}----

{{fbdoc item="section" value="Compatibilité avec le BASIC"}}
	- FreeBASIC n'est pas un "nouveau" langage BASIC. Vous n'avez pas besoin d'apprendre beaucoup de nouveautés si vous êtes familier avec toutes les variantes de Microsoft BASIC. Vous pouvez utiliser soit ##"-lang qb"## pour la compatibilité, soit (par défaut) ##"-lang fb"## pour quelques nouveautés, mais il apporte également certaines restrictions et une certaine similitude avec le langage "C" de programmation. Voir aussi ##[[CompilerDialects Les dialectes du FreeBASIC]]##.
	- FreeBASIC n'est pas sensible à la casse; une procédure "main" explicite n'est pas requise; la plupart des déclarations et procédures graphiques et console de Microsoft QuickBASIC sont implémentées, etc.
	- Seulement avec ##"-lang qb"##: les variables scalaires n'ont pas besoin d'être dimensionnées et des suffixes peuvent être utilisées; les numéros de ligne sont pris en charge; ##[[KeyPgOnerror On Error]]## and ##[[KeyPgGosub Gosub]]## sont utilisables.

{{fbdoc item="section" value="Syntaxe "propre""}}
	- Seul un petit nombre de mots-clés ont été ajoutés. Toutes les procédures sont mises en oeuvre sous forme de bibliothèques, donc pour la plus grande partie, il n'y a pas de nouvelles routines intrinsèques et donc il y a peu de risque d'avoir des chevauchements de nom avec l'ancien code.

{{fbdoc item="section" value="Relations (fichier en-tête) avec les bibliothèques C et les existantes"}}
	- Pas de "wrappers" ou "helpers" nécesaires, juste un fichier d'en-tête porté, rendant très facile l'usage de bibliothèques C externes.
	- La distribution officielle est déjà fournie avec plusieurs liaisons existantes aux bibliothèques C, voir [[ExtLibTOC Index des en-têtes de bibliothèques externes]] pour une liste complète et mise à jour

{{fbdoc item="section" value="Multi-plateforme"}}
	- FreeBASIC fonctionne actuellement sur Windows 32-bit, Linux et DOS (un DOS 16-bit est suffisant, bien que FreeBASIC lui-même et ses sorties compilateur soient 32-bit) et crée également des applications pour la console Xbox. D'autres plates-formes à venir.
	- La bibliothèque d'exécution a été écrite avec la portabilité à l'esprit. Tous les outils tiers utilisés existent déjà sur la plupart des systèmes d'exploitation en tant que GNU binutils. Le compilateur est écrit à 100% en code FreeBASIC (donc, FreeBASIC se compile lui-même), ce qui le rend simple à être lancé car il ne dépend pas d'outils non portatables.

{{fbdoc item="section" value="Support d'Unicode"}}
	- Outre les fichiers ASCII avec des séquences d'échappement (\u) [[Unicode Unicode]], FreeBASIC peut analyser les fichiers source (.bas) ou en-tête (.bi) UTF-8, UTF-16LE, UTF-16BE, UTF-32LE et UTF-32BE, ils peuvent être librement mélangés avec d'autres sources/en-têtes dans le même projet (également avec d'autres fichiers ASCII).
	- Les chaînes littérales peuvent être tapées dans leur alphabet original non-latin, il suffit d'utiliser un éditeur de texte qui supporte une partie des formats [[Unicode Unicode]] listés ci-dessus.
	- Le type ##[[KeyPgWstring Wstring]]## contient des caractères "larges", toutes les procédures chaînes (comme ##[[KeyPgLeft Left]]##, ##[[KeyPgTrim Trim]]##, etc) fonctioneront aussi avec les chaînes à caractères "larges".
	- ##[[KeyPgOpen Open]]## a été étendu pour supporter les fichiers UTF-8, UTF-16LE and UTF-32LE avec le spécificateur ##[[KeyPgEncoding Encoding]]##. ##[[KeyPgInputPp Input #]]## et ##[[KeyPgLineinputPp Line Input #]]##, ainsi que ##[[KeyPgPrintPp Print #]]## et ##[[KeyPgWritePp Write #]]## peuvent être utilisés normalement, et toute conversion de [[Unicode Unicode]] vers ASCII est effectuée si nécessaire.
	- ##[[KeyPgPrint Print]]## supporte aussi les sorties [[Unicode Unicode]] (voir ##[[CompilerRequirements Exigences]]##).

{{fbdoc item="section" value="Un grand nombre de types de données prédéfinis"}}
	- Entiers: ##[[KeyPgByte Byte]]##, ##[[KeyPgUbyte Ubyte]]##, ##[[KeyPgShort Short]]##, ##[[KeyPgUshort Ushort]]##, ##[[KeyPgInteger Integer]]##, ##[[KeyPgUinteger UInteger]]##, ##[[KeyPgLong Long]]##, ##[[KeyPgUlong ULong]]##, ##[[KeyPgLongint Longint]]##, ##[[KeyPgUlongint Ulongint]]##
	- A virgule flottante: ##[[KeyPgSingle Single]]##, ##[[KeyPgDouble Double]]##
	- Chaînes: fixée, longueur variable ou terminée par NULL (##[[KeyPgZstring Zstring]]##), jusqu'à 2GB de long
	- Les chaînes [[Unicode Unicode]] (##[[KeyPgWstring Wstring]]##), comme ##[[KeyPgZstring Zstring]]##, mais avec le support de caractères "larges". Utilisation directe des API [[Unicode Unicode]], etc.

{{fbdoc item="section" value="Les types définis par l'utilisateur (UDT)"}}
	- Nombre illimité d'imbrications.
	- Prise en charge de l'instruction ##[[KeyPgType Type]]## du BASIC, avec la nouvelle déclaration ##[[KeyPgUnion Union]]## (y compris les unions anonymes imbriquées).
	- Les tableaux utilisant jusqu'à huit dimensions peuvent être utilisés.
	- Les pointeurs de procédure.
	- Les champs de bits.
  	
{{fbdoc item="section" value="Enumérations (enums)"}}
	- Déclaration facile d'une liste de constantes avec des valeurs séquentielles avec ##[[KeyPgEnum Enum]]##.

{{fbdoc item="section" value="Tableaux"}}
	- Les tableaux de longueur fixe ou variable sont admis, jusqu'à 2 GB de taille.
	- Jusqu'à huit dimensions, y compris les tableaux avec des dimensions indéterminées.
	- Toutes possibilités de limites inférieures et supérieures.
	- Préservation des éléments de données pendant un redimensionnement de tableau avec ##[[KeyPgRedim Redim]]## en utilisant le nouveau spécificateur ##[[KeyPgPreserve Preserve]]##.

{{fbdoc item="section" value="Pointeurs"}}
	- Pointeurs vers tout type de données listé précédemment, y compris les chaînes de caractères, les éléments de tableau et les types définis par l'utilisateur.
	- Utilisation de la même syntaxe que le langage C.
	- Niveaux d'indirection illimité (par ex., pointeur vers pointeur vers ...).
	- Pointeurs de procédures.
	- Indexation avec [ ] (y compris l'indexation de chaînes).
	- Transtypage.
  
{{fbdoc item="section" value="Initialisation de variables, objets et tableaux"}}
	- Pour les variables de niveau module ou locales statiques, les tableaux et les types définis par l'utilisateur.

{{fbdoc item="section" value="Les valeurs par défaut des paramètres de procédure"}}
	- Pour les paramètres des types numériques, les chaînes et les types définis par l'utilisateur.
  
{{fbdoc item="section" value="Surcharge de procédure"}}
	- Y compris les procédures avec des valeurs par défaut de certains paramètres.

{{fbdoc item="section" value="Assemblage en ligne"}}
	- Syntaxe Intel.
	- Référence aux variables directement par leur nom, pas de "code truc" nécessaire.

{{fbdoc item="section" value="Support traditionnel du préprocesseur"}}
	- Même syntaxe qu'en C.
	- Support des macros mono-ligne avec la commande ##[[KeyPgPpdefine #Define]]##, y compris les paramètres.
	- Support des macros multi-ligne avec la commande  ##[[KeyPgPpmacro #Macro]]##.

{{fbdoc item="section" value="Alias de Type "}}
	- Support du "forward referencing" (référencement en avance) comme en C, y compris les types définis par l'utilisateur et pointeurs de procédure.

{{fbdoc item="section" value="Séquences d'échappement, comme en C, pour les chaînes de caractères"}}
	- Comme en C (mis à part que les nombres sont interprétés comme des décimaux, non en octal).

{{fbdoc item="section" value="Support du débogage"}}
	- Prise en charge complète du débogage avec //GDB// (le débogueur de GNU) ou //Insight// (un GUI pour //GDB//).
	- Array bounds checking (only enabled by the ##-exx## command-line option).
	- Vérifier pointeur nul (comme précédemment).

{{fbdoc item="section" value="Créer OBJ, LIB, DLL et console ou GUI EXE"}}
	- Vous n'êtes en aucune manière bloqué sur un IDE ou un éditeur.
	- Vous pouvez créer des bibliothèques statiques et dynamiques / partagées en ajoutant juste une option ligne de commande (##-lib## ou ##-dylib/-dll##).

{{fbdoc item="section" value="Comme une application 32-bit"}}
	- FreeBASIC peut compiler des fichiers code source jusqu'à 2 GB.
	- Le nombre de symboles (variables, constantes, etc) est seulement limité par la mémoire totale disponible pendant la compilation. (Vous pouvez, par exemple, inclure OpenGL, GTK/SDL, BASS, simultanément dans votre code source.)

{{fbdoc item="section" value="Génération de code optimisé"}}
	- Bien FreeBASIC ne soit pas un compilateur qui optimise le code, il fournit de nombreux types d'optimisations générales pour générer le code le plus efficace possible sur x86 CPU, sans oublier d'autres alternatives de base, notamment les commerciales.

{{fbdoc item="section" value="Complètement libre"}}
	- Tous les outils tiers sont également libres. Aucun morceau de logiciel abandonné ou sous copyright n'est utilisé (excepté GoRC sous Win32). L'assembleur, le linker, l'archiveur et d'autres applications en ligne de commande proviennent des outils de programmation GNU binutils.

{{fbdoc item="back" value="FBWiki|Main Page"}}

