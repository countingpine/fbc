{{fbdoc item="title" value="Dynamic Arrays in Types"}}----
//Ecrit par [[WikiRick rdc]]//

=== Introduction ===

Un tableau dynamique dans une définition de type est une fonctionnalité très utile, mais FreeBASIC ne le supporte pas. Ou plutôt, il ne le supporte pas directement. Cependant, vous pouvez créer des tableaux dynamiques en utilisant les pointeurs et les fonctions associées à la mémoire.

Un tableau est simplement un bloc contigu de mémoire qui contient un certain type de données. Les tableaux en FreeBASIC utilisent un descripteur de tableau pour décrire les données contenues dans celui-ci et vous pouvez utiliser cette même technique pour construire un tableau dynamique dans un type. Les deux éléments dont vous avez besoin dans votre "type def" sont un pointeur sur un type particulier de données et un indicateur de taille. 

Vous pouvez ensuite utiliser le "champ ptr" pour allouer un bloc de mémoire de la taille nécessaire et enregistrer cette taille dans le champ de l'indicateur de taille. Le champ de taille est utilisé pour vous dire combien d'éléments sont actuellement dans le tableau. Une fois que le tableau a été initialisé, vous pouvez ensuite utiliser l'indexation pointeur pour accéder à chaque élément du tableau.

===Obtenir le Pointeur dans le Code===

Le programme suivant illustre les étapes de la création, l'initialisation et le redimensionnement dynamique d'un tableau "type def".
%%(freebasic)
'Define type:
'size is current size of array
'darray will contain array data
Type DType
	size As Integer
	darray As Integer Ptr
End Type

'Create an instance of type
Dim myType As DType
Dim As Integer i, tmp

'Create enough space for elements
myType.darray = Callocate(5, Sizeof(Integer))
'Set the length of the array
'in the array size indicator
myType.size = 5

'Load data into array
For i = 0 To myType.Size - 1 
	myType.darray[i] = i
Next

'Print data
For i = 0 To myType.Size - 1
	Print "darray[";i;" ]:";myType.darray[i]
Next
Print "Press any key..."
Sleep
Print

'Save the current array size
tmp = myType.size
'Now resize the array
myType.darray = Reallocate(myType.darray, 10)
'Set the length indicator
myType.size = 10

'Load in data into new allocation
For i = tmp - 1 To myType.Size - 1
	myType.darray[i] = i
Next

'Print out contents
For i = 0 To myType.Size - 1
	Print "darray[";i;" ]:";myType.darray[i]
Next
Print "Press any key..."
Sleep

'Free allocated space
Deallocate myType.darray

End
%%

===Comment ça marche?===

La première étape est, bien sûr, de définir le "type-def":
%%(freebasic)
Type DType
	size As Integer
	darray As Integer Ptr
End Type
%%

Comme ce n'est qu'un exemple, il y a seulement deux éléments dans le type, un indicateur de taille et le pointeur de tableau. Notez que le pointeur de tableau est défini comme un "ptr Integer". Lorsque vous définissez un pointeur sur un type particulier, vous créez un pointeur typé. Le compilateur peut utiliser ces informations de type pour vérifier et s'assurer que les valeurs placées dans le tableau sont valides et utilisera ces informations pour l'arithmétique des pointeurs.

La prochaine étape est de définir les variables de travail.
%%(freebasic)
Dim myType As DType
Dim As Integer i, tmp
%%
Voici un exemple du type qui a été créé, ainsi que certaines variables de travail qui sont utilisées dans le code suivant. ATTENTION: Vous devez initialiser le pointeur de tableau avant que vous puissiez l'utiliser; utiliser un pointeur non initialisé peut provoquer des plantages du programme, des blocages du système et toutes sortes de mauvaises choses. 
%%(freebasic)
myType.darray = Callocate(5, Sizeof(Integer))
myType.size = 5
%%
Ces deux lignes de code initialisent le pointeur de tableau pour contenir 5 entiers. "Callocate" est utilisé pour allouer le segment de mémoire, "Callocate" va initialiser le segment avec des zéros.

Le champ de la taille stocke la longueur courante du tableau. Maintenant, bien sûr, vous pouvez calculer la taille du tableau en divisant simplement le nombre d'octets dans l'allocation par la taille d'un entier, mais en utilisant un indicateur de taille dans le type est beaucoup plus propre et vous fait gagner un calcul dans votre programme.
%%(freebasic)
For i = 0 To myType.Size - 1 
	myType.darray[i] = i
Next
%%
Cette section de code charge le tableau avec quelques valeurs. Vous pouvez voir que sauver la taille du tableau simplifie le processus de codage. Comme le tableau est un pointeur typé, vous pouvez accéder au tableau en utilisant la méthode d'indexation pointeur, qui est presque comme l'accès à un tableau prédéfini.
%%(freebasic)
For i = 0 To myType.Size - 1
	Print "darray[";i;" ]:";myType.darray[i]
Next
%%
Cette section affiche simplement les valeurs en utilisant la même méthode qui a été utilisée pour charger le tableau.

Bien sûr, cela doit être un tableau dynamique, donc vous devriez être capable de redimensionner le tableau et c'est exactement ce que la section de code suivante va faire.
%%(freebasic)
tmp = myType.size
myType.darray = Reallocate(myType.darray, 10)
myType.size = 10
%%
La première ligne de code enregistre la taille actuelle du tableau de sorte que le nouveau segment de mémoire peut être initialisé sans écraser les données existantes. Vous verrez dans un instant.

La seconde ligne utilise la fonction "Reallocate" pour redimensionner le segment de mémoire, c'est-à dire redimensionner le tableau. Dans ce cas, le tableau est plus grand; vous pourriez bien sûr faire le tableau plus petit. Si vous deviez faire le tableau plus petit, toutes les données en-dehors du nouveau segment seraient perdues, comme vous le souhaitiez.

La dernière ligne de code ci-dessus enregistre la taille du tableau nouveau dans l'indicateur de taille.
%%(freebasic)
For i = tmp - 1 To myType.Size - 1
	myType.darray[i] = i
Next
%%
Ici, vous pouvez voir pourquoi l'ancienne taille du tableau a été enregistrée. Dans l'instruction "For", la procédure d'initialisation commence à partir de l'ancien indice et parcourt les indices nouvellement ajoutés, stockant les données dans le segment de mémoire. C'est comme utiliser la déclaration "Redim Preserve" sur un tableau normal.
%%(freebasic)
For i = 0 To myType.Size - 1
	Print "darray[";i;" ]:";myType.darray[i]
Next
%%
Cette section de code affiche simplement les nouvelles valeurs. 
%%(freebasic)
Deallocate myType.darray
%%
Ceci est d'une importance vitale. Vous devez toujours libérer toute la mémoire allouée que vous avez créé dans votre programme afin de prévenir les fuites de mémoire.

Lorsque vous exécutez le programme, vous devriez avoir l'affichage suivant:
%%(freebasic)
darray[ 0 ]: 0
darray[ 1 ]: 1
darray[ 2 ]: 2
darray[ 3 ]: 3
darray[ 4 ]: 4
Press any key...

darray[ 0 ]: 0
darray[ 1 ]: 1
darray[ 2 ]: 2
darray[ 3 ]: 3
darray[ 4 ]: 4
darray[ 5 ]: 5
darray[ 6 ]: 6
darray[ 7 ]: 7
darray[ 8 ]: 8
darray[ 9 ]: 9
Press any key...
%%
Le premier affichage montre le tableau original. Le second affichage montre le tableau nouvellement redimensionné.
