{{fbdoc item="title" value="Glossary"}}----
De br&egrave;ves d&eacute;finitions et des explications pour les mots et expressions utilis&eacute;s dans le manuel FreeBASIC.

<a name="Index">]]Index: [[#A">A]] - [[#B">B]] - [[#C">C]] - [[#D">D]] -  [[#E">E]] -  [[#F">F]] -  [[#G">G]] -  [[#H">H]] -  [[#I">I]] -  [[#J">J]] - [[#K">K]] - [[#L">L]] - [[#M">M]] - [[#N">N]] - [[#O">O]] - [[#P">P]] - [[#Q">Q]] - [[#R">R]] - [[#S">S]] - [[#T">T]] - [[#U">U]] - [[#V">V]] - [[#W">W]] - [[#X">X]] - [[#Y">Y]] - [[#Z">Z]]

<div class="fb_header"><a name="A"></a> A

**access rights = droits d'acc&egrave;s**
	Le niveau d'acc&egrave;s associ&eacute; aux membres d'un ##[[KeyPgType Type]]## ou d'une ##[[KeyPgClass Class]]##. Les membres "Public" (publiques) sont accessibles par n'importe quel code; les membres "Protected" (prot&eacute;g&eacute;s) sont accessibles accessible aux fonctions membres et tout fonctions membres du ##[[KeyPgType Type]]## ou de la ##[[KeyPgClass Class]]## d&eacute;riv&eacute;; les membres "Private" (priv&eacute;s) sont accessibles uniquement aux fonctions membre de ce ##[[KeyPgType Type]]## ou de cette ##[[KeyPgClass Class]]##. Par d&eacute;faut, les membres d'un ##[[KeyPgType Type]]## ont un acc&egrave;s "Public" et ceux d'une ##[[KeyPgClass Class]]## sont "Private".

**any pointer = pointeur ind&eacute;fini**
	Une variable ou une expression qui pointe vers une adresse m&eacute;moire o&ugrave; le contenu n'est pas encore d&eacute;fini, du moins, du point de vue du compilateur, quel type de donn&eacute;es est stock&eacute;e &agrave; cette adresse. En C ce serait identique &agrave; un pointeur invalide ou (void *). Voir ##[[KeyPgPtr Ptr]]##.

**archive**
	Une archive est un groupe de fichiers (ou un seul fichier) empaquet&eacute;(s) dans un format de conteneur et le plus souvent compress&eacute;s avant ou apr&egrave;s. Formats de conteneurs sont typiques GNU tar et zip. Formats de compression typiques sont gzip et zip.An archive is a group or files or a single file packed into a container format&eacute; et g&eacute;n&eacute;ralement compress&eacute;(s) avant ou apr&egrave;s. Les formats de conteneurs classiques sont GNU Tar et Zip. Les formats de compression typiques sont Gzip et Zip.

**argument**
	Les donn&eacute;es qui sont pass&eacute;s &agrave; une proc&eacute;dure. La proc&eacute;dure se r&eacute;f&egrave;re &agrave; ces donn&eacute;es en utilisant le param&egrave;tre(s) dans sa liste de param&egrave;tres.

**argument passing convention = convention de passage d'arguments**
	La m&eacute;thode de passage des arguments &agrave; une proc&eacute;dure, c'est &agrave; dire, ##[[KeyPgByref Par R&eacute;f&eacute;rence]]## ou ##[[KeyPgByval Par Valeur]]##. Voir [[ProPgPassingArguments Passage d'arguments aux proc&eacute;dures]].

**array (container) = tableau (conteneur)**
	Une collection de donn&eacute;es dont les &eacute;l&eacute;ments sont stock&eacute;s de mani&egrave;re contigu&euml; en m&eacute;moire (l'un apr&egrave;s l'autre, dans l'ordre croissant). Pour cette raison, un tableau offre un acc&egrave;s al&eacute;atoire &agrave; ses &eacute;l&eacute;ments (un &eacute;l&eacute;ment peut &ecirc;tre consult&eacute; &agrave; tout moment). Insertion ou suppression d'&eacute;l&eacute;ments n'importe o&ugrave;, mais l'arri&egrave;re du conteneur exige que les &eacute;l&eacute;ments qui suivent (l'nsertion ou la suppression) seront relocalis&eacute;s, alors une liste cha&icirc;n&eacute;e est g&eacute;n&eacute;ralement pr&eacute;f&eacute;r&eacute;e lorsque l'insertion ou le retrait doivent &ecirc;tre efficaces.

**assembler = assembleur**
	Un composant de la cha&icirc;ne d'outils pour traduire le code source en programme ex&eacute;cutable. L'assembleur convertit les mn&eacute;moniques de bas niveau des instructions du code &eacute;mis par le compilateur en code objet.

**assignment = affectation**
	L'affectation est l'une des op&eacute;rations fondamentales de l'informatique. Cela signifie tout simplement la copie d'une valeur dans l'emplacement m&eacute;moire point&eacute; par une variable. La valeur peut &ecirc;tre un litt&eacute;ral, une autre variable ou le r&eacute;sultat d'une expression. Pour une instance d'un ##[[KeyPgType Type]]## ou d'une ##[[KeyPgClass Class]]##, cela implique l'appel d'un des op&eacute;rateurs d'affectation. A ne pas confondre avec l'initialisation.

**automatic storage = stockage automatique**
	Fait r&eacute;f&eacute;rence au stockage sur la pile des appels. Les variables locales de la proc&eacute;dure, les objets et tableaux avec stockage automatique sont attribu&eacute;s lorsque la proc&eacute;dure est appel&eacute;e, initialis&eacute;s lorsqu'elle est d&eacute;finie, d&eacute;truits (dans le cas d'objets) au moment de quitter le bloc de port&eacute;e dans lesquels ils sont d&eacute;clar&eacute;s et lib&eacute;r&eacute;s lors du retour de la proc&eacute;dure.

**automatic variable/object/array = variable / objet / tableau automatique**
	Une variable, objet ou tableau avec **stockage automatique**.

<div style="text-align: center;">[[#Index">Retour en haut de la page]]

<div class="fb_header"><a name="B"></a> B

**byref**
	##[[KeyPgByref ByRef]]## sp&eacute;cifie le passage d'arguments aux proc&eacute;dures par r&eacute;f&eacute;rence. Les arguments pass&eacute;s par r&eacute;f&eacute;rence peuvent &ecirc;tre modifi&eacute;s par la proc&eacute;dure et changements constat&eacute;s par l'appelant.

**byval**
	##[[KeyPgByref ByVal]]## sp&eacute;cifie le passage d'arguments aux proc&eacute;dures par valeur. Les proc&eacute;dures re&ccedil;oivent une copie de l'argument pass&eacute;. Avec les instances de ##[[KeyPgType Type]]## ou de ##[[KeyPgClass Class]]##, cela implique l'instanciation des objets temporaires en appelant leur constructeur de copie. Ces copies temporaires sont d&eacute;truites &agrave; la sortie de la proc&eacute;dure.

**binaries = binaires**
	Les binaires sont le r&eacute;sultat final du code source. Les binaires incluent les fichiers ex&eacute;cutables (.exe sur Windows), les fichiers de biblioth&egrave;ques statiques (.a), les fichiers de biblioth&egrave;ques dynamiques (.dll sur Windows, .so sur Linux), et les fichiers objets r&eacute;adressables (.o).

**.BSS section**
	La partie du programme ex&eacute;cutable qui contient z&eacute;ro octet seulement quand le programme d&eacute;marre. Comme tous les octets sont &agrave; z&eacute;ro, la taille finale de l'ex&eacute;cutable peut souvent &ecirc;tre r&eacute;duite en pla&ccedil;ant des donn&eacute;es initialis&eacute;es ou z&eacute;ro donn&eacute;es initialis&eacute;es dans cette section.

**buffer = tampon m&eacute;moire**
	Une r&eacute;gion de la m&eacute;moire qui permet aux donn&eacute;es d'&ecirc;tre sauvegard&eacute;es ou manipul&eacute;es avant d'&ecirc;tre copi&eacute;es ailleurs. Dans un dispositif de communication on peut y conserver les donn&eacute;es qui entrent ou sortent avant d'&ecirc;tre trait&eacute;es. Dans les graphiques, un tampon peut contenir une image avant sa copie &agrave; l'&eacute;cran.

<div style="text-align: center;">[[#Index">Retour en haut de la page]]

<div class="fb_header"><a name="C"></a> C

**call back**
	Un m&eacute;canisme de contr&ocirc;le o&ugrave; un appelant permet &agrave; une proc&eacute;dure d'appeler une autre proc&eacute;dure (le call back) fournie par l'appelant g&eacute;n&eacute;ralement &agrave; travers un pointeur de fonction.

**call stack**
	Un morceau de la m&eacute;moire r&eacute;serv&eacute;e pour un processus ou un "thread" et qui est utilis&eacute;e comme une pile pour stocker des informations diverses dont ont besoin les proc&eacute;dures quand elles sont appel&eacute;es. Parmi les informations stock&eacute;es sur la pile d'appel il y a toutes des variables locales automatiques, des objets et des tableaux de donn&eacute;es et g&eacute;n&eacute;ralement tout les param&egrave;tres qui sont pass&eacute;s &agrave; la proc&eacute;dure. Ces &eacute;l&eacute;ments sont affect&eacute;s (//pushed//) sur la pile d'appel lorsque la proc&eacute;dure est appel&eacute;e et lib&eacute;r&eacute;s (//popped// de la pile d'appel lorsque la proc&eacute;dure revient (return), soit par l'appelant ou l'appel&eacute;, selon la convention d'appel utilis&eacute;e. Les tailles initiale et maximale de cette m&eacute;moire r&eacute;serv&eacute;e varient selon la plate-forme.

**caller = l'appelant**
	Un abus de langage utilis&eacute; pour d&eacute;signer le point du code sous lequel une proc&eacute;dure est appel&eacute;e.

**cast = transtypage**
	Une op&eacute;ration de transtypage change un type de donn&eacute;es en un autre en utilisant les r&egrave;gles sp&eacute;cifi&eacute;es. Une structure de ##[[KeyPgType Type]]## peut mettre en &oelig;uvre un ##[[KeyPgCast Cast]]## personnalis&eacute; pour tout type de donn&eacute;es intrins&egrave;ques, et/ou d'autres types, consultez ##[[KeyPgCast Cast]]##.

**code block**
	Several lines of source code grouped together all sharing at least one common scope.  For example a procedure's code block will be all the lines of code between ##[[KeyPgSub Sub]]## and ##[[KeyPgEnd End Sub]]##.

**com port**
	Une abr&eacute;viation pour le port de communication s&eacute;rie.  Un programme peut communiquer avec un p&eacute;riph&eacute;rique externe, comme un modem ou un autre ordinateur via un port COM.  Voir ##[[KeyPgOpenCom Open Com]]##.

**compiler = compilateur**
	Un compilateur est un programme informatique qui transforme le code source en code machine ou code objet.

**compiler directives = directives du compilateur**
	Ce sont les instructions incluses dans le texte du programme et qui affectent la fa&ccedil;on dont se comporte le compilateur. Par exemple, le compilateur peut &ecirc;tre forc&eacute; d'inclure une section de code ou une autre de fonction du syst&egrave;me d'exploitation cible.

**compound statement = instruction compos&eacute;e**
	Une instruction compos&eacute;e d'un ou plusieurs instructions suppl&eacute;mentaires. Typiquement, une instruction compos&eacute;e a un d&eacute;but (d&eacute;claration d'ouverture), un milieu (un bloc d'instructions) et une fin (fermeture fin de d&eacute;claration), alors que certains ont des parties suppl&eacute;mentaires. Des exemples de instructions compos&eacute;es: ##[[KeyPgIfthen If]]## et ##[[KeyPgFunction Function]]##.

**constant = constante**
	Un symbole qui conserve une valeur constante tout au long de l'ex&eacute;cution du programme. Voir ##[[KeyPgConst Const]]##.

**constructor (module) = constructeur (module)**
	Un type sp&eacute;cial de proc&eacute;dure au niveau du module qui est automatiquement appel&eacute;e avant le flux de code au niveau du module. Voir ##[[KeyPgModuleConstructor Constructor (Module)]]##.

**constructor (TYPE or CLASS) = constructeur (TYPE ou CLASS)**
	Une fonction membre sp&eacute;ciale d'un ##[[KeyPgType Type]]## ou d'une ##[[KeyPgClass Class]]## qui est appel&eacute;e quand un objet est instanci&eacute;.

**CVS**
	Concurrent Versions System. Le gestionnaire de fichiers mis en &oelig;uvre sur Sourceforge o&ugrave; les sources sont stock&eacute;es, il conserve l'historique des modifications introduites par les d&eacute;veloppeurs. Utilis&eacute; par FB dans le pass&eacute;. (voir aussi SVN))

<div style="text-align: center;">[[#Index">Retour en haut de la page]]

<div class="fb_header"><a name="D"></a> D


**.DATA section**
	La partie du programme ex&eacute;cutable qui correspond aux donn&eacute;es qui peuvent &ecirc;tre modifi&eacute;es pendant que le programme est ex&eacute;cut&eacute;.

**debugger = d&eacute;bogueur**
	Un programme qui permet l'ex&eacute;cution contr&ocirc;l&eacute;e du code compil&eacute;. Les valeurs des variables peuvent &ecirc;tre v&eacute;riifi&eacute;es, l'ex&eacute;cution peut &ecirc;tre suspendue, acc&eacute;l&eacute;r&eacute;e ou en pas &agrave; pas, etc... Un d&eacute;bogueur est g&eacute;n&eacute;ralement utilis&eacute; pour aider &agrave; trouver l'origine des erreurs de programmation, appel&eacute;es 'bugs', dans le code source.

**declaration = d&eacute;claration**
	Une instruction de code source qui introduit un symbole, une constante, une variable, une proc&eacute;dure, un type de donn&eacute;es, ou similaire pour le compilateur, mais sans n&eacute;cessairement allouer de l'espace pour cela. Voir ##[[KeyPgDim Dim]]##, ##[[KeyPgDeclare Declare]]##, ##[[KeyPgExtern Extern]]##, ##[[KeyPgType Type]]##.

**definition = d&eacute;finition**
	Une instruction de code source (ou instructions) qui alloue de l'espace pour des donn&eacute;es ou du code. Par exemple, ##[[KeyPgSub Sub]]## d&eacute;finit une proc&eacute;dure en allouant un espace pour le code du programme qu'elle contient. Certaines d&eacute;clarations peuvent &ecirc;tre &agrave; la fois une d&eacute;claration et une d&eacute;finition. Par exemple, ##[[KeyPgDim Dim]]## d&eacute;clare et d&eacute;finit une variable.

**dereference = d&eacute;r&eacute;f&eacute;rencer**
	Le fait d'obtenir une valeur de la m&eacute;moire &agrave; une adresse donn&eacute;e. Voir ##[[KeyPgOpValueOf Op&eacute;rateur * (Valeur de)]]##, ##[[ProPgPointers Pointeurs]]##.

**descriptor = descripteur**
	Se rapporte &agrave; la structure interne des donn&eacute;es utilis&eacute;e par le compilateur et la biblioth&egrave;que d'ex&eacute;cution pour la gestion des cha&icirc;nes de longueur variable et les tableaux.

**destroy (TYPE or CLASS) = d&eacute;truire (TYPE ou CLASS)**
	Action de d&eacute;construction et de d&eacute;sallocation m&eacute;moire pour une instance d'objet. Quand un objet est d&eacute;truit, son destructeur est appel&eacute;. Cela se produit automatiquement quand un objet est hors de port&eacute;e ou lorsque ##[[KeyPgOpDelete Delete]]## (Supprimer) est appel&eacute; avec un pointeur vers un objet.

**destructor (module) = destructeur (module)**
	Un type sp&eacute;cial de proc&eacute;dure au niveau module qui est automatiquement appel&eacute;e &agrave; la cessation du programme. Voir ##[[KeyPgModuleDestructor Destructor (Module)]]##.

**destructor (TYPE or CLASS) = destructeur (TYPE or CLASS)**
	Une fonction membre sp&eacute;ciale d'un ##[[KeyPgType Type]]## ou d'une ##[[KeyPgClass Class]]## qui est appel&eacute;e quand un objet est d&eacute;truit.

**dll**
	Abr&eacute;viation de **dynamically linked library //= biblioth&egrave;que &agrave; liaison dynamique//**.

**DPMI**
	Une m&eacute;thode/un standard permettant d'ex&eacute;cuter du code en mode prot&eacute;g&eacute; (le plus souvent &eacute;galement 32 bits) sur un noyau 16-bit mode DOS r&eacute;el. Affecte uniquement la version DOS de FreeBasic. Voir aussi la ##[[FaqDOS FAQ DOS]]##.

**DJGPP**
	Un syst&egrave;me complet de d&eacute;veloppement C/C++ 32-bit pour Intel 80386 (et sup.) Fonctionnement PC sous DOS et inclut le portage de nombreux outils de d&eacute;veloppement GNU.

**dynamically linked library**
	Un fichier contenant du code ex&eacute;cutable qui est charg&eacute; au d&eacute;marrage d'une autre application. On parle aussi d' une **dll** ou une biblioth&egrave;que partag&eacute;e. Voir les ##[[ProPgSharedLibraries biblioth&egrave;ques partag&eacute;es (DLL)]]##.
	
<div style="text-align: center;">[[#Index">Retour en haut de la page]]

<div class="fb_header"><a name="E"></a> E

**enum = &eacute;num&eacute;ration**
	Un type de donn&eacute;es restreint &agrave; une s&eacute;quence de valeurs nomm&eacute;es donn&eacute;es dans un ordre particulier. Voir ##[[KeyPgEnum Enum]]##.

**executable = ex&eacute;cutable**
	Un fichier binaire qui peut &ecirc;tre ex&eacute;cut&eacute;. Il se compose des biblioth&egrave;ques et des fichiers objets li&eacute;s entre eux par l'&eacute;diteur de liens.

**exit sub/function**
	Lorsqu'elle est appel&eacute;e dans une proc&eacute;dure, quitte la proc&eacute;dure et le contr&ocirc;le revient au programme appelant.

**expression**
	Une instruction pour ex&eacute;cuter une instruction qui permettra d'&eacute;valuer/retourner une valeur.

<div style="text-align: center;">[[#Index">Retour en haut de la page]]

<div class="fb_header"><a name="F"></a> F

**field = champ**
	Se r&eacute;f&egrave;re commun&eacute;ment &agrave; un membre de donn&eacute;es dans un ##[[KeyPgType Type]]## ou une ##[[KeyPgClass Class]]##.

**file number = num&eacute;ro de fichier**
	Un entier associ&eacute; &agrave; un fichier ouvert ou un p&eacute;riph&eacute;rique comme indiqu&eacute; dans ##[[KeyPgOpen Open]]##. Toutes les op&eacute;rations ult&eacute;rieures sur le fichier ouvert ou le p&eacute;riph&eacute;rique doivent utiliser le m&ecirc;me num&eacute;ro (identificateur).

**format string = cha&icirc;ne de formatage**
	Une s&eacute;quence de caract&egrave;res qui contr&ocirc;le la fa&ccedil;on dont les donn&eacute;es devraient &ecirc;tre pr&eacute;sent&eacute;es.  Voir ##[[KeyPgFormat Format]]##, ##[[KeyPgPrintusing Print Using]]##.

**function = fonction**
	Une proc&eacute;dure d&eacute;finie en utilisant ##[[KeyPgFunction Function]]##, &eacute;ventuellement avec des param&egrave;tres et le retour d'une valeur.

**function pointer = pointeur de fonction**
	Une variable contenant l'adresse d'une fonction. L'adresse (fonction) sur laquelle la variable pointe peut &ecirc;tre modifi&eacute;e pendant l'ex&eacute;cution du programme permettant un flux dynamique programme, telles que les fonctions de rappel (call back).

<div style="text-align: center;">[[#Index">Retour en haut de la page]]

<div class="fb_header"><a name="G"></a> G

**get/put buffer = tampon get/put**
	Voir: Image Buffer (tampon image). Un tampon d'image dans le format natif de FreeBASIC.

**graphics primitive = primitives graphiques**
	Primitives graphiques est un autre terme pour les formes communes, comme les cercles et les rectangles.

**global variable = variable globale**
	Une variable qui est visible pour toutes les proc&eacute;dures dans un module, plusieurs modules, ou les deux. Voir ##[[KeyPgCommon Common]]## et ##[[KeyPgExtern Extern]]##.

**GNU**
	Un projet de collaboration de masse avec pour principal objectif de fournir un syst&egrave;me d'exploitation libre et non-propri&eacute;taire de type Unix.

**GPL**
	Abr&eacute;viation de GNU General Public License: une licence libre, copyleft pour les logiciels et autres types de r&eacute;alisation.

<div style="text-align: center;">[[#Index">Retour en haut de la page]]
	<div class="fb_header"><a name="H"></a> H

**hash table**

Une structure de donn&eacute;es qui associe des clefs avec des valeurs permettant des recherches efficaces de valeurs fond&eacute;es sur une cl&eacute; donn&eacute;e.

**header = en-t&ecirc;te**
	Quand on parle d'une collection de donn&eacute;es, c'est g&eacute;n&eacute;ralement la premi&egrave;re partie de ces donn&eacute;es qui d&eacute;crit le reste. Quand on parle de fichiers (ent&ecirc;tes), cela fait r&eacute;f&eacute;rence &agrave; un fichier &agrave; inclure. En FreeBASIC l'extension de fichier '.bi' est g&eacute;n&eacute;ralement utilis&eacute;e.

**heap = le tas**
	La zone de m&eacute;moire (stockage utilisable) fournie par la biblioth&egrave;que d'ex&eacute;cution (et le syst&egrave;me d'exploitation) &agrave; partir de laquelle le programme peut allouer dynamiquement de la m&eacute;moire. Voir ##[[KeyPgAllocate Allocate]]##.

<div style="text-align: center;">[[#Index">Retour en haut de la page]]
	<div class="fb_header"><a name="I"></a> I

**image buffer = tampon image**

Un ensemble de donn&eacute;es utilis&eacute;es pour d&eacute;crire une image, contenant des informations telles que la largeur, la hauteur, la profondeur des couleurs et les donn&eacute;es de pixels.

**include file = fichier &agrave; inclure**
	Une sorte de fichier source qui contient g&eacute;n&eacute;ralement des d&eacute;finitions de type, des d&eacute;clarations de variables et de proc&eacute;dures, auxquels un ou plusieurs autres fichiers sources pourront se r&eacute;f&eacute;rer. En g&eacute;n&eacute;ral, ces fichiers fournissent une interface publique &agrave; certains modules ou des modules, bien qu'un fichier qui est [[KeyPgInclude #include]] peut contenir n'importe quel texte que ce soit.

**initialization = initialisation**
	L'acte de donner une valeur &agrave; une variable au moment de sa cr&eacute;ation. Pour les instances d'objet, cela implique d'appeler l'un de ses constructeurs. A ne pas confondre avec l'affectation qui donne une autre valeur &agrave; une variable d&eacute;j&agrave; existante.

**instance**
	Un objet instanci&eacute; d'un ##[[KeyPgType Type]]## ou d'une ##[[KeyPgClass Class]]##.

**instantiate = instancier**
	L'acte de cr&eacute;er un objet d'un ##[[KeyPgType Type]]## ou d'une ##[[KeyPgClass Class]]##, soit directement avec ##[[KeyPgDim Dim]]##, ou indirectement, par exemple, en passant un objet par valeur &agrave; une proc&eacute;dure.

<div style="text-align: center;">[[#Index">Retour en haut de la page]]
	<div class="fb_header"><a name="J"></a> J

<div style="text-align: center;">[[#Index">Retour en haut de la page]]

<div class="fb_header"><a name="K"></a> K

<div style="text-align: center;">[[#Index">Retour en haut de la page]]

<div class="fb_header"><a name="L"></a> L

**library = biblioth&egrave;que**

Code compil&eacute; stock&eacute; dans un fichier unique qui peut &ecirc;tre utilis&eacute; au moment de l'&eacute;laboration d'autres programmes. Une biblioth&egrave;que a g&eacute;n&eacute;ralement une ou plusieurs en-t&ecirc;tes (ou fichiers include) afin de fournir toutes les d&eacute;clarations n&eacute;cessaires &agrave; l'utilisation de la biblioth&egrave;que.

**linked list (container) = liste cha&icirc;n&eacute;e (conteneur)**
	Une collection de donn&eacute;es dont les &eacute;l&eacute;ments sont g&eacute;n&eacute;ralement stock&eacute;s sur le tas. Les &eacute;l&eacute;ments de la liste cha&icirc;n&eacute;e stockent l'adresse des &eacute;l&eacute;ments qui leur sont adjacents et ainsi seul un acc&egrave;s s&eacute;quenciel (un &eacute;l&eacute;ment est accessible en suivant les liens &agrave; partir des &eacute;l&eacute;ments adjacents) est possible. Ce sch&eacute;ma fournit en temps constant une insertion des &eacute;l&eacute;ments n'importe o&ugrave; dans le conteneur et de ce fait est souvent pr&eacute;f&eacute;r&eacute; &agrave; un tableau.

**linker = &eacute;diteur de liens**
	Un programme qui combine un certain nombre de programmes pour former un ensemble complet d'instructions qui peuvent &ecirc;tre charg&eacute;es dans la m&eacute;moire de l'ordinateur et suivies par l'ordinateur.

**LGPL**
	Raccourci pour GNU Lesser General Public License. Comme la GNU GPL, mais plus permissive permet lestravaux non-(L)GPL d'&ecirc;tre li&eacute;s statiquement &agrave; un travail LGPL, &agrave; condition que le nouveau travail puisse avoir la partie sous licence LGPL r&eacute;&eacute;dit&eacute;e ou remplac&eacute;e.

**local variable = variable locale**
	Une variable qui n'est visible que dans la port&eacute;e dans laquelle elle est d&eacute;clar&eacute;e, et qui est d&eacute;truite lorsque l'ex&eacute;cution du programme quitte cette port&eacute;e.

**lock = verrouillage**
	Un m&eacute;canisme de synchronisation qui agit de telle sorte que seulement un thread ou un processus peut avoir acc&egrave;s &agrave; un objet partag&eacute;, par exemple une variable globale, un p&eacute;riph&eacute;rique ou un fichier.

<div style="text-align: center;">[[#Index">Retour en haut de la page]]
	<div class="fb_header"><a name="M"></a> M

**member = membre**

Un champ de donn&eacute;es, une proc&eacute;dure, une &eacute;num&eacute;ration, un alias de type ou toute autre chose d&eacute;clar&eacute;e dans la d&eacute;finition d'un ##[[KeyPgType Type]]## ou d'une ##[[KeyPgClass Class]]##.

**member data = donn&eacute;es membres**
	Variables associ&eacute;es &agrave; un ##[[KeyPgType Type]]## ou une ##[[KeyPgClass Class]]##. Un membre de donn&eacute;es peut &ecirc;tre statique ou non-statique.

**member function = fonction membre**
	Une proc&eacute;dure associ&eacute;e &agrave; un ##[[KeyPgType Type]]## ou une ##[[KeyPgClass Class]]##. Les fonctions membres ont des droits d'acc&egrave;s complet aux des membres de ce type ou de cette classe, et peuvent &ecirc;tre statiques ou non-statiques.

**method = m&eacute;thode**
	Voir **member function //= fonction membre//**.

**module**
	Un fichier source dans son int&eacute;gralit&eacute;, y compris tout ##fichier include## qui peut aussi bien &ecirc;tre pr&eacute;sent. Typiquement, un module est une unit&eacute; logique de code, qui contient des parties d'un programme qui se rapportent &agrave; un autre. Par exemple, si on fait un jeu, on peut s&eacute;parer les proc&eacute;dures n&eacute;cessaires &agrave; l'enregistrement des erreurs de proc&eacute;dures qui contr&ocirc;lent les graphiques dans leurs propres modules.

<div style="text-align: center;">[[#Index">Retour en haut de la page]]
	<div class="fb_header"><a name="N"></a> N

**non-static member data = donn&eacute;es membres non statiques**

Donn&eacute;es membres dont chaque instance d'un ##[[KeyPgType Type]]## ou d'une ##[[KeyPgClass Class]]## re&ccedil;oit sa propre copie.

**non-static member function = fonction membre non statique**
	Une **fonction membre** qui a une r&eacute;ference ##[[KeyPgThis This]]## implicite comme un argument.

**null**
	Une constante habituellement associ&eacute;e avec des pointeurs d&eacute;signant la valeur "rien".Cette valeur est g&eacute;n&eacute;ralement un entier '0' (z&eacute;ro) - l'indicateur de fin 'NULL ' plac&eacute; &agrave; la fin des "zstrings" est chr(0), ou asc(!"\0") - mais peut aussi &ecirc;tre d&eacute;fini comme un type pointeur, comme ##[[KeyPgCast Cast]](any ptr, 0)##.

<div style="text-align: center;">[[#Index">Retour en haut de la page]]
	<div class="fb_header"><a name="O"></a> O

**object code = code objet**

Code en format lisible par la machine qui peut &ecirc;tre ex&eacute;cut&eacute; par le processeur de votre ordinateur et le syst&egrave;me d'exploitation g&eacute;n&eacute;ralement li&eacute; avec les biblioth&egrave;ques afin de cr&eacute;er un fichier ex&eacute;cutable.

**operand = op&eacute;rande**
	L'un des arguments pass&eacute;s &agrave; un op&eacute;rateur.  Par exemple, dans l'expression ##a = b + c##, les op&eacute;randes sont ##a##, ##b## et ##c##, tandis que les op&eacute;rateurs sont ##=## et ##+##.

**operator = op&eacute;rateur**
	Une fonction ayant un ou plusieurs op&eacute;randes (arguments) et retournant une valeur. Les op&eacute;rateurs peuvent travailler sur les types int&eacute;gr&eacute;s de donn&eacute;es ou peuvent &ecirc;tre surcharg&eacute;s pour fonctionner sur des types d&eacute;finis par l'utilisateur. Voir ##[[CatPgOperators Op&eacute;rateurs]]##.

**overload = surcharge**
	Pour d&eacute;clarer une proc&eacute;dure ayant le m&ecirc;me nom qu'une autre, mais avec des param&egrave;tres diff&eacute;rents. Les fonctions libres ou au niveau du module des fonctions, peuvent &ecirc;tre surcharg&eacute;es en utilisant le mot-cl&eacute; ##[[KeyPgOverload Overload]]##. Les ##[[KeyPgType Type]]##s ou les membres de fonctions de ##[[KeyPgClass Class]]## peuvent &ecirc;tre surcharg&eacute;s par d&eacute;faut.

<div style="text-align: center;">[[#Index">Retour en haut de la page]]
	<div class="fb_header"><a name="P"></a> P

**page buffer = tampon de page**

Un tampon utilis&eacute; pour la maintenance des contenus de l'&eacute;cran avant leur affichage sur l'&eacute;cran. Lorsque de multiples tampons de pages  sont admis, une page sera visible pour les utilisateurs tandis que toutes les autres seront cach&eacute;es. Donc la page active (celle sur laquelle des modifications sont apport&eacute;es) ne doit pas &ecirc;tre la page visible pour permettre des changements sur cette page pendant l'affichage d'une autre.

**parameter = param&egrave;tre**
	Le nom utilis&eacute; par une proc&eacute;dure et qui correspond &agrave; l'argument qui est lui transmis.

**parameter list = liste des param&egrave;tres**
	La liste des param&egrave;tres, entre parenth&egrave;ses et s&eacute;par&eacute;s par des virgules, dans une d&eacute;claration de proc&eacute;dure ou de d&eacute;finition.

**PDS = Syst&egrave;me Professionnel de D&eacute;veloppement**
	Professional Development System.  Parfois appel&eacute; QB7.1.

**pitch = longueur**
	Le nombre d'octets par ligne, dans un tampon image ou un &eacute;cran. S'il n'y a pas de "remplissage" (padding) entre les lignes, alors on peut &eacute;valuer ceci ##largeur * octets_par_pixel##, mais ce n'est pas forc&eacute;ment certain. La largeur de l'&eacute;cran (pitch) peut &ecirc;tre trouv&eacute;e en utilisant ##[[KeyPgScreeninfo ScreenInfo]]##, et la largeur (pitch) du tampon image peut &ecirc;tre trouv&eacute;e en v&eacute;rifiant sa valeur  dans l'en-t&ecirc;te de l'image.

**pointer = pointeur**
	Un type de donn&eacute;es utilis&eacute; pour stocker des adresses. Le genre de pointeur qui d&eacute;termine comment les donn&eacute;es &agrave; l'adresse sont interpr&eacute;t&eacute;es lorsque le pointeur est d&eacute;r&eacute;f&eacute;renc&eacute;, ou lorsqu'il est utilis&eacute; avec ##[[KeyPgOpPtrMemberAccess Op&eacute;rateur -> (Acc&egrave;s membre par pointeur)]]##. Voir ##[[ProPgPointers Pointeurs]]##.

**preprocessor = pr&eacute;processeur**
	Le pr&eacute;processeur FreeBASIC est responsable de l'expansion des macros et en rempla&ccedil;ant les valeurs d&eacute;finies par leurs valeurs.

**procedure = proc&eacute;dure**
	Un nom g&eacute;n&eacute;rique pour tout bloc de code qui peut &ecirc;tre appel&eacute; d'un autre endroit dans un programme. Voir ##[[KeyPgSub Sub]]##, ##[[KeyPgFunction Function]]##.

**property**
	Une "property" (propri&eacute;t&eacute;) est une sorte de membre sp&eacute;cial de type/classe, interm&eacute;diaire entre un champ (ou un membre de donn&eacute;es) et une m&eacute;thode. Voir ##[[KeyPgProperty Property]]##.

**ptr**
	Abr&eacute;viation pour pointeur. Voir **pointeur**.

<div style="text-align: center;">[[#Index">Retour en haut de la page]]
	<div class="fb_header"><a name="Q"></a> Q

**queue (container) = file d'attente (conteneur)**

Une collection de donn&eacute;es qui permet le stockage et la r&eacute;cup&eacute;ration des donn&eacute;es du genre FIFO ( = First In First Out = premier entr&eacute; premier sorti). Ce qui signifie que les &eacute;l&eacute;ments sont ins&eacute;r&eacute;s &agrave; l'arri&egrave;re et retir&eacute;s &agrave; l'avant, mais accessibles &agrave; partir de chaque extr&eacute;mit&eacute;.

<div style="text-align: center;">[[#Index">Retour en haut de la page]]
	<div class="fb_header"><a name="R"></a> R

**ragged array (container) = tableau non-rectangulaire (conteneur)**

Un tableau non-rectangulaire est un tableau ayant des lignes de longueurs diff&eacute;rentes (donc le c&ocirc;t&eacute; droit n'est pas rectiligne, donc non-rectangulaire.

**real number = nombre r&eacute;el**
	Tout nombre positif ou n&eacute;gatif, y compris les fractions, les nombres irrationnels et transcendantaux (comme ##pi## ou ##e##) et z&eacute;ro. Les variables contenant un nombre r&eacute;el ont une port&eacute;e limit&eacute;e et une pr&eacute;cision fonction du nombre de bits utilis&eacute;s pour repr&eacute;senter le nombre. Voir: ##[[KeyPgSingle Single]]## et ##[[KeyPgDouble Double]]##.

**registers = registres**
	Emplacements &agrave; l'int&eacute;rieur du processeur (CPU) pour le stockage de donn&eacute;es. 80386 et les mod&egrave;les compatibles 32-bit ont les registres EAX, EBX, ECX, EDX, ESI, EDI, EBP et ESP, plus quelques registres sp&eacute;ciaux (contr&ocirc;le/test/debug). **AUCUN** rapport avec le "registre de Windows".

<div style="text-align: center;">[[#Index">Retour en haut de la page]]
	<div class="fb_header"><a name="S"></a> S
	
**scope = port&eacute;e**

Fait r&eacute;f&eacute;rence &agrave; la dur&eacute;e de vie et la visibilit&eacute; de certains composantes du programme, comme les variables ou une proc&eacute;dures. Par exemple, une variable d&eacute;finie dans une proc&eacute;dure a la port&eacute;e de la proc&eacute;dure: elle est visible dans toute la proc&eacute;dure, mais pas en-dehors du bloc de code de la proc&eacute;dure. Lorsque la proc&eacute;dure se termine, la variable est hors de port&eacute;e et n'existe plus.

**scope block = bloc de port&eacute;e**
	Un bloc de code o&ugrave; toutes les lignes de source ont la m&ecirc;me port&eacute;e. La port&eacute;e d'un bloc peut &ecirc;tre indiqu&eacute;e explicitement avec l'instruction ##[[KeyPgScope Scope]]##. La port&eacute;e des blocs peut aussi &ecirc;tre implicite lors de l'utilisation de ##[[KeyPgIfthen If..Then]]##, ##[[KeyPgFornext For..Next]]##, et autres d&eacute;clarations compos&eacute;es.

**shared library = biblioth&egrave;que partag&eacute;e**
	Une biblioth&egrave;que qui existe de fa&ccedil;on unique sur un syst&egrave;me et qui peut &ecirc;tre li&eacute;e &agrave; plusieurs ex&eacute;cutables lors de leur ex&eacute;cution. Voir ##[[ProPgSharedLibraries Les biblioth&egrave;ques partag&eacute;es (DLL)]]##.

**source code = code source**
	Le code &eacute;crit par le programmeur, sous une forme lisible par l'homme, pas encore compil&eacute;.

**stack (container) = pile (conteneur)**
	Une collection de donn&eacute;es qui permet le stockage et la r&eacute;cup&eacute;ration des donn&eacute;es du genre LIFO ( = Last In First Out = dernier entr&eacute; premier sorti). Ce qui signifie que les &eacute;l&eacute;ments ne sont ins&eacute;r&eacute;s, consult&eacute;s et retir&eacute;s que par le haut de la pile.

**statement block = bloc d'instructions**
	Une ou plusieurs lignes de code ench&acirc;ss&eacute;es dans une instruction compos&eacute;e.

**static library = biblioth&egrave;que statique**
	Une biblioth&egrave;que qui est li&eacute;e &agrave; un programme au moment de la compilation (liens). Il y a une copie de la biblioth&egrave;que pour chaque ex&eacute;cutable qui la lie &agrave; eux. Toutes les donn&eacute;es sont sp&eacute;cifiques &agrave; l'ex&eacute;cutable. Voir les ##[[ProPgStaticLibraries biblioth&egrave;ques statiques]]##.

**static member data**
	Member data that each instance of a ##[[KeyPgType Type]]## or ##[[KeyPgClass Class]]## shares. This data is defined outside of any ##[[KeyPgType Type]]## or ##[[KeyPgClass Class]]##, and takes up no space in the resulting object instance.

**static member function = fonction membre statique**
	Une **fonction membre** sans la r&eacute;f&eacute;rence implicite ##this## comme un argument. Les fonctions membres statiques peuvent &ecirc;tre appel&eacute;es normalement par l'interm&eacute;diaaire d'une variable ou directement en utilisant le nom du type et de l'op&eacute;rateur de r&eacute;solution de port&eacute;e. Voir ##[[KeyPgStaticMember Static (Membre)]]##.

**static storage = stockage statique**
	Fait r&eacute;f&eacute;rence au stockage dans les sections ##.BSS## ou ##.DATA## d'un ex&eacute;cutable. Variables, objets et tableaux avec stockage statique sont allou&eacute;s et initialis&eacute;s au moment de la compilation et d&eacute;truits (dans le cas d'objets) et d&eacute;sallou&eacute;s &agrave; la fin de l'ex&eacute;cution du programme. les variables explicitement initialis&eacute;es, les objets et les tableaux sont attribu&eacute;s &agrave; la section ##.DATA##.

**variable/objet/tableau statique**
	Une variable, objet ou un tableau avec **stockage statique**.

**sub**
	Une proc&eacute;dure d&eacute;finie &agrave; l'aide de ##[[KeyPgSub Sub]]##, ayant &eacute;ventuellement des param&egrave;tres mais ne retournant pas de valeur.

**SVN**
	Subversion. Un syst&egrave;me de contr&ocirc;le de version qui permet aux utilisateurs de garder une trace des changements apport&eacute;s aux sources et aux documents. Tous les utilisateurs peuvent consulter et t&eacute;l&eacute;charger les sources ici: [[http://fbc.svn.sourceforge.net/viewvc/fbc/trunk/">fbc.svn.sf.net/viewvc/fbc/trunk]], mais seuls les d&eacute;veloppeurs y ont acc&egrave;s en &eacute;criture. (voir aussi CVS)

**SWIG**
	Un outil qui traduit automatiquement les en-t&ecirc;tes C pour FreeBASIC (mais pas toujours parfaitement).

**symbol= symbole**
	Utilis&eacute; pour se r&eacute;f&eacute;rer &agrave; des variables, des &eacute;tiquettes, des fonctions, desm&eacute;thodes, des proc&eacute;dures ou d'autres constructions de programmation dans un programme.

<div style="text-align: center;">[[#Index">Retour en haut de la page]]
	<div class="fb_header"><a name="T"></a> T

**.TEXT section**

La partie du programme ex&eacute;cutable qui va contenir les instructions du programme et des donn&eacute;es constantes.

**this reference = la r&eacute;f&eacute;rence "this"**
	Une r&eacute;f&eacute;rence &agrave; une instance d'un ##[[KeyPgType Type]]## ou d'une ##[[KeyPgClass Class]]## qui est pass&eacute; comme un argument cach&eacute; aux fonctions membres non statiques de ce type ou de cette classe. Tout au long de la fonction membre, cette instance est appel&eacute;e &agrave; l'aide de du mot-cl&eacute; ##this##. Voir ##[[KeyPgThis This]]##.

**thread**
	Un thread d'ex&eacute;cution dans un processus (ex&eacute;cution du programme) que le temps d'ex&eacute;cution partage avec d'autres threads du m&ecirc;me processus. Voir[[CatPgThreading Threading]].

**trace**
	Pour suivre l'ex&eacute;cution d'un programme &eacute;tape par &eacute;tape, soit manuellement en examinant le code source ou plus pratiquement avec un d&eacute;bogueur.

<div style="text-align: center;">[[#Index">Retour en haut de la page]]
	<div class="fb_header"><a name="U"></a> U

**union**

Une structure qui peut &ecirc;tre utilis&eacute; pour stocker diff&eacute;rents types de variables, tels que les entiers, doubles et cha&icirc;nes de longueur fixe dans le m&ecirc;me endroit, mais un seul &agrave; la fois. Voir ##[[KeyPgUnion Union]]##.

**user defined data type = type de donn&eacute;es d&eacute;fini par l'utilisateur**
	Un type de donn&eacute;es ##[[KeyPgType Type]]##, ##[[KeyPgUnion Union]]##, ##[[KeyPgEnum Enum]]## ou ##[[KeyPgClass Class]]##.

<div style="text-align: center;">[[#Index">Retour en haut de la page]]
	<div class="fb_header"><a name="V"></a> V

**variable**

Un symbole repr&eacute;sentant de donn&eacute;es en m&eacute;moire.

**VBDOS**
	Visual BASIC pour DOS, un compilateur BASIC historique par M$ en 1992, apr&egrave;s QBASIC. La plate-forme DOS a chut&eacute; tr&egrave;s vite, VBDOS n'est jamais devenu populaire.

**vector = vecteur**
	Une s&eacute;rie d'&eacute;l&eacute;ments de donn&eacute;es en m&eacute;moire qui sont accessibles par un num&eacute;ro d'index. Semblable &agrave; un tableau, sauf que les &eacute;l&eacute;ments vectoriels ne sont pas n&eacute;cessairement tous contenus dans un seul bloc de m&eacute;moire.

<div style="text-align: center;">[[#Index">Retour en haut de la page]]
	<div class="fb_header"><a name="W"></a> W

**warning = avertissement**

Un message affich&eacute; par le compilateur lors de la compilation sugg&eacute;rant qu'il peut y avoir des probl&egrave;mes potentiels avec le code courant.

**wiki**
	Un syst&egrave;me en ligne qui fournit un ensemble de pages contenant des informations qui peuvent &ecirc;tre consult&eacute;es et modifi&eacute;es par le public. Dans ce contexte, il est g&eacute;n&eacute;ralement utilis&eacute; pour consulter la documentation en ligne sur FreeBASIC.
   
<div style="text-align: center;">[[#Index">Retour en haut de la page]]
	<div class="fb_header"><a name="X"></a> X

**x86**

D&eacute;signe le jeu d'instruction compatible avec l'architecture 80386 (et suivants) du processeur.

<div style="text-align: center;">[[#Index">Retour en haut de la page]]
	<div class="fb_header"><a name="Y"></a> Y

<div style="text-align: center;">[[#Index">Retour en haut de la page]]

<div class="fb_header"><a name="Z"></a> Z

**zstring**

Une "zstring" est par essence une cha&icirc;ne de style C standard se terminant par un caract&egrave;re nul embarqu&eacute;. Ce type de donn&eacute;e est pr&eacute;vu pour une plus grande compatibilit&eacute; avec les biblioth&egrave;ques C.

<div style="text-align: center;">[[#Index">Retour en haut de la page]]
	A zstring is in essence a standard C style string ending with an embedded null character. This data type is provided for greater compatibility with C libraries.

@@{{anchor name="Index|Back to top"}}@@

----

{{fbdoc item="back" value="DocToc|Table of Contents"}}
