{{fbdoc item="title" value="WSTRING"}}----
Type de données standard : chaînes de caractères larges (2 octets)

{{fbdoc item="syntax"}}##
	[[KeyPgDim dim]] //variable// [[KeyPgAs as]] **Wstring** * //size//
	[[KeyPgDim dim]] //variable// [[KeyPgAs as]] **Wstring** [[KeyPgPtr ptr]]
##
{{fbdoc item="desc"}}
	Une ##**WString**## est un tableau à taille fixe de caractères larges qui ne déborde jamais si la taille est connue au moment de la compilation. Il n'y a pas de descripteur, et ne peut être redimensionné sauf si c'est un pointeur et que ##[[KeyPgAllocate Allocate]]##/##[[KeyPgReallocate Reallocate]]##/##[[KeyPgDeallocate Deallocate]]## sont utilisés directement.

	La fin de la chaîne est marquée avec le caractère 0, donc ce caractère ne doit jamais faire partie du contenu de ##**WString**## ou ce contenu sera tronqué.

	Ce type existe pour supporter les alphabets avec une base non-Latin. Toutes les fonctions intrinsèques de chaînes comme ##[[KeyPgLeft Left]]## , ainsi que tout opérateur de chaîne, fontionnent aussi avec ##**WString**##.

	En plus des fichiers ASCII avec des séquences d'échappement Unicode (\u), FreeBASIC peut analyser les fichiers source UTF-8, UTF-16LE, UTF-16BE, UTF-32LE et UTF-32BE.

	Les fonctions de fichier texte de FreeBASIC peuvent lire et écrire des fichiers Unicode dans des codages différents, à condition que le codage = ##[[KeyPgEncoding encoding]]## soit spécifié lorsque le fichier est ouvert. Le texte est automatiquement converti dans le codage interne à la lecture et reconverti dans le codage du fichier lors de l'écriture. 
	
	##[[KeyPgSizeof sizeof]]##( ##**WString**## ) retourne le nombre d'octets utilisés par ##**WString**## dans la plate-forme courante.

{{fbdoc item="ex"}}
{{fbdoc item="filename" value="examples/manual/datatype/wstring.bas"}}%%(freebasic)
dim as wstring * 14 str1 => "hello, world"
print str1
print len(str1)    'returns 12, the length of the string it contains 
print sizeof(str1) 'returns 14 * sizeof(wstring), the number of bytes used by the variable
%%

{{fbdoc item="filename" value="examples/manual/datatype/wstring2.bas"}}%%(freebasic)
dim as wstring ptr str2
str2 = allocate( 14 * len(wstring) )
*str2 = "hello, world"
print *str2
print len(*str2)      'returns 12, the length of the string it points to
%%

{{fbdoc item="target"}}
	Support for wstrings relies in the C runtime library available in the platform and the internal format may vary.
		- Unicode n'est pas supporté dans le portage DOS de FreeBASIC. Dans ce portage un caractère vaut toujours 1 octet et ##[[KeyPgWstring Wstrings]]## va se comporter en tant que norme ASCII ##[[KeyPgZstring Zstrings]]##
		- Sous Win32 wstrings sont encodées en UCS-2 (UTF-16 LE) et un caractère vaut 2 octets.
		- Sous Linux wstrings sont encodées en UCS-4 et un caractère vaut 4 octets.

{{fbdoc item="lang"}}
	- Non disponible dans le dialecte //[[CompilerOptlang -lang qb]]// sauf si référencé avec l'alias ##**""__Wstring""**##.

{{fbdoc item="diff"}}
	- Nouveau pour ""FreeBASIC""

{{fbdoc item="see"}}
	- ##[[KeyPgString String]]## (data type)
	- ##[[KeyPgZstring Zstring]]## (data type)
	- ##[[KeyPgWstring Wstring]]## (data type)
	- ##[[KeyPgStringFunction String]]## (function)
	- ##[[KeyPgWstringFunction Wstring]]## (function)
	- ##[[KeyPgWspace Wspace]]##
	- ##[[KeyPgWstr Wstr]]##
	- ##[[KeyPgWchr Wchr]]##
	- ##[[KeyPgWbin Wbin]]##
	- ##[[KeyPgWhex Whex]]##
	- ##[[KeyPgWoct Woct]]##
	- ##[[KeyPgWinput Winput()]]##

{{fbdoc item="back" value="CatPgStdDataTypes|Standard Data Types"}}{{fbdoc item="back" value="CatPgString|String Functions"}}