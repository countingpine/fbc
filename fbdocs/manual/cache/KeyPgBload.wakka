{{fbdoc item="title" value="BLOAD"}}----
Charge des données arbitraires à partir d'un fichier créé avec ##[[KeyPgBsave Bsave]]##, ou un fichier image BMP compatible.

{{fbdoc item="syntax"}}##
	[[KeyPgDeclare declare]] [[KeyPgFunction function]] **Bload** ( [[KeyPgByref byref]] //filename// [[KeyPgAs as]] [[KeyPgString string]], [[KeyPgByval byval]] //dest// [[KeyPgAs as]] [[KeyPgAny any]] [[KeyPgPtr ptr]] = 0, [[KeyPgByval byval]] //pal// [[KeyPgAs as]] [[KeyPgAny any]] [[KeyPgPtr ptr]] = 0 ) [[KeyPgAs as]] [[KeyPgInteger integer]]
##
{{fbdoc item="usage"}}##
	//result// = **Bload**( //filename// [, [ //dest// ] [, //pal// ] ] )
##
{{fbdoc item="param"}}
	##//filename//##
		le nom du fichier de l'image à charger; peut inclure un chemin de fichier
	##//dest//##
		l'emplacement mémoire où charger l'image, ou nul (##0##) pour copier l'image sur la page de travail de l'écran graphique
	##//pal//##
		l'emplacement mémoire où charger la palette, ou nul (##0##) pour changer la palette courante de l'écran graphique, s'il y en a une

{{fbdoc item="section" value="Valeur renvoyée"}}
	Retourne zéro (##0##) si réussite, ou un code d'erreur différent de zéro pour indiquer un échec. //[[ProPgErrorHandling (émission d'une erreur de fonctionnement)]]//

{{fbdoc item="desc"}}
	##**BLoad**## peut être utilisé pour charger une image ou tout autre fichier de donneés créé avec ##[[KeyPgBsave Bsave]]##, et stocker ces données dans un "array" ou les copier à l'écran. Si ##//dest//## n'est pas nul (##0##), l'image est copiée sur la page active de l'écran graphique. Autrement, elle est copiée à l'adresse mémoire indiquée par ##//dest//##.

	##**BLoad**## peut charger 3 types différents de fichiers :
		- Anciens fichiers QB de données, sauvés avec ##[[KeyPgBsave BSave]]## à partir du code QB, contenant des données "raw" précédées d'un entête 7-byte, commençant par ##&HFD##, jusqu'à 64 ""KiB"" de taille
		- Nouveaux fichiers FB de données, sauvés avec ##[[KeyPgBsave Bsave]]## à partir du code FB, contenant des données "raw" précédées d'un entête 5-byte, commençant par ##&HFE##, sans limite de 64 ""KiB""
		- Fichiers image BMP, supportant un sous-ensemble de validité ("Windows") .Fichiers BMP, commençant par "BM", sauvés avec ##[[KeyPgBsave Bsave]]## à partir du code FB, ou créés / sauvés dans un format compatible en utilisant un éditeur / convertisseur graphique.
	Les fichiers QB-like de données et les fichiers BMP sont convertis en un format image FB-compatible quand ils sont ouverts.

	Fichiers image avec une résolution de 8-bit maxi par pixel contenant une palette décrivant les valeurs de couleurs utilisées dans l'image. Si ##//pal//## est non nul (##0##), la palette est copiée en mémoire à partir de l'adresse spécifiée. Par ailleurs, si l'écran graphique utilise une palette celle-ci est modifiée pour correspondre à celle de l'image.

	Lors de l'utilisation d'un des 2 formats "non-BMP" de fichiers pour sauver une image, le fichier image doit avoir été créé avec ##[[KeyPgBsave Bsave]]## dans le même mode graphique écran utilisé pour son chargement. Cette restriction ne s'applique pas lors de l'utilisation d'un fichier de format BMP. 

	Lors du chargement d'un fichier BMP en utilisant ##**BLoad**##,  l'image doit être true-color (15-, 16-, 24- or 32-bits par pixel) ou palettisée/indexée (8-bit ou moins). Les données de l'image seront converties dans le format pixel approprié pour la profondeur de couleur courante, sauf en cas de true-color pas de réduction à une image palettisée. ##**BLoad**## ne supporte pas les fichiers BMP avec compression RLE ou les autres types de fichiers image (PNG, JPG, GIF, ...).  ##**BLoad**## chargera les information du canal alpha, si elles existent, à partir de fichiers BMP 32-bit avec des entêtes de fichier ##BITMAPV4HEADER## ou ##BITMAPV5HEADER##.

**Erreurs de fonctionnement:**
	##**BLoad**## produit une des [[ProPgErrorHandling erreurs de fonctionnement]] suivantes :

	//(##1##) Illegal function call//
		- ##//dest//## n'est pas précisé ou null (##0##), aucun écran graphique n'existe.
		- Le Bitmap utilise un type de compression de fichier BMP non supporté (##BI_RLE4##, ##BI_RLE8##)
		- Le Bitmap est true-color (16, 24, or 32 bits per pixel) et l'écran graphique utilise une palette (8 bits par pixel ou moins).
	//(##2##) File not found//
		- Le fichier ##//filename//## ne peut être trouvé.
	//(##3##) File I/O error//
		- Le fichier n'est pas d'un type supporté 
		- Une erreur générale de lecture est survenue.

~&//Note: Quand vous utilisez ##**BLoad**## pour charger un fichier BMP dans un tampon image, les dimensions originales de cette image ne sont pas changées.  Si vous voulez que le tampon image ait les mêmes dimensions que le fichier BMP, vous devez découvrir celles-ci avant, et créer vous-même une image de la bonne taille.  Voir ci-dessous un exemple expliquant comment procéder.//

{{fbdoc item="ex"}}
{{fbdoc item="filename" value="examples/manual/gfx/bload.bas"}}%%(freebasic)
'Charge un graphique dans page travail courante
SCREEN 18, 32
cls
bload "picture.bmp"
sleep
%%

{{fbdoc item="filename" value="examples/manual/gfx/bload2.bas"}}%%(freebasic)
'Charge un bitmap 48x48 dans un array
Screen 18, 32
dim myImage as any ptr = imagecreate( 48, 48 )
bload "picture.bmp", myImage
put (10,10), myImage
imagedestroy( myImage )
sleep
%%

{{anchor name="bmp_load"}}
{{fbdoc item="filename" value="examples/manual/gfx/bload3.bas"}}%%(freebasic)
'' Une fonction qui crée un tampon image avec les mêmes
'' dimensions que l' image BMP, et charge un fichier dedans. 

const NULL as any ptr = 0

function bmp_load( byref filename as const string ) as any ptr

	dim as integer filenum, bmpwidth, bmpheight
	dim as any ptr img

	'' ouvre fichier BMP
	filenum = freefile()
	if open( filename for binary access read as #filenum ) <> 0 then return NULL

	'' retrouve dimensions BMP
		get #filenum, 19, bmpwidth
		get #filenum, 23, bmpheight

	close #filenum

	'' crée image avec dimensions BMP
	img = imagecreate( bmpwidth, abs(bmpheight) )

	if img = NULL then return NULL

	'' charge fichier BMP dans tampon image
	if bload( filename, img ) <> 0 then imagedestroy( img ): return NULL

	return img

end function



dim as any ptr img

screenres 640, 480, 32

img = bmp_load( "picture.bmp" )

if img = NULL then
	print "bmp_load failed"

else

	put (10, 10), img

	imagedestroy( img )

end if

sleep%%
{{fbdoc item="diff"}}
	- Le support du chargement des fichiers BMP est nouveau pour FreeBASIC.
	- La récupération de la palette à partir des fichiers BMP est nouveau pour ""FreeBASIC"".
	- Pour les fichiers non-BMP, FB utilise un format de fichier différent, sans limite 64 KiB, et non-supporté par QB.
{{fbdoc item="see"}}
	- ##[[KeyPgBsave Bsave]]##
	- ##[[KeyPgPalette Palette]]##
	- ##[[KeyPgImagecreate ImageCreate]]##
	- ##[[KeyPgImageDestroy ImageDestroy]]##
	- [[GfxInternalFormats Formats graphiques internes]]

{{fbdoc item="back" value="CatPgGfx2D|2D Drawing Functions"}}