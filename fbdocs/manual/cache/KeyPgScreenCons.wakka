{{fbdoc item="title" value="SCREEN (Console)"}}----
Renvoie le caractère ou l'attribut de couleur à la position donnée

{{fbdoc item="syntax"}}##
	[[KeyPgDeclare declare]] [[KeyPgFunction function]] **Screen** ( [[KeyPgByval byval]] row [[KeyPgAs as]] [[KeyPgInteger integer]], [[KeyPgByval byval]] column [[KeyPgAs as]] [[KeyPgInteger integer]], [[KeyPgByval byval]] colorflag [[KeyPgAs as]] [[KeyPgInteger integer]] = 0 ) [[KeyPgAs as]] [[KeyPgInteger integer]]
##
{{fbdoc item="usage"}}##
	//result// = **Screen**( //row//, //column// [, //colorflag// ] )
##
{{fbdoc item="param"}}
	##//row//##
		décalage vertical depuis le coin en haut à gauche de la console (base = 1).
	##//column//##
		décalage horizontal depuis le coin en haut à gauche de la console (base = 1).
	##//colorflag//##
		Si égal à 0, le code [[CptAscii ASCII]] est renvoyé, uatrement c'est l'attribut de couleur qui est renvoyé.  S'il est omis, sa valeur par défaut est 0.

{{fbdoc item="ret"}}
	Le code [[CptAscii ASCII]] ou l'attribut de couleur du caractère.
	A ce moment (v0.18.5), si les coordonnées sont hors de l'écran, aucun no d'erreur n'est attribué et la valeur retournée n'est pas fiable.

{{fbdoc item="desc"}}
	##**Screen**## rtourne le caractère ou l'attribut de couleur trouvé à la position donnée d'une sortie console. Fonctionne en mode console ou graphique.
	
	Le format de l'attribut de couleur dépend de la profondeur de la couleur :
	
	Si le type de couleur est une palette de 4 bits par pixel (comme la console Win32), alors l'attribut de couleur est une valeur 8-bit, dans laquelle les 4 bits de poids fort correspondent à la couleur d'arrière-plan et les 4 bits de poids faible correspondent à la couleur de premier-plan (caractère).
	
	Si le type de couleur est une palette de 8 bits par pixel, alors l'attribut de couleur est une valeur 16-bit, dans laquelle l'octet de poids fort correspond à la couleur d'arrière-plan et l'octet de poids faible à la couleur de premier-plan.

	Si nous sommes en ##//pleine couleur//##, alors l'attribut de couleur est un entier 32-bit, correspondant à une unique valeur de couleur.  Si ##//colorflag//## est à 1, alors c'est la couleur d'arrière-plan qui est renvoyée; si ##//colorflag//## est à 2, alors c'est la couleur de premier-plan qui est renvoyée.
	
	
	Les valeurs de couleur pour une palette standard de 16 couleurs sont :

		{{table columns="4" cellpadding="2" cells="Valeur;Couleur;Valeur;Couleur;0;Noir;8;Gris;1;Bleu;9;Bleu Clair;2;Vert;10;Vert Clair;3;Cyan;11;Cyan Clair;4;Rouge;12;Rouge Clair;5;Magenta;13;Rose;6;Marron;14;Jaune;7;Blanc;15;Blanc Brillant"}}

{{fbdoc item="ex"}}
{{fbdoc item="filename" value="examples/manual/console/screen-func.bas"}}%%(freebasic)
dim character_ascii_value as integer
dim attribute as integer
dim background as integer
dim cell_color as integer
dim row as integer, col as integer

character_ascii_value = Screen( row, col )
attribute = Screen( row, col, 1 )
background = attribute shr 4
cell_color = attribute and &hf
%%

{{fbdoc item="filename" value="examples/manual/gfx/screen-func1.bas"}}%%(freebasic)
'' ouvre un ecran graphique avec 4 bits par pixel
'' (alternativement, omettez cette ligne pour utiliser la console)
screenres 320, 200, 4

'' affiche un caractere
color 7, 1
print "A"

dim as uinteger char, col, fg, bg

'' obtient la valeur ASCII du caractere que nous'avons affiche
char = screen(1, 1, 0)

''obtient les attributs de couleur
col = screen(1, 1, 1)
fg = col and &HF
bg = (col shr 4) and &HF

print using "ASCII value: ### (""!"")"; char; chr(char)
print using "Foreground color: ##"; fg
print using "Background color: ##"; bg
sleep
%%

{{fbdoc item="filename" value="examples/manual/gfx/screen-func2.bas"}}%%(freebasic)
'' ouvre ecran graphique avec 8 bits par pixel
screenres 320, 200, 8

'' affiche un caractere
color 30, 16
print "Z"

dim as uinteger char, col, fg, bg

'' obtient la valeur ASCII du caractere que nous'avons affiche
char = screen(1, 1, 0)

''obtient les attributs de couleur
col = screen(1, 1, 1)
fg = col and &HFF
bg = (col shr 8) and &HFF

print using "ASCII value: ### (""!"")"; char; chr(char)
print using "Foreground color: ###"; fg
print using "Background color: ###"; bg
sleep
%%

{{fbdoc item="filename" value="examples/manual/gfx/screen-func3.bas"}}%%(freebasic)
'' ouvre ecran graphique pleine-couleur
screenres 320, 200, 32

'' affiche un caractere
color rgb(255, 255, 0), rgb(0, 0, 255) 'jaune sur bleu
print "M"

dim as integer char, fg, bg

'' obtient la valeur ASCII du caractere que nous'avons affiche
char = screen(1, 1, 0)

''obtient les attributs de couleur
fg = screen(1, 1, 1)
bg = screen(1, 1, 2)

print using "ASCII value: ### (""!"")"; char; chr(char)
print using "Foreground color: &"; hex(fg, 8)
print using "Background color: &"; hex(bg, 8)
sleep
%%
{{fbdoc item="target"}}
	- Dans la version Linux, la valeur retournée peut différer du caractère affiché à l'écran.  Par exemple, les codes de contrôle non-imprimables - comme le caractère ##LF## (##10##) qui apparaî implicitement à la fin d'une ligne de texte affiché par ##[[KeyPgPrint Print]]## - peuvent être utilisés à la place du caractère initial.

{{fbdoc item="diff"}}
	- Dans QB ##**Screen**## déclanche une erreur si les coordonnées sont hors de l'écran.

{{fbdoc item="see"}}
	- ##[[KeyPgScreengraphics Screen (Graphics)]]##
	- ##[[KeyPgColor Color]]##

{{fbdoc item="back" value="CatPgConsole|Console Functions"}}