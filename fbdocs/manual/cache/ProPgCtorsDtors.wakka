{{fbdoc item="title" value="Constructors and Destructors"}}----
En charge de la cr&eacute;ation et la destruction d'objets.

**[[#OVERVIEW">Vue d'ensemble]]**
**[[#DECLARATION">D&eacute;claration]]**
**[[#DEFCTOR">Les constructeurs par d&eacute;faut]]**
**[[#COPYCTOR">Constructeurs de copie]]**
**[[#CALLCTOR">Appel des constructeurs]]**

**[[#COMPCTORDTOR">Constructeurs et destructeurs fournis par le compilateur]]**
	<a name="OVERVIEW"></a>{{fbdoc item="section" value="Vue d'ensemble

	Les constructeurs et les destructeurs sont responsables, respectivement, de la cr&eacute;ation et de la destruction d'objets. En g&eacute;n&eacute;ral, les constructeurs donnent aux objets leur &eacute;tat initial, c'est &agrave; dire qu'ils donnent des valeurs significatives aux donn&eacute;es membres de leurs objets. Les destructeurs accomplissent la fonction inverse; ils s'assurent que les ressources qui appartiennent aux objets sont correctement lib&eacute;r&eacute;es.

Simplement, les constructeurs sont des membres sp&eacute;ciaux des proc&eacute;dures qui sont appel&eacute;s lorsqu'un objet est cr&eacute;&eacute; et les destructeurs sont des membres sp&eacute;ciaux des proc&eacute;dures qui sont appel&eacute;s lorsqu'un objet est d&eacute;truit. Les constructeurs et destructeurs sont appel&eacute;s automatiquement par le compilateur chaque fois qu'un objet est cr&eacute;&eacute; ou d&eacute;truit, ou d&eacute;truit explicitement lors de l'utilisation des mots-cl&eacute;s ##[[KeyPgDim Dim]]## ou ##[[KeyPgOpNew New]]## ou ou implicitement par le passage d'un objet par valeur &agrave; une proc&eacute;dure ou via un objet sortant du champ d'application.
	<a name="DECLARATION"></a>

	{{fbdoc item="section" value="D&eacute;claration

Les constructeurs et les destructeurs sont d&eacute;clar&eacute;s comme membres de proc&eacute;dures, mais avec les mots-clefs ##[[KeyPgConstructor Constructor]]## ou ##[[KeyPgDestructor Destructor]]## &agrave; la place de ##[[KeyPgMemberSub Sub]]## ou ##[[KeyPgMemberFunction Function]]## et sans nom. De m&ecirc;me, ils sont d&eacute;finis avec seulement le nom du ##[[KeyPgType Type]]## ou de la ##[[KeyPgClass Class]]## dans le(la)quel(le) ils sont d&eacute;clar&eacute;s.
	Un ##[[KeyPgType Type]]## ou une ##[[KeyPgClass Class]]## peuvent avoir plusieurs constructeurs, mais seulement un destructeur.

<a name="DEFCTOR"></a>
	{{fbdoc item="section" value="Les constructeurs par d&eacute;faut

	Les constructeurs par d&eacute;faut sont des constructeurs qui soit n'ont pas de param&egrave;tres, soit la totalit&eacute; de leurs param&egrave;tres ont une valeur par d&eacute;faut. Ils sont appel&eacute;s quand un objet est d&eacute;fini, mais pas initialis&eacute;, ou cr&eacute;&eacute;s dans le cadre d'un tableau, avec les mots-clefs ##[[KeyPgDim Dim]]##, ##[[KeyPgRedim ReDim]]## ou ##[[KeyPgOpNew New]]##[]. Le premier constructeur d&eacute;clar&eacute; dans l'exemple ci-dessous est un constructeur par d&eacute;faut.

<a name="COPYCTOR"></a>
	{{fbdoc item="section" value="Constructeurs de copie

	Les constructeurs de copie sont des constructeurs appel&eacute;s quand un objet est cr&eacute;&eacute;, ou clon&eacute;, &agrave; partir d'un autre objet du m&ecirc;me type (ou d'un objet qui peut &ecirc;tre converti dans ce type). Cela se produit explicitement lors de l'initialisation d'un objet avec un autre objet ou implicitement en passant par valeur un objet &agrave; une proc&eacute;dure. Les constructeurs de copie sont d&eacute;clar&eacute;s comme ayant un param&egrave;tre: un objet du m&ecirc;me type pass&eacute; par r&eacute;f&eacute;rence.

Les constructeurs de copie ne sont appel&eacute;s que lors de la cr&eacute;ation et l'initialisation d'instances d'objets. L'affectation &agrave; des objets est assur&eacute;e par ##[[KeyPgOperator Member Operator Let]]##.
<a name="CALLCTOR"></a>
	{{fbdoc item="section" value="Appel des constructeurs
	Contrairement aux autres membres des proc&eacute;dures, les constructeurs ne peuvent pas &ecirc;tre appel&eacute;s directement &agrave; partir d'une instance d'objet. Au lieu de cela, un constructeur est pr&eacute;cis&eacute; dans une instruction ##[[KeyPgDim Dim]]## avec un initialiseur ou sans ou dans une instruction ##[[KeyPgOpNew New]]## avec ou sans arguments.
	Lorsque vous sp&eacute;cifiez un initialiseur pour un objet, le nom du type suivi par tous les arguments qu'il exige est utilis&eacute;.
	%%(freebasic)

	Type foo
	'' Declare a default ctor, copy ctor and normal ctor

	Declare Constructor
	Declare Constructor (ByRef As foo)
Declare Constructor (As Integer)

'' Declare a destructor
Declare Destructor
	ints As Integer Ptr
	numints As Integer
End Type

'' Define a constructor that creates 100 integers
Constructor foo
	ints = New Integer(100)
	numints = 100
end constructor

'' Define a constructor that copies the integers from another object
Constructor foo (ByRef x As foo)
	ints = New Integer(x.numints)
	numints = x.numints
end constructor

'' Define a constructor that creates some integers based on a parameter
Constructor foo (n As Integer)
	ints = New Integer(n)
numints = n

End Constructor
	'' Define a destructor that destroys those integers
	Destructor foo
	Delete[] ints

	End Destructor
	Scope
	'' calls foo's default ctor

	Dim a As foo
	Dim x As foo Ptr = New foo
	'' calls foo's copy ctor

	Dim b As foo = a
	Dim y As foo Ptr = New foo(*x)
	'' calls foo's normal ctor
	Dim c As foo = foo(20)
Dim z As foo Ptr = New foo(20)
'' calls foo's dtor

Delete x
	Delete y

	Delete z

	End Scope '' <- a, b and c are destroyed here as well

	%%

<a name="COMPCTORDTOR"></a>