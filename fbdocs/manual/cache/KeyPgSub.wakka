{{fbdoc item="title" value="SUB"}}----
D&eacute;finit une proc&eacute;dure

{{fbdoc item="syntax"}}##
	[[[KeyPgPublic Public]]|[[KeyPgPrivate Private]]] **Sub** //identifier// [[[KeyPgCdecl cdecl]]|[[KeyPgPascal pascal]]|[[KeyPgStdcall stdcall]]] [[[KeyPgOverload Overload]]] [[[KeyPgAlias Alias]] //external_identifier//] [( [//parameter_list//] )] [[[KeyPgStatic Static]]]
		//statements//
		...
		[[[KeyPgReturn Return]]]
		...
	[[KeyPgEndblock End]] Sub

	[[[KeyPgPublic Public]]] **Sub** //identifier// [[[KeyPgCdecl CDecl]]|[[KeyPgPascal Pascal]]|[[KeyPgStdcall StdCall]]] [[[KeyPgOverload Overload]]] [[[KeyPgAlias Alias]] //external_identifier//] [()] [[[KeyPgModuleConstructor Constructor]]|[[KeyPgModuleDestructor Destructor]]] [[[KeyPgStatic Static]]]
		//statements//
		...
		[[[KeyPgReturn Return]]]
		...
	[[KeyPgEndblock End]] Sub
##
{{fbdoc item="param"}}
		##//identifier//##: le nom du sous-programme
		##//external_identifier//##: nom visible de l'ext&eacute;rieur (&agrave; l'&eacute;diteur de liens) entre guillemets
		##//parameter_list//##: parameter[, parameter[, ...]]
		##//parameter//##: ##[[[KeyPgByref ByRef]]|[[KeyPgByval ByVal]]] //identifier// [[[KeyPgAs As]] //type//] [= //default_value//]##
			##//identifier//##: le nom de la variable r&eacute;f&eacute;renc&eacute;e dans la sous-routine
			##//type//##: le type de la variable
			##//default_value//##: la valeur de l'argument si rien n'est sp&eacute;cifi&eacute; dans l'appel
		##//statements//##: une ou plusieurs d&eacute;clarations qui composent le corps du sous-programme

{{fbdoc item="desc"}}
	Un sous-programme est un bloc de code qui peut &ecirc;tre appel&eacute; &agrave; tout moment &agrave; partir d'un programme.  Ce code peut &ecirc;tre ex&eacute;cut&eacute; plusieurs fois, et les sous-programmes fournissent un pr&eacute;cieux moyen de simplifier le code en rempla&ccedil;ant ces blocs de code par un unique sous-programme.  Un sous-programme permet aussi &agrave; un utilisateur d'&eacute;tendre le langage FreeBasic en lui fournissant des commandes personnalis&eacute;es.  Beaucoup de fonctions int&eacute;gr&eacute;es dans FreeBASIC sont simplement des sous-programmes faisant partie d'une "biblioth&egrave;que d'ex&eacute;cution" li&eacute;e par d&eacute;faut.

	Le mot-clef ##**Sub**## marque le d&eacute;but d'un sous-programme et sa fin est marqu&eacute;e par ##**End Sub**##.  Le param&egrave;tre "name = nom" est le nom sous lequel ce sous-programme est appel&eacute;.  Par exemple, si la d&eacute;claration est "##**Sub**...**End Sub**##", l'utilisateur peut ex&eacute;cuter le code entre "##**Sub** foo##" et "##**End Sub**##" en utilisant "##foo##" comme une d&eacute;claration.  Ce code est ex&eacute;cut&eacute; est ind&eacute;pendamment du code qui appelle le sous-programme, de sorte que tous les noms de variables, sauf si elles sont partag&eacute;es (shared), ne sont pas disponibles pour le sous-programme.  Des valeurs peuvent, toutefois, &ecirc;tre pass&eacute;es en utilisant des param&egrave;tres.

	Les param&egrave;tres sont les arguments pass&eacute;s &agrave; une d&eacute;claration.  Par exemple, si un utilisateur ex&eacute;cute une instruction comme "##[[KeyPgPrint Print]] 4##", la valeur "4" est pass&eacute;e &agrave; la fonction "##[[KeyPgPrint Print]]##".  Les param&egrave;tres qui doivent &ecirc;tre transmis &agrave; un sous-programme sont fournis par un ou plusieurs arguments param&egrave;tres dans le mot-cl&eacute; "##**Sub**##".  Cr&eacute;er un sous-programme avec "##**Sub** mysub(foo, bar)...**End Sub**##", permet au code entre "##**Sub**##" et "##**End Sub**##" de d&eacute;signer le premier argument pass&eacute; en tant que "foo" et le deuxi&egrave;me argument pass&eacute; en tant que "bar".  Si un param&egrave;tre est donn&eacute; avec une valeur par d&eacute;faut, ce param&egrave;tre est facultatif.

	Les param&egrave;tres doivent &eacute;galement avoir un type, de la forme "##//parameter// As //type//##".  S'il est omis, ##//type//## sera ##[[KeyPgInteger Integer]]##.  Une valeur pass&eacute;e DOIT &ecirc;tre du type sp&eacute;cifi&eacute;.

	Un sous-programme peut &eacute;galement sp&eacute;cifier la mani&egrave;re dont les param&egrave;tres sont pass&eacute;s, soit "##[[KeyPgByref ByRef = par ref&eacute;rence]]##", soit "##[[KeyPgByval ByVal = par valeur]]##", comme indiqu&eacute; dans la d&eacute;finition de syntaxe.  Si un param&egrave;tre est "##[[KeyPgByref ByRef]]##", le nom du param&egrave;tre devient litt&eacute;ralement une r&eacute;f&eacute;rence &agrave; la variable d'origine transmise au sous-programme.  Toutes les modifications apport&eacute;es &agrave; cette variable seront refl&eacute;t&eacute;es &agrave; l'ext&eacute;rieur du sous-programme.  Si un param&egrave;tre est pass&eacute; "##[[KeyPgByval ByVal]]##", toutefois, la valeur d'une variable pass&eacute;e est copi&eacute;e dans une nouvelle variable et toute modification apport&eacute;e &agrave; celle-ci n'affectera pas l'original.  (Note: cela ne s'applique pas actuellement aux ##[[KeyPgString String]]##s et "##[[KeyPgByval ByVal]]##" doit &ecirc;tre &eacute;vit&eacute;e avec elles pour le moment.)

	Le sp&eacute;cificateur ##[[KeyPgStatic Static]]## indique que les valeurs de toutes les variables locales d&eacute;finies dans le sous-programme doivent &ecirc;tre pr&eacute;serv&eacute;es entre les appels.  Pour sp&eacute;cifier des variables locales statiques voir le mot-cl&eacute; ##[[KeyPgStatic Static]]##.

	Sub est identique &agrave; ##[[KeyPgFunction Function]]##, sauf qu'il ne permet pas de retourner une valeur.

	La seconde syntaxe d&eacute;finit soit un constructeur, soit destructeur en utilisant les mots-clefs ##[[KeyPgModuleConstructor Constructor]]## et ##[[KeyPgModuleDestructor Destructor]]##, respectivement.  Les constructeurs de sous-programmes sont ex&eacute;cut&eacute;s avant la premi&egrave;re ligne de code du module, tandis que les destructeurs sont ex&eacute;cut&eacute;s &agrave; la sortie du module. Notez le sp&eacute;cificateur d'acc&egrave;s public et la liste des param&egrave;tres vide pour les constructeurs et destructeurs.

{{fbdoc item="ex"}}
{{fbdoc item="filename" value="examples/manual/procs/sub-1.bas"}}%%(freebasic)
'' Example of writing colored text using a sub:

sub PrintColoredText( byval colour as integer, byref text as string )
   color colour
   print text
end sub

   PrintColoredText( 1, "blue" )        '' a few colors
   PrintColoredText( 2, "green" )
   PrintColoredText( 4, "red" )
   print
   
   dim i as integer
   for i = 0 to 15                        '' all 16 colors
	  PrintColoredText( i, ("color " & i) )
   next i
%%
{{fbdoc item="filename" value="examples/manual/procs/sub-2.bas"}}%%(freebasic)
' The following demonstrates optional parameters.

Sub TestSub(P As String = "Default")
	Print P
End Sub

TestSub "Testing:"
TestSub
%%

{{fbdoc item="lang"}}
	- Les dialectes //[[CompilerOptlang -lang qb]]// et //[[CompilerOptlang -lang fblite]]// conservent &agrave; la Convention QB: les param&egrave;tres sont ##[[KeyPgByref ByRef]]## par d&eacute;faut.
	- Dans le dialecte //[[CompilerOptlang -lang fb]]//, les param&egrave;tres num&eacute;riques sont pass&eacute;s ##[[KeyPgByval ByVal]]## par d&eacute;faut.  Les ##[[KeyPgString String]]##s et types d&eacute;finis par l'utilisateur sont pass&eacute;s ##[[KeyPgByref ByRef]]## par d&eacute;faut.

{{fbdoc item="diff"}}
	- Les sp&eacute;cificateurs d'acc&egrave;s "Public" et "Private" sont nouveaux pour FreeBASIC.
	- Les constructeurs de sous-programmes sont nouveaux pour FreeBASIC.

{{fbdoc item="see"}}
	- ##[[KeyPgDeclare Declare]]##
	- ##[[KeyPgFunction Function]]##
	- ##[[KeyPgExit Exit]]##
	- ##[[KeyPgPublic Public]]##
	- ##[[KeyPgPrivate Private]]##
	- ##[[KeyPgStatic Static]]##

{{fbdoc item="back" value="CatPgProcedures|Procedures"}}
   
