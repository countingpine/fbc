{{fbdoc item="title" value="SUB"}}----
Définit une procédure

{{fbdoc item="syntax"}}##
	[[[KeyPgPublic Public]]|[[KeyPgPrivate Private]]] **Sub** //identifier// [[[KeyPgCdecl CDecl]]|[[KeyPgPascal Pascal]]|[[KeyPgStdcall StdCall]]] [[[KeyPgOverload Overload]]] [[[KeyPgAlias Alias]] //external_identifier//] [( [//parameter_list//] )] [[[KeyPgStatic Static]]]
		//statements//
		...
		[[[KeyPgReturn Return]]]
		...
	[[KeyPgEndblock End]] Sub

	[[[KeyPgPublic Public]]] **Sub** //identifier// [[[KeyPgCdecl CDecl]]|[[KeyPgPascal Pascal]]|[[KeyPgStdcall StdCall]]] [[[KeyPgOverload Overload]]] [[[KeyPgAlias Alias]] //external_identifier//] [()] [[[KeyPgModuleConstructor Constructor]]|[[KeyPgModuleDestructor Destructor]]] [[[KeyPgStatic Static]]]
		//statements//
		...
		[[[KeyPgReturn Return]]]
		...
	[[KeyPgEndblock End]] Sub
##
{{fbdoc item="param"}}
		##//identifier//##: le nom du sous-programme
		##//external_identifier//##: nom visible de l'extérieur (à l'éditeur de liens) entre guillemets
		##//parameter_list//##: parameter[, parameter[, ...]]
		##//parameter//##: ##[[[KeyPgByref ByRef]]|[[KeyPgByval ByVal]]] //identifier// [[[KeyPgAs As]] //type//] [= //default_value//]##
			##//identifier//##: le nom de la variable référencée dans la sous-routine
			##//type//##: le type de la variable
			##//default_value//##: la valeur de l'argument si rien n'est spécifié dans l'appel
		##//statements//##: une ou plusieurs déclarations qui composent le corps du sous-programme

{{fbdoc item="desc"}}
	Un sous-programme est un bloc de code qui peut être appelé à tout moment à partir d'un programme.  Ce code peut être exécuté plusieurs fois, et les sous-programmes fournissent un précieux moyen de simplifier le code en remplaçant ces blocs de code par un unique sous-programme.  Un sous-programme permet aussi à un utilisateur d'étendre le langage ""FreeBASIC"" en lui fournissant des commandes personnalisées.  Beaucoup de fonctions intégrées dans ""FreeBASIC"" sont simplement des sous-programmes faisant partie d'une "bibliothèque d'exécution" liée par défaut.

	Le mot-clef ##**Sub**## marque le début d'un sous-programme et sa fin est marquée par ##**End Sub**##.  Le paramètre "name = nom" est le nom sous lequel ce sous-programme est appelé.  Par exemple, si la déclaration est "##**Sub**...**End Sub**##", l'utilisateur peut exécuter le code entre "##**Sub** foo##" et "##**End Sub**##" en utilisant "##foo##" comme une déclaration.  Ce code est exécuté est indépendamment du code qui appelle le sous-programme, de sorte que tous les noms de variables, sauf si elles sont partagées (shared), ne sont pas disponibles pour le sous-programme.  Des valeurs peuvent, toutefois, être passées en utilisant des paramètres.

	Les paramètres sont les arguments passés à une déclaration.  Par exemple, si un utilisateur exécute une instruction comme "##[[KeyPgPrint Print]] 4##", la valeur "4" est passée à la fonction "##[[KeyPgPrint Print]]##".  Les paramètres qui doivent être transmis à un sous-programme sont fournis par un ou plusieurs arguments paramètres dans le mot-clé "##**Sub**##".  Créer un sous-programme avec "##**Sub** mysub(foo, bar)...**End Sub**##", permet au code entre "##**Sub**##" et "##**End Sub**##" de désigner le premier argument passé en tant que "foo" et le deuxième argument passé en tant que "bar".  Si un paramètre est donné avec une valeur par défaut, ce paramètre est facultatif.

	Les paramètres doivent également avoir un type, de la forme "##//parameter// As //type//##".  S'il est omis, ##//type//## sera ##[[KeyPgInteger Integer]]##.  Une valeur passée DOIT être du type spécifié.

	Un sous-programme peut également spécifier la manière dont les paramètres sont passés, soit "##[[KeyPgByref ByRef = par reférence]]##", soit "##[[KeyPgByval ByVal = par valeur]]##", comme indiqué dans la définition de syntaxe.  Si un paramètre est "##[[KeyPgByref Byref]]##", le nom du paramètre devient littéralement une référence à la variable d'origine transmise au sous-programme.  Toutes les modifications apportées à cette variable seront reflétées à l'extérieur du sous-programme.  Si un paramètre est passé "##[[KeyPgByval Byval]]##", toutefois, la valeur d'une variable passée est copiée dans une nouvelle variable et toute modification apportée à celle-ci n'affectera pas l'original.  (Note: cela ne s'applique pas actuellement aux ##[[KeyPgString String]]##s et "##[[KeyPgByval Byval]]##" doit être évitée avec elles pour le moment.)

	Le spécificateur ##[[KeyPgStatic Static]]## indique que les valeurs de toutes les variables locales définies dans le sous-programme doivent être préservées entre les appels.  Pour spécifier des variables locales statiques voir le mot-clé ##[[KeyPgStatic Static]]##.

	Sub est identique à ##[[KeyPgFunction Function]]##, sauf qu'il ne permet pas de retourner une valeur.

	La seconde syntaxe définit soit un constructeur, soit destructeur en utilisant les mots-clefs ##[[KeyPgModuleConstructor Constructor]]## et ##[[KeyPgModuleDestructor Destructor]]##, respectivement.  Les constructeurs de sous-programmes sont exécutés avant la première ligne de code du module, tandis que les destructeurs sont exécutés à la sortie du module. Notez le spécificateur d'accès public et la liste des paramètres vide pour les constructeurs et destructeurs.

{{fbdoc item="ex"}}
{{fbdoc item="filename" value="examples/manual/procs/sub-1.bas"}}%%(freebasic)
'' Example of writing colored text using a sub:

sub PrintColoredText( byval colour as integer, byref text as string )
   color colour
   print text
end sub

   PrintColoredText( 1, "blue" )        '' a few colors
   PrintColoredText( 2, "green" )
   PrintColoredText( 4, "red" )
   print
   
   dim i as integer
   for i = 0 to 15                        '' all 16 colors
	  PrintColoredText( i, ("color " & i) )
   next i
%%
{{fbdoc item="filename" value="examples/manual/procs/sub-2.bas"}}%%(freebasic)
' The following demonstrates optional parameters.

Sub TestSub(P As String = "Default")
	Print P
End Sub

TestSub "Testing:"
TestSub
%%

{{fbdoc item="lang"}}
	- Les dialectes //[[CompilerOptlang -lang qb]]// et //[[CompilerOptlang -lang fblite]]// conservent à la Convention QB: les paramètres sont ##[[KeyPgByref Byref]]## par défaut.
	- Dans le dialecte //[[CompilerOptlang -lang fb]]//, les paramètres numériques sont passés ##[[KeyPgByval Byval]]## par défaut.  Les ##[[KeyPgString String]]##s et types définis par l'utilisateur sont passés ##[[KeyPgByref Byref]]## par défaut.

{{fbdoc item="diff"}}
	- Les spécificateurs d'accès "Public" et "Private" sont nouveaux pour ""FreeBASIC"".
	- Les constructeurs de sous-programmes sont nouveaux pour ""FreeBASIC"".

{{fbdoc item="see"}}
	- ##[[KeyPgDeclare Declare]]##
	- ##[[KeyPgFunction Function]]##
	- ##[[KeyPgExit Exit]]##
	- ##[[KeyPgPublic Public]]##
	- ##[[KeyPgPrivate Private]]##
	- ##[[KeyPgStatic Static]]##

{{fbdoc item="back" value="CatPgProcedures|Procedures"}}
   
   

