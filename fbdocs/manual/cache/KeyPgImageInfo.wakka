{{fbdoc item="title" value="IMAGEINFO"}}----
R&eacute;cup&egrave;re les informations sur une image

{{fbdoc item="syntax"}}##
	[[KeyPgDeclare declare]] [[KeyPgFunction function]] **Imageinfo** ( [[KeyPgByval byval]] //image// [[KeyPgAs as]] [[KeyPgAny any]] [[KeyPgPtr ptr]], [[KeyPgByref byref]] //width// [[KeyPgAs as]] [[KeyPgInteger integer]] = 0, [[KeyPgByref byref]] //height// [[KeyPgAs as]] [[KeyPgInteger integer]] = 0, [[KeyPgByref byref]] //bypp// [[KeyPgAs as]] [[KeyPgInteger integer]] = 0, [[KeyPgByref byref]] //pitch// [[KeyPgAs as]] [[KeyPgInteger integer]] = 0, [[KeyPgByref byref]] //pixdata// [[KeyPgAs as]] [[KeyPgAny any]] [[KeyPgPtr ptr]] = 0, [[KeyPgByref byref]] //size// [[KeyPgAs as]] [[KeyPgInteger integer]] = 0 ) [[KeyPgAs as]] [[KeyPgInteger integer]]
##
{{fbdoc item="usage"}}##
	//result// = **Imageinfo**( //image// [, [//width//] [, [//height//] [, [//bypp//] [, [//pitch//] [, [//pixdata//] [, //size//]]]]]] )
##
{{fbdoc item="param"}}
	##//image//##
		L'addresse de l'image.
	##//width//##
		Stocke la largeur de l'image, en pixels.
	##//height//##
		Stocke la hauteur de l'image, en pixels.
	##//bypp//##
		Stocke le nombre d'octets par pixel de l'image - c.a.d. la taille d'un seul pixel, en octets.
	##//pitch//##
		Stocke le "pitch" de l'image - c.a.d. la taille de chaque ligne (row), en octets.
	Notez que ceci est meilleur que simplement ##//width (largeur)// * //bypp//##, car les lignes peuvent &ecirc;tre modifi&eacute;es pour un meilleur alignement en m&eacute;moire.
		##//pixdata//##
	Stocke l'adresse de d&eacute;but de la premi&egrave;re ligne de l'image.
		##//size//##

Stocke la taille de la m&eacute;moire image, en octets.
	{{fbdoc item="section" value="Valeur Retourn&eacute;e

Si ##//image//## ne pointe pas sur une image valide, un (##1##) est retourn&eacute;. Sinon, ##//width//##, ##//height//##, ##//bypp//##, ##//pitch//##, ##//pixdata//## et ##//size//## re&ccedil;oivent les valeurs appropri&eacute;es, et z&eacute;ro (##0##) est retourn&eacute;.
	{{fbdoc item="desc"}}

	##**ImageInfo**## procure des informations vari&eacute;es sur une image, comme ses dimensions et sa profondeur de couleur, mais aussi les informations n&eacute;cessaires pour acc&eacute;der directement &agrave; toutes les donn&eacute;es pixel du tampon.

##**ImageInfo**## procure aussi la taille de l'image en m&eacute;moire, ce qui est utile pour l'allocation de m&eacute;moire pour copier l'image existante, ou pour &eacute;crire l'image dans un fichier.
{{fbdoc item="ex"}}
'' pixelptr(): use imageinfo() to find the pointer to a pixel in the image
'' Cree ecran graphique 32-bit et image.
ScreenRes 320, 200, 32

	Dim image As Any Ptr = ImageCreate( 64, 64 )
	Dim pitch As Integer
	Dim pixels As Any Ptr
	
	'' Obtient assez d'informations pour se deplacer dans donnees pixel.
	
	If 0 <> ImageInfo( image, ,,, pitch, pixels ) Then
	    Print "unable to retrieve image information."
	    Sleep
	    End
	End If
	    '' Dessine un motif sur l'image en manipulant directement pixel en memoire.
	For y As Integer = 0 To 63
	
Dim row As UInteger Ptr = pixels + y * pitch

For x As Integer = 0 To 63

row[x] = RGB(x * 4, y * 4, (x Xor y) * 4)
Next x

Next y

'' Dessine l'image sur l'screen.

Put (10, 10), image

ImageDestroy( image )

	Sleep
	%%

	    <div class="fb_img"><img src="images/imageinfo.png" />

	        {{fbdoc item="lang"}}
	        - Non accessible en dialecte //[[CompilerOptlang -lang qb]]// saut si r&eacute;f&eacute;renc&eacute; avec l'alias ##**__Imageinfo**##.
	        {{fbdoc item="diff"}}

	        - Nouveau pour FreeBASIC
	        {{fbdoc item="see"}}

	    - ##[[KeyPgImagecreate ImageCreate]]##

	- ##[[KeyPgImageDestroy ImageDestroy]]##

	- ##[[KeyPgImageConvertRow ImageConvertRow]]##
	- ##[[KeyPgGetgraphics Get (Graphique)]]##
	- ##[[KeyPgPutgraphics Put (Graphique)]]##

	- [[GfxInternalFormats Formats graphiques internes]]
	imagedestroy ip

else
	print "Error creating image!"
end if

sleep
%%
{{image class="center" title="Output image for pixelptr() example" url="/images/pixelptr.png"}}

{{fbdoc item="filename" value="examples/manual/gfx/imageinfo.bas"}}%%(freebasic)
'' Create 32-bit graphics screen and image.
screenres 320, 200, 32
dim image as any ptr = imagecreate( 64, 64 )

dim pitch as integer
dim pixels as any ptr

'' Get enough information to iterate through the pixel data.
if 0 <> imageinfo( image, ,,, pitch, pixels ) then
	print "unable to retrieve image information."
	sleep
	end
end if

'' Draw a pattern on the image by directly manipulating pixel memory.
for y as integer = 0 to 63
	dim row as uinteger ptr = pixels + y * pitch
	
	for x as integer = 0 to 63
		row[x] = rgb(x * 4, y * 4, (x xor y) * 4)
	next x
next y

'' Draw the image onto the screen.
put (10, 10), image

imagedestroy( image )

sleep
%%
{{image class="center" title="Output image for ImageInfo example" url="/images/imageinfo.png"}}

{{fbdoc item="lang"}}
	- Not available in the //[[CompilerOptlang -lang qb]]// dialect unless referenced with the alias ##**""__Imageinfo""**##.

{{fbdoc item="diff"}}
	- New to ""FreeBASIC""

{{fbdoc item="see"}}
	- ##[[KeyPgImagecreate ImageCreate]]##
	- ##[[KeyPgImageDestroy ImageDestroy]]##
	- ##[[KeyPgImageConvertRow ImageConvertRow]]##
	- ##[[KeyPgGetgraphics Get (Graphics)]]##
	- ##[[KeyPgPutgraphics Put (Graphics)]]##
	- [[GfxInternalFormats Internal pixel formats]]

{{fbdoc item="back" value="CatPgGfx2D|2D Drawing Functions"}}