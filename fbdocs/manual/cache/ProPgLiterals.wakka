{{fbdoc item="title" value="Literals"}}----
Cha&icirc;ne non-variable non-compilable et valeurs num&eacute;riques.

Les litt&eacute;raux sont des nombres ou des cha&icirc;nes de caract&egrave;res sp&eacute;cifi&eacute;s directement dans le code source.  Les valeurs litt&eacute;rales peuvent &ecirc;tre utilis&eacute;es en les assignant &agrave; une variable ou une constante, en les passant &agrave; une proc&eacute;dure ou en les utilisant dans une expression.

Les litt&eacute;raux num&eacute;riques existent sous deux formes - nombres entiers et &agrave; virgule flottante.  

{{fbdoc item="section" value="Litt&eacute;raux entiers

	<u>D&eacute;cimal</u>
	Les chiffres de d&eacute;cimaux ( ##0 1 2 3 4 5 6 7 8 9## ).
	//Note: pour obtenir des valeurs n&eacute;gatives, un signe "##-##" (##[[KeyPgOpNegate Op&eacute;rateur - (N&eacute;gation)]]##) peut &ecirc;tre plac&eacute; devant un litt&eacute;ral num&eacute;rique//

{{fbdoc item="filename" value="examples/manual/proguide/literals/dec.bas"}}%%(freebasic)
Dim x as integer = 123456
Dim b as byte = -128
%%

	<u>Hexad&eacute;cimal</u>
	"##&H##", suivi de chiffres hexad&eacute;cimaux ( ##0 1 2 3 4 5 6 7 8 9 A B C D E F## ).

{{fbdoc item="filename" value="examples/manual/proguide/literals/hex.bas"}}%%(freebasic)
Dim x As Integer = &h1E240
Dim b As Byte = &H80
%%
		
	<u>Octal</u>
	"##&O##" ( O comme dans "Octal" ), suivi de chiffres octals ( ##0 1 2 3 4 5 6 7## )

{{fbdoc item="filename" value="examples/manual/proguide/literals/oct.bas"}}%%(freebasic)
Dim x as integer = &O361100
Dim b as byte = &O400
%%
	<u>Binaire</u>
	"##&B##", suivi de chiffres binaires ( ##0 1## )

{{fbdoc item="filename" value="examples/manual/proguide/literals/bin.bas"}}%%(freebasic)
Dim x as integer = &B11110001001000000
Dim b as byte = &B10000000
%%

{{fbdoc item="section" value="Suffixes de taille d'un entier
	Si aucun suffixe litt&eacute;ral d'entier n'est donn&eacute;, la dimension du champ du nombre requis pour contenir le litt&eacute;ral est automatiquement calcul&eacute;e.  La sp&eacute;cification d'un suffixe de taille garantit que le compilateur examinera le nombre comme un entier de taille sp&eacute;cifique.

	Les entiers litt&eacute;raux se terminant par:
	- "##L##", "##%##", sont consid&eacute;r&eacute;s comme des entiers 32 bits sign&eacute;s. (##[[KeyPgInteger Integer]]##)
	- "##&##", sont consid&eacute;r&eacute;s comme des entiers longs 32 bits sign&eacute;s. (##[[KeyPgLong Long]]##)
	- "##U##", "##UL##", sont consid&eacute;r&eacute;s comme des entiers 32 bits non sign&eacute;s. (##[[KeyPgUinteger UInteger]]##)
	- "##LL##", sont consid&eacute;r&eacute;s comme des entiers 64 bits sign&eacute;s. (##[[KeyPgLongint LongInt]]##)
	- "##ULL##", sont consid&eacute;r&eacute;s comme des entiers 64 bits non sign&eacute;s. (##[[KeyPgUlongint ULongInt]]##)

	Les pr&eacute;fixes, les suffixes et les lettres des chiffres hexad&eacute;cimaux sont tous insensibles &agrave; la casse.
	
{{fbdoc item="filename" value="examples/manual/proguide/literals/intsuff.bas"}}%%(freebasic)
Dim a as integer = 123L
Dim b as uinteger = &h1234u
Dim c as longint = 76543LL
Dim d as ulongint = &b1010101ULL
%%

{{fbdoc item="section" value="Litt&eacute;raux &agrave; virgule flottante
	Les nombres &agrave; virgule flottante sont exprim&eacute;s avec des chiffres d&eacute;cimaux, ils peuvent &ecirc;tre positifs ou n&eacute;gatifs, ont une partie d&eacute;cimale et &eacute;ventuellement un exposant.  Le format d'un litt&eacute;ral &agrave; virgule flottante est:

	##nombre[.[partie d&eacute;cimale]][[D|E][[+|-]exposant]][suffixe]##
	//ou//
	##.partie d&eacute;cimale[[D|E][[+|-]exposant]][suffixe]##
	
	Par d&eacute;faut, les nombres &agrave; virgule flottante qui n'ont pas soit un exposant ou un suffixe sont consid&eacute;r&eacute;s comme ayant une valeur double pr&eacute;cision en virgule flottante, sauf dans le dialecte //[[CompilerOptlang -lang qb]]//, o&ugrave; les nombres de 7 chiffres (ou moins) sont consid&eacute;r&eacute;s comme en simple pr&eacute;cision.
{{fbdoc item="filename" value="examples/manual/proguide/literals/floats.bas"}}%%(freebasic)
Dim a as double = 123.456
Dim b as double = -123.0
%%

	La lettre "##D##" ou "##E##", plac&eacute;e apr&egrave;s le partie enti&egrave;re/d&eacute;cimale du nombre, permet l'expression du nombre avec un exposant.  L'exposant peut &ecirc;tre sp&eacute;cifi&eacute; comme positif ou n&eacute;gatif &agrave; l'aide du signe plus ("##+##") ou moins ("##-##").  Les exposants qui n'ont pas un signe sont positifs.
	Un exposant n'est pas n&eacute;cessaire apr&egrave;s la lettre si elle est utilis&eacute;e seule juste pour pr&eacute;ciser le type.  "##D##" indique un nombre &agrave; virgule flottante en double pr&eacute;cision.  "##E##" sp&eacute;cifie un nombre &agrave; virgule flottante utilisant la pr&eacute;cision par d&eacute;faut.

{{fbdoc item="filename" value="examples/manual/proguide/literals/dblsuff.bas"}}%%(freebasic)
Dim a as double = -123.0d
Dim b as double = -123e
Dim c as double = 743.1e+13
Dim d as double = 743.1D-13
Dim e as double = 743.1E13
%%

	Un suffixe "##!##" ou "##F##" sur un nombre sp&eacute;cifie une valeur en simple pr&eacute;cision (32 bits au total) en virgule flottante.  Un suffixe "#####" sp&eacute;cifie une valeur en double pr&eacute;cision en virgule flottante.
	Notez que les lettres suffixes et les prescripteurs d'exposant sont insensibles &agrave; la casse.

{{fbdoc item="filename" value="examples/manual/proguide/literals/singsuff.bas"}}%%(freebasic)
Dim a as single = 3.1!
Dim b as single = -123.456e-7f
Dim c as double = 0#
Dim d as double = 3.141592653589e3#
%%

{{fbdoc item="section" value="Les cha&icirc;nes litt&eacute;rales
	Une cha&icirc;ne litt&eacute;rale est une s&eacute;quence de caract&egrave;res comprise entre deux guillemets doubles.  Une s&eacute;quence de caract&egrave;res d'&eacute;chappement ou non.

	Les guillemets doubles peuvent &ecirc;tre sp&eacute;cifi&eacute;s dans la cha&icirc;ne litt&eacute;rale en utilisant deux guillemets doubles ensemble.
{{fbdoc item="filename" value="examples/manual/proguide/literals/string.bas"}}%%(freebasic)
print "Hello World!"
print "That's right!"
print "See the ""word"" contained in double quotes."
%%

	Une cha&icirc;ne litt&eacute;rale peut contenir des s&eacute;quences d'&eacute;chappement si elle est pr&eacute;fix&eacute;e par ##[[KeyPgOpPpEscape ! Operator]]## (Echappement cha&icirc;ne litt&eacute;rale).  Voir [[TblEscapeSequences S&eacute;quences d'&eacute;chappement]] pour une liste des s&eacute;quences d'&eacute;chappement accept&eacute;es.
{{fbdoc item="filename" value="examples/manual/proguide/literals/escape.bas"}}%%(freebasic)
print !"Hello\nWorld!"
%%

	Par d&eacute;faut, les cha&icirc;nes litt&eacute;rales ne supportent pas les s&eacute;quences d'&eacute;chappement sauf si ##[[KeyPgOptionescape Option Escape]]## a &eacute;t&eacute; utilis&eacute;e dans le source; dans ce cas, toutes les cha&icirc;nes litt&eacute;rales suivantes supporteront les s&eacute;quences d'&eacute;chappement.

	Une cha&icirc;ne peut &ecirc;tre sp&eacute;cifi&eacute;e explicitement comme ne supportant pas les s&eacute;quences d'&eacute;chappement lorsqu'elle est pr&eacute;fix&eacute;e par ##[[KeyPgOpPpNoescape $ Operator]]## (Non Echappement cha&icirc;ne litt&eacute;rale).
{{fbdoc item="filename" value="examples/manual/proguide/literals/noescape.bas"}}%%(freebasic)
print $"C:\temp"
%%

	En plus des fichiers ASCII avec des s&eacute;quences d'&eacute;chappement Unicode (##\u##), FreeBasic peut analyser les fichiers source UTF-8, UTF-16LE, UTF-16BE, UTF-32LE et UTF-32BE FreeBasic peut analyser source eee fichiers permettant des caract&egrave;res unicode directement dans la cha&icirc;ne litt&eacute;rale.

{{fbdoc item="see"}}
	- ##[[KeyPgPpdefine #define]]##
	- ##[[KeyPgConst Const]]## 
	- [[CatPgStdDataTypes Types de donn&eacute;es standard]]
	- [[TblVarTypes Tableau des types de variables, leurs limites et leurs suffixes]]

{{fbdoc item="back" value="CatPgProgrammer|Programmer's Guide"}}