{{fbdoc item="title" value="PUT (File I/O)"}}----
Ecrit des donn&eacute;es d'un tampon vers un fichier

{{fbdoc item="syntax"}}##
	**Put** #//filenum// [[KeyPgAs As]] [[KeyPgInteger integer]], [//position// [[KeyPgAs As]] [[KeyPgLongint longint]]], //data// [[KeyPgAs As]] [[KeyPgAny Any]] [, //amount// [[KeyPgAs As]] [[KeyPgInteger Integer]]]
	**Put** #//filenum// [[KeyPgAs As]] [[KeyPgInteger Integer]], [//position// [[KeyPgAs As]] [[KeyPgLongint longint]]], //data// [[KeyPgAs As]] [[KeyPgString String]]
	**Put** #//filenum// [[KeyPgAs As]] [[KeyPgInteger Integer]], [//position// [[KeyPgAs As]] [[KeyPgLongint longint]]], //data()// [[KeyPgAs As]] [[KeyPgAny Any]]
##
{{fbdoc item="usage"}}##
	**Put** #//filenum//, //position//, //data// [, //amount//]
	varres = **Put** (#//filenum//, //position//, //data// [, //amount//])
##
{{fbdoc item="param"}}
	##//filenum//##
		La valeur pass&eacute;e &agrave; ##[[KeyPgOpen Open]]## lorsque le dossier a &eacute;t&eacute; ouvert.
	##//position//##
		Est la position o&ugrave; ##**Put**## doit commencer dans le fichier. Si le fichier a &eacute;t&eacute; ouvert en mode ##//For Random//##, la position est &eacute;valu&eacute;e en enregistrements, sinon elle est &eacute;valu&eacute;e en octets. Si omise, l'&eacute;criture commence &agrave; la position actuelle du pointeur.  La position est bas&eacute;e sur 1: par exemple le premier enregistrement ou octet est &agrave; la position ##1##.
		Si ##//position//## est omise ou z&eacute;ro (##0##), l'&eacute;criture dans le fichier commencera &agrave; partir de la position courante dans le fichier.
	##//data//##
		Est le tampon m&eacute;moire &agrave; partir duquel les donn&eacute;es sont &eacute;crites. Il peut &ecirc;tre une variable num&eacute;rique, une cha&icirc;ne, un tableau ou un type d&eacute;fini par l'utilisateur. L'op&eacute;ration va essayer de transf&eacute;rer sur le disque la variable compl&egrave;te, sauf si ##//amount//## est pr&eacute;cis&eacute;.
		Lorsque ##**Put**## concerne un tableau, ##//data//## doit &ecirc;tre suivi par une paire de parenth&egrave;ses vides: '##()##'.  ##**Put**## &eacute;crira toutes les donn&eacute;es du tableau.  ##//amount//## n'est pas permis.
		Lorsque ##**Put**## concerne une ##[[KeyPgString String]]##, le nombre d'octets &eacute;crits est le m&ecirc;me que le nombre d'octets dans la cha&icirc;ne.  ##//amount//## n'est pas permis.
		Note: Si vous voulez &eacute;crire des valeurs &agrave; partir d'un tampon, vous NE DEVEZ PAS passer un pointeur vers la m&eacute;moire tampon; au lieu de cela vous devez passer la premi&egrave;re variable dans la m&eacute;moire tampon.  (Cela peut &ecirc;tre fait par le d&eacute;r&eacute;f&eacute;rencement du pointeur avec ##[[KeyPgOpValueOf Operator * (Valeur de)]]##.)  ##**Put**## d&eacute;duira automatiquement que le reste de la m&eacute;moire tampon se poursuit apr&egrave;s la premi&egrave;re variable.  Si vous passez un pointeur directement, alors ##**Put**## utilisera la m&eacute;moire &agrave; partir de la variable pointeur et non pas la m&eacute;moire point&eacute;e par lui.
	##//amount//##
		##Put## &eacute;crira dans le fichier ##//amount//## variables cons&eacute;cutives - c'est &agrave; dire qu'il &eacute;crira, dans le fichier, ##( //amount// * [[KeyPgSizeof SizeOf]](//data//) )## octets de donn&eacute;es, commen&ccedil;ant &agrave; la position ##//data//## dans la m&eacute;moire.  Si ##//amount//## est omis sa valeur par d&eacute;faut est ##1##, ce qui signifie que ##**Put**## n'&eacute;crit qu'une seule variable.<div class="fb_header">

{{fbdoc item="section" value="Valeur retourn&eacute;e
	##0## si succ&egrave;s; non z&eacute;ro si erreur. "disk full" (disque complet) est consid&eacute;r&eacute; comme une erreur et il en r&eacute;sulte un code retour de ##3##. La quantit&eacute; "exacte" des donn&eacute;es &eacute;crites avant n'est pas disponible et ce ne serait pas vraiment utile de toute fa&ccedil;on. 

{{fbdoc item="desc"}}
	&Eacute;crit des donn&eacute;es binaires &agrave; partir d'une variable tampon dans un fichier ouvert en mode ##[[KeyPgBinary Binary]]## ou ##[[KeyPgRandom Random]]##.

	##**Put**## peut &ecirc;tre utilis&eacute; comme une fonction, et retournera ##0## si succ&egrave;s ou un code d'erreur si &eacute;chec.	

	Pour les fichiers ouverts en mode ##[[KeyPgRandom Random]]##, la taille en octets des donn&eacute;es &agrave; &eacute;crire doit correspondre &agrave; la taille sp&eacute;cifi&eacute;e de l'enregistrement.

{{fbdoc item="ex"}}
{{fbdoc item="filename" value="examples/manual/fileio/put.bas"}}%%(freebasic)
' Create integer variables (our buffer has just 4 bytes)
Dim As Integer buffer , f 

' Find the first free file file number.
f = Freefile

' Open the file "file.ext" for binary usage, using the file number "f".
Open "file.ext" For Binary As #f
  buffer=10
  ' Write 4 bytes from the buffer into the file, using file number "f"
  ' starting at the beginning of the file (1).
  Put #f, 1, buffer

' Close the file.  
Close #f

' End the program.
End
%%

{{fbdoc item="filename" value="examples/manual/fileio/put-array.bas"}}%%(freebasic)
' Create an integer array
Dim buffer(1 To 10) As Integer
Dim i As Integer
For i = 1 To 10
	buffer(i) = i
Next

' Find the first free file file number.
Dim f As Integer
f = Freefile

' Open the file "file.ext" for binary usage, using the file number "f".
Open "file.ext" For Binary As #f
' Write the array into the file, using file number "f"
' starting at the beginning of the file (1).
Put #f, 1, buffer()

' Close the file.
Close #f

' End the program.
End
%%

{{fbdoc item="ex"}}
{{fbdoc item="filename" value="examples/manual/fileio/put-buffer.bas"}}%%(freebasic)
Dim As Byte Ptr lpBuffer
Dim As Integer hFile, Counter, Size

Size=256

lpBuffer=Allocate(Size)
For Counter=0 to Size-1
  lpBuffer[Counter]=(Counter and &HFF)
Next

' Get free file file number.
hFile = Freefile()

' Open the file "test.bin" in binary writing mode.
Open "test.bin" For Binary Access Write As #hFile
  ' Write 256 bytes from the memory pointened by lpBuffer.
  Put #hFile, , lpBuffer[0],Size
' Close the file.  
Close #hFile
' Free the allocated memory.
Deallocate lpBuffer
' End the program.
End
%%
{{fbdoc item="diff"}}
	- ##**Put**## peut &eacute;crire des tableaux pleins comme dans VB ou, &agrave; d&eacute;faut, &eacute;crire un multiple de la taille des donn&eacute;es &agrave; partir de la position m&eacute;moire ##//buffer//##.
	- ##**Put**## peut &ecirc;tre utilis&eacute; comme une fonction dans FB, pour d&eacute;terminer s'il y a eu succ&egrave;s ou si un code d'erreur a &eacute;t&eacute; renvoy&eacute; sans avoir &agrave; utiliser les proc&eacute;dures de gestion des erreurs.

{{fbdoc item="see"}}
	- ##[[KeyPgPutgraphics Put (Graphique)]]## utilisation diff&eacute;rente du m&ecirc;me mot-cl&eacute;
	- ##[[KeyPgGetfileio Get (Entr&eacute;e/Sortie fichiers)]]##
	- ##[[KeyPgOpen Open]]##
	- ##[[KeyPgClose Close]]##
	- ##[[KeyPgRandom Random]]##
	- ##[[KeyPgBinary Binary]]##
	- ##[[KeyPgFreefile Freefile]]##

{{fbdoc item="back" value="CatPgFile|File I/O Functions"}}