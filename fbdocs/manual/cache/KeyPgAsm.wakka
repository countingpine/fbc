{{fbdoc item="title" value="ASM"}}----
Bloc de code qui permet l'utilisation d'instructions sp&eacute;cifiques &agrave; l'architecture.

{{fbdoc item="syntax"}}##
	**Asm**
		//architecture-dependent instructions//
	End **Asm**

		##//Ou//##

	**Asm** //architecture-dependent instructions//
##
{{fbdoc item="desc"}}
	Le bloc ##Asm## est utilis&eacute; pour ins&eacute;rer dans le programme des instructions en code machine afin d'effectuer des op&eacute;rations qui ne peuvent l'&ecirc;tre en utilisant les caract&eacute;ristiques du langage ou d'optimiser &agrave; la main les performances de sections de code sensibles.

	Le compilateur FreeBasic actuellement ne produit du code que pour les machines Intel bas&eacute;es sur [[x86 80x86]]; toutefois, &agrave; l'avenir, le compilateur sera peut &ecirc;tre port&eacute; sur une plate-forme qui ne supporte pas le m&ecirc;me jeu d'instructions.  Par cons&eacute;quent, les blocs ##Asm## ne devraient &ecirc;tre utilis&eacute;s que lorsque cela est n&eacute;cessaire et seule une alternative FreeBasic devrait &ecirc;tre fournie, si possible.

	La valeur retourn&eacute;e par une fonction peut &ecirc;tre d&eacute;finie en utilisant le mot-clef ##[[KeyPgFunction Function]]## entre parenth&egrave;ses tel qu'illustr&eacute; dans l'exemple ci-dessous.

	Les blocs de commentaires ##Asm## ont la syntaxe habituelle des [[KeyPgRem Commentaires]] du FreeBasic FreeBASIC [[KeyPgRem Comments]]  - utilisez les commentaires FreeBASIC " ##'## ", et non les commentaires " ##;## " comme d'habitude en ASM. 

	** Specificit&eacute;s x86:**

		**Syntaxe**
			La syntaxe de l'assembleur en ligne est une forme simplifi&eacute;e de la syntaxe Intel.  La syntaxe Intel est utilis&eacute;e par la majorit&eacute; des assembleurs x86, tels que MASM, TASM, NASM, YASM et FASM. En g&eacute;n&eacute;ral, la destination d'une instruction est plac&eacute;e en premier, suivie par la source. Les variables et fonctions d&eacute;finies par un programme doivent &ecirc;tre r&eacute;f&eacute;renc&eacute;es dans un bloc Asm.  L'assembleur est utilis&eacute; par FreeBASIC est GAS, utilisant la directive ##.intel_syntax noprefix##, et les blocs ASM sont pass&eacute;s non modifi&eacute;s, sauf pour la substitution des noms de variables locales pour le cadre de la pile r&eacute;f&eacute;rences et en commentant l'enl&egrave;vement.

			La syntaxe d'instructions est essentiellement le m&ecirc;me que celle qu'utilise FASM, une diff&eacute;rence importante est que GAS n&eacute;cessite des param&egrave;tres de taille &agrave; suivre par le mot "ptr".
			
			%%(freebasic)
' Assuming "blah" is a FB global or local UINTEGER variable
mov  eax, [blah]        ' OK: size is apparent from eax
inc  [blah]             ' Not OK: size is not given
inc  dword [blah]       ' Not OK: size given, but still not accepted by GAS
inc  dword Ptr [blah]   ' OK: "ptr" is needed by GAS here

		%%
			**Pr&eacute;servation des registres**

		Quand un bloc ASM est ouvert, les registres ##ebx##, ##esi## et ##edi## sont pouss&eacute;s sur la pile, quand le bloc est ferm&eacute;, ces registres sont r&eacute;cup&eacute;r&eacute;s sur la pile.  C'est parce que ces registres doivent &ecirc;tre pr&eacute;serv&eacute;s par la plupart ou la totalit&eacute; des syst&egrave;mes d'exploitation utilisant le processeur x86.  Vous pouvez donc utiliser ces registres sans les pr&eacute;server explicitement, vous-m&ecirc;me. Vous ne devez pas modifier  ##esp## et ##ebp##, car ils sont g&eacute;n&eacute;ralement utilis&eacute;s pour traiter les variables locales. 
		**Noms des registres**
		Les noms des registres pour l'architecture x86 sont r&eacute;dig&eacute;s comme suit dans un bloc ##Asm##:
		- registres entiers de 4 octets: ##eax##, ##ebx##, ##ecx##, ##edx,## ##ebp##, ##esp##, ##edi##, ##esi##
		- registres entiers de 2 octets: ##ax##, ##bx##, ##cx##, ##dx##, ##bp##, ##sp##, ##di##, ##si## (low words of 4-byte ##e##- registers)
		- registres entiers de 1 octets: ##al##, ##ah##, ##bl##, ##bh##, ##cl##, ##ch##, ##dl##, ##dh## (low and high bytes of 2-byte -##x## registers)
		- registres &agrave; virgule flottante: ##st(0)##, ##st(1)##, ##st(2)##, ##st(3)##, ##st(4)##, ##st(5)##, ##st(6)##, ##st(7)##
		- registres MMX (alias sur les registres &agrave; virgule flottante): ##mm0##, ##mm1##, ##mm2##, ##mm3##, ##mm4##, ##mm5##, ##mm6##, ##mm7##
		
		- registres SSE: ##xmm0##, ##xmm1##, ##xmm2##, ##xmm3##, ##xmm4##, ##xmm5##, ##xmm6##, ##xmm7##
		
		**Ensemble des instructions**
		Voir ces r&eacute;f&eacute;rences externes:
		- [[http://board.flatassembler.net/download.php?id=3093">Original Intel 80386 manual from 1986]]
		- [[http://developer.intel.com/design/Pentium4/documentation.htm">Latest Intel Pentium 4 manuals]]
		
		- [[http://home.comcast.net/~fbkotler/nasmdocb NASM x86 Instruction Reference]] (S'il vous pla&icirc;t notez que NASM n'est pas l'assembleur utilis&eacute; par FreeBasic, mais cette page donne un bon aper&ccedil;u des instructions x86)
		**Instructions &agrave; risque**
		
		Notez que le compilateur FreeBASIC produit du code 32-bit en mode prot&eacute;g&eacute; pour les architectures x86 qui fonctionne habituellement dans un niveau utilisateur non privil&eacute;gi&eacute;; cependant, les instructions privil&eacute;gi&eacute;s et sensibles seront assembl&eacute;es correctement, mais ne fonctionneront peut-&ecirc;tre pas correctement ou provoqueront une ereur du type "General Protection Fault", "Illegal instruction" ou SIGILL. Voici les instructions privil&eacute;gi&eacute;es et sensibles des processeurs Intel Pentium 4 et Xeon:
		- ##cli## *1
		- ##clts##
		- ##hlt##
		- ##in## *1
		- ##ins## *1
		- ##int## *1               
		- ##into## *1               
		- ##invd##
		- ##invlpg##
		- ##lgdt##
		- ##lidt##
		- ##lldt##
		- ##lmsw##
		- ##ltr##
		- ##mov## vers/depuis ##CR##n, ##DR##n, ##TR##n
		- ##out## *1
		- ##outs## *1
		- ##rdmsr##
		- ##rdpmc## *2
		- ##rdtsc## *2
		- ##sti## *1
		- ##str##
		- ##wbinvd##
		- ##wrmsr##

		- all SSE2 and higher instructions *2
		*1: sensible &agrave; IOPL, tr&egrave;s bien sous DOS 
		
	*2: sensible aux bits d'autorisation dans CR4, voir ci-dessous
	Les instructions privil&eacute;gi&eacute;es fonctionnent "correctement" sous DOS lors de l'ex&eacute;cution sur un "noyau Ring 0 DPMI", comme la (non-d&eacute;faut) version Ring 0 de CWSDPMI, WDOSX ou D3X, cependant la plupart d'entre eux ne sont pas vraiment utiles et dangereux lorsqu'ils sont ex&eacute;cut&eacute;s &agrave; partir de code DPMI. RDTSC (Read Time Stamp Counter) a &eacute;t&eacute; expos&eacute; &agrave; &ecirc;tre autoris&eacute; par la plupart ou la totalit&eacute; OS.
	Cependant l'utilit&eacute; de RDTSC a &eacute;t&eacute; diminu&eacute; avec l'av&egrave;nement du multi-core et des processeurs &agrave; hibernation. SSE2 et instructions sup&eacute;rieures sont d&eacute;sactiv&eacute;es "par d&eacute;faut" apr&egrave;s l'initialisation du CPU, Windows et Linux en g&eacute;n&eacute;ral les permettent, sous DOS, c'est l'affaire de l'h&ocirc;te DPMI: HDPMI32 les permettra, CWSDPMI ne le permettra pas. L'instruction INT est utilisable sous DOS version/cible uniquement, noter qu'il fonctionne un peu diff&eacute;remment du mode r&eacute;el DOS, voir aussi FaqDOS.
	Les registres de segment (##cs##, ##ds##, ##es##, ##fs##, ##gs##) ne devrait pas &ecirc;tre modifi&eacute;s &agrave; partir d'un bloc ##Asm##, sauf dans certains cas de portage DOS, (notez qu'ils NE fonctionnent PAS de la m&ecirc;me fa&ccedil;on qu'en mode r&eacute;el DOS, voir aussi FaqDOS). Le syst&egrave;me op&eacute;ratoire ou l'h&ocirc;te DPMI est responsable de la gestion de la m&eacute;moire; la signification des s&egrave;gments (s&eacute;lecteurs) en mode prot&eacute;g&eacute; est tr&egrave;s diff&eacute;rente du mode d'adressage r&eacute;el de la m&eacute;moire.

Notez que ces instructions "dangereuses" ne sont pas garanties pour faire appara&igravetre un crash "visible" m&ecirc;me quand a fonctionn&eacute; avec les privil&egrave;ges suffisants - l'OS ou l'h&ocirc;te DPMI peut d&eacute;cider de les "&eacute;muler", soit fonctionnellement (en lisant &agrave; partir de certains CRx sous HDPMI32), ou "factices" (rien ne se passe, l'instruction passera en silence, comme un NOP).
{{fbdoc item="ex"}}
'' This is an example for the x86 architecture.
'' This is an example for the x86 architecture.
	Function AddFive(ByVal num As Integer) As Integer
		Asm
		mov eax, [num]
		add eax, 5
	mov [Function], eax
End Asm

End Function

Dim i As Integer = 4
Print "4 + 5 ="; AddFive(i)

%%

	##%%4 + 5 = 9%%##
		L'assembleur de FreeBASIC's est AS / GAS, l'assembleur de GCC, donc un programme externe. Certaines bizarreries s'appliquent:
		- Les lignes d'erreur renvoy&eacute;es par FBC pour les blocs ASM ne sont pas li&eacute;s au fichier source FB. Comme FBC affiche simplement les erreurs renvoy&eacute;es par AS, les lignes sont li&eacute;es au fichier assembleur. Pour que FreeBASIC les pr&eacute;serve, le compilateur doit &ecirc;tre appel&eacute; avec l'option //[[CompilerOptrupp -R]]// ("ne pas supprimer les fichiers ASM").

- Les noms d'&eacute;tiquettes sont sensibles &agrave; la casse &agrave; l'int&eacute;rieur des blocs ASM.
	{{fbdoc item="lang"}}

- Not available in the //[[CompilerOptlang -lang qb]]// dialect unless referenced with the alias ##**__Asm**##.
	{{fbdoc item="lang"}}

- Nouveau pour FreeBASIC
	{{fbdoc item="see"}}

- ##[[KeyPgFunction Function]]##