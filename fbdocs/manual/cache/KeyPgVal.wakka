{{fbdoc item="title" value="VAL"}}----
Conversion d'une chaîne en un nombre à virgule flottante

{{fbdoc item="syntax"}}##
	[[KeyPgDeclare declare]] [[KeyPgFunction function]] **Val** [[KeyPgOverload overload]] ( [[KeyPgByref byref]] //str// [[KeyPgAs as]] [[KeyPgConstQualifier const]] [[KeyPgString string]] ) [[KeyPgAs as]] [[KeyPgDouble double]]
	[[KeyPgDeclare declare]] [[KeyPgFunction function]] **Val** ( [[KeyPgByref byref]] //str// [[KeyPgAs as]] [[KeyPgConstQualifier const]] [[KeyPgWstring wstring]] ) [[KeyPgAs as]] [[KeyPgDouble double]]
##
{{fbdoc item="usage"}}##
	//result// = **Val**( //strnum// )
##
{{fbdoc item="param"}}
	##//strnum//##
		la chaîne contenant le nombre à convertir

{{fbdoc item="ret"}}
	Retourne un nombre converti en nombre ##[[KeyPgDouble Double]]## précision

	Si le premier caractère de la chaîne est invalide, ##**Val**## retournera ##0##.

{{fbdoc item="desc"}}
	##**Val**("10")## retournera ##10.0##, et ##**Val**("10.10")## retournera ##10.1##. La fonction analyse la chaîne à partir de la gauche, en sautant tout espace blanc, et retourne le plus long nombre qu'elle peut lire, s'arrêtant au premier caractère non-approprié, qu'elle trouve.  La notation scientifique est reconnue, en utilisant ##"D"## ou ##"E"## pour préciser l'exposant.

	##**Val**## peut convertir des nombres entiers dans le format binaire / octal / hexadécimal, s'il y a devant l'identificateur pertinent (##"&B"## / ##"&O"## / ##"&H"##), par exemple: ##**Val**("&HFF")## retourne ##255##.

	**Note**:
	Si vous souhaitez obtenir une valeur entière à partir d'une chaîne, pensez plutôt à utiliser ##[[KeyPgValint ValInt]]## ou ##[[KeyPgVallng ValLng]]##.  Ils sont plus rapides, car ils n'utilisent pas de nombres à virgule flottante, et seul ##[[KeyPgVallng ValLng]]## procure une pleine précision 64-bit pour les types ##[[KeyPgLongint LongInt (entier long)]]##.


	Si vous voulez convertir un nombre en une chaîne, utilisez la fonction ##[[KeyPgStr Str]]##.

{{fbdoc item="ex"}}
{{fbdoc item="filename" value="examples/manual/strings/val.bas"}}%%(freebasic)
dim a as string, b as double
a = "2.1E+30xa211"
b = val(a)
print a, b
%%

%%
2.1E+30xa211   2.1e+030
%%

{{fbdoc item="diff"}}
	- Aucune

{{fbdoc item="see"}}
	- ##[[KeyPgCdbl Cdbl]]##
	- ##[[KeyPgValint Valint]]##
	- ##[[KeyPgValuint Valuint]]##
	- ##[[KeyPgVallng Vallng]]##
	- ##[[KeyPgValulng Valulng]]##
	- ##[[KeyPgStr Str]]##
	- ##[[KeyPgChr Chr]]##
	- ##[[KeyPgAsc Asc]]##

{{fbdoc item="back" value="CatPgCasting|Converting Data Types"}}{{fbdoc item="back" value="CatPgString|String Functions"}}