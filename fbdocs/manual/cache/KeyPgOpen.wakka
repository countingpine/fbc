{{fbdoc item="title" value="OPEN"}}----
Ouvre un fichier sur le disque pour des opérations de lecture/écriture

{{fbdoc item="syntax"}}##
	**Open** //filename// **For** **[[KeyPgInputfilemode Input]]** [//encoding_type//] [//lock_type//] **As** [**#**]//filenumber//
	**Open** //filename// **For** **[[KeyPgOutput Output]]** [//encoding_type//] [//lock_type//] **As** [**#**]//filenumber//
	**Open** //filename// **For** **[[KeyPgAppend Append]]** [//encoding_type//] [//lock_type//] **As** [**#**]//filenumber//

	**Open** //filename// **For** **[[KeyPgBinary Binary]]** [//access_type//] [//lock_type//] **As** [**#**]//filenumber//
	**Open** //filename// **For** **[[KeyPgRandom Random]]** [//access_type//] [//lock_type//] **As** [**#**]//filenumber// [**Len =** //record_length//]
##
{{fbdoc item="usage"}}##
	//result// = **Open** (//filename//, **For** {**[[KeyPgInputfilemode Input]]**|**[[KeyPgOutput Output]]**|**[[KeyPgAppend Append]]**}, **As** //filenumber// )
		##//ou//##
	//result// = **Open** (//filename//, **For** **[[KeyPgBinary Binary]]**, **[[KeyPgAccess Access]]** {**Read**|**Write**}, **As** //filenumber// )
		##//ou//##
	//result// = **Open** (//filename//, **For** **[[KeyPgRandom Random]]**, **[[KeyPgAccess Access]]** {**Read**|**Write**}, **As** //filenumber// [, **Len = ** //record_length//] )
		##//ou//##
	**Open** //filename// **For** {**[[KeyPgInputfilemode Input]]**|**[[KeyPgOutput Output]]**|**[[KeyPgAppend Append]]**} **As** //filenumber//
		##//ou//##
	**Open** //filename// **For** **[[KeyPgBinary Binary]]** **[[KeyPgAccess Access]]** {**Read**|**Write**} **As** //filenumber//
		##//ou//##
	**Open** //filename// **For** **[[KeyPgRandom Random]]** **[[KeyPgAccess Access]]** {**Read**|**Write**} **As** //filenumber// [**Len = ** //record_length//]

##
{{fbdoc item="param"}}
	##//filename//##
		Une chaîne de caractères correspondant au nom du fichier à ouvrir sur le disque. les chemins de fichiers relatifs le sont par rapport au répertoire courant (voir ##[[KeyPgCurdir Curdir]]##).
	##//encoding_type//##
		Le codage à utiliser lors de la lecture ou l'écriture du texte:
			- ##Encodage "ascii"## //(l'encodage ASCII est utilisé, c'est celui par défaut)//
			- ##Encoding "utf8"## //(l'encodage 8-bit Unicode est utilisé)//
			- ##Encoding "utf16"## //(l'encodage 16-bit Unicode est utilisé)//
			- ##Encoding "utf32"## //(l'encodage 32-bit Unicode est utilisé)//
	##//access_type//##
		Le type d'accès demandé par le processus appelant.
			- ##Accès ## [##Read##] [##Write##] // (lire et écrire peuvent être utilisés ensemble, c'est la valeur par défaut)//
	##//lock_type//##
		Impose des restrictions sur l'accès aux fichiers disque à partir d'autres processus ("threads" ou programmes):
			- ##Shared## //(le fichier peut être librement consulté par d'autres processus)//
			- ##Lock## [##Read##] [##Write##] //(l'accès en lecture et écriture peut être refusé à d'autres processus)//
	##//filenumber//##
		Un numéro de fichier disponible, qui peut être trouvé avec ##[[KeyPgFreefile Freefile]]##, pour se lier au fichier sur le disque.
	##//record_length//##
		La taille, en octets, de chaque enregistrement lu ou écrit dans le fichier disque. La valeur par défaut est 128.

{{fbdoc item="ret"}}
	Dans la première utilisation, ##**Open**## retourne zéro (##0##) si succès et une valeur différente de zéro dans les autres cas.

{{fbdoc item="desc"}}
	Ouvre un fichier sur le disque en lecture et/ou en écriture. Le numéro de fichier ##//file_number//## est lié au fichier sur le disque, pour une utilisation dans les opérations ultérieures sur les fichiers, comme ##[[KeyPgInputPp Input #]]## et ##[[KeyPgLock Lock]]##. Le premier numéro de fichier disponible peut être récupéré avec ##[[KeyPgFreefile Freefile]]##.

	Les modes d'ouverture de fichiers ##[[KeyPgInputfilemode Input]]##, ##[[KeyPgOutput Output]]## et ##[[KeyPgAppend Append]]## en entrée/sortie séquencielle de texte, sont utiles pour la lecture ou l'écriture de fichiers texte brut. Quand le mode ##[[KeyPgInputfilemode Input]]## est spécifié, seules les opérations de lecture de fichiers sont utilisables, comme ##[[KeyPgLineinput Line Input #]]## et ##[[KeyPgGetfileio Get #]]##. Si le fichier disque n'existe pas une erreur d'exécution sera produite. Quand le mode ##[[KeyPgOutput Output]]## est spécifié, seules les opérations d'écriture de fichiers sont utilisables, comme ##[[KeyPgPrintPp Print #]]## et ##[[KeyPgPutfileio Put #]]##. Si le fichier n'existe pas sur le disque, il est créé vide. Le mode ##[[KeyPgAppend Append]]## est comme le mode ##[[KeyPgOutput Output]]##, sauf que les opérations d'écriture commenceront à la fin du fichier disque, s'il existe.

	Les modes d'ouverture de fichiers ##[[KeyPgInputfilemode Input]]##, ##[[KeyPgOutput Output]]## et ##[[KeyPgAppend Append]]## permettent également la sélection d'un codage de caractères à utiliser lors de la lecture ou l'écriture de texte dans le fichier disque. Un codage ASCII ou Unicode peut être spécifié (voir ci-dessus la description du paramètre ##//encoding_type//##).

	Les modes d'ouverture de fichiers ##[[KeyPgBinary Binary]]## et ##[[KeyPgRandom Random]]## permettent un accès aléatoire (random-access) en lecture ou écriture de données binaires de taille arbitraire. Le mode ##[[KeyPgBinary Binary]]## permet la lecture ou l'écriture de valeurs de données de type simple, comme ##[[KeyPgByte Byte (=octet)]]## ou ##[[KeyPgLongint LongInt (=entier long)]]##, en utilisant des opérations de lecture ou d'écriture binaire, comme ##[[KeyPgGetfileio Get #]]##. ##[[KeyPgLoc Loc]]## et ##[[KeyPgSeekreturn Seek]]## sont des méthodes utilisées pour lire et écrire à des emplacements arbitraires dans un fichier disque. Le mode ##[[KeyPgRandom Random]]## est similaire à ##[[KeyPgBinary Binary]]##, sauf que les opérations d'entrée/sortie utilisent toujours une taille constante de données lors d'une lecture ou d'une écriture.

	Par défaut, les modes ##[[KeyPgBinary Binary]]## et ##[[KeyPgRandom Random]]## permettent les deux opérations de lecture et d'écriture sur le fichier ouvert sur le disque, mais cela peut être changé en spécifiant un type d'accès (voir ci-dessus la description pour le paramètre ##//access_type//##).

	Pour tout mode, l'accès au fichier ouvert sur le disque peut être restreint ou accordé à d'autres "threads" ou des programmes en spécifiant un type de verrou (voir ci-dessus la description pour le paramètre ##//lock_type//##). Si aucun type de verrou n'est spécifié, les autres "threads" du programme actuel peuvent librement ouvrir le fichier sur le disque (##Shared##), tandis que d'autres programmes ne peuvent pas (##Lock Read Write##). ##[[KeyPgLock Lock]]## et ##[[KeyPgUnlock Unlock]]## peut être utilisés pour restreindre provisoirement l'accès à des parties d'un fichier.

	Le code d'erreur renvoyé par ##**Open**## peut être vérifié à l'aide de ##[[KeyPgErr Err]]## dans la ligne suivante. La version fonction de ##**Open**## retourne directement le code d'erreur sous forme d'un entier. 

{{fbdoc item="ex"}}
{{fbdoc item="filename" value="examples/manual/fileio/open.bas"}}%%(freebasic)
' Create a string and fill it.
Dim buffer As String, f as integer
buffer = "Hello World within a file."

' Find the first free file number.
f = Freefile

' Open the file "file.ext" for binary usage, using the file number "f".
Open "file.ext" For Binary As #f
If Err>0 then Print "Error opening the file":end

' Place our string inside the file, using number "f".
Put #f, , buffer

' Close all open files.  
Close

' End the program. (Check the file "file.ext" upon running to see the output.)
End
%%

{{fbdoc item="filename" value="examples/manual/fileio/opencom.bas"}}%%(freebasic)
'OPEN A COM PORT
Open Com "COM1:9600,N,8,1" As #1
if Err>0 then print "The port could not be opened."

'COM1, 9600 BAUD, NO PARITY BIT, EIGHT DATA BITS, ONE STOP BIT
%%
{{fbdoc item="filename" value="examples/manual/fileio/openfunc.bas"}}%%(freebasic)
'function version of OPEN
If Open("file.ext" For Binary Access Read As #1) = 0 Then

	Print "Successfully opened file"

	'' ...

	close #1

else

	Print "Error opening file"

End If
%%

{{fbdoc item="target"}}
	- Linux nécessite que la casse de la police de ##//filename//## corresponde au nom réel du fichier. Windows et DOS ne sont pas sensibles à la casse. 
	- Les séparateurs de chemin de Linux sont des barres obliques ##/##. Windows utilise les barres obliques vers l'arrière ##\## mais il permet les barres obliques .  DOS utilise les barres obliques inverses ##\##. 
	- Sous Windows, un numéro de fichier utilisé dans une bibliothèque de liens dynamiques n'est pas le même qu'un numéro de fichier identique utilisé dans le programme principal.  Les numéros de dossier ne peut être passés ou renvoyés, puis utilisés entre une DLL et un fichier exécutable.

{{fbdoc item="diff"}}
	- L'utilisation des noms de périphériques MS-DOS pour ouvrir des flots ou des périphériques (##"LPT:"##, ##"SCR:"##, etc.) est permise seulement dans le dialecte //[[CompilerOptlang -lang qb]]//; pour les autres modes FreeBASIC de nouveaux mots-clés composites doivent être utilisés: voir ##[[KeyPgOpenCom Open Com]]##,  ##[[KeyPgOpenCons Open Cons]]##,  ##[[KeyPgOpenErr Open Err]]##,  ##[[KeyPgOpenPipe Open Pipe]]##,  ##[[KeyPgOpenLpt Open Lpt]]##,  ##[[KeyPgOpenScrn Open Scrn]]##.
	- ##**Open**## peut être appelé comme une procédure qui retourne un code d'erreur.

{{fbdoc item="lang"}}
	- Le dialecte //[[CompilerOptlang -lang qb]]// permet la syntaxe du style GW-BASIC ##OPEN mode_string, #filenum, filename [length]## avec mode_string qui peut être ##"I"## pour entrée, ##"O"## pour sortie, ##"A"## pour ajout, ##"R"## pour aléatoire (random), ##"B"## pour binaire. 

{{fbdoc item="see"}}
	- ##[[KeyPgErr Err]]## et [[TblRuntimeErrors Codes des erreurs de fonctionnement]]
	- ##[[KeyPgClose Close]]##
	- ##[[KeyPgFreefile Freefile]]##
	- ##[[KeyPgOpenCons Open Cons]]##, ##[[KeyPgOpenErr Open Err]]##, ##[[KeyPgOpenPipe Open Pipe]]##, ##[[KeyPgOpenLpt Open Lpt]]##, ##[[KeyPgOpenCom Open Com]]##, ##[[KeyPgOpenScrn Open Scrn]]##

{{fbdoc item="back" value="CatPgFile|File I/O Functions"}}