{{fbdoc item="title" value="Instructions de contr&ocirc;le de flux"}}----
Des instructions qui dirigent le flux d'exécution.

{{fbdoc item="desc"}}
	Les instructions de contrôle de flux contrôlent l'exécution du programme d'une instruction à la suivante;  elles déterminent quelles déclarations sont exécutées et quand, en se basant sur une certaine condition. La condition est toujours une expression qui renvoie vrai = true ou faux = false. La plupart des instructions de contrôle de flux vérifient un certain genre de condition et dirigent le flux du code en fonction, c'est à dire qu'elles exécutent ou non un bloc de code (à l'exception des instructions de transfert d'exécution de flux et ##[[KeyPgDoloop DO..LOOP]]##, qui a une condition facultative). En outre, toutes les instructions de contrôle de flux peuvent être imbriquées, c'est à dire qu'elles peuvent avoir d'autres instructions de contrôle de flux à l'intérieur de leur propre bloc d'instructions.

	Les instructions de contrôle de flux se déclinent de trois manières: transfert, branchement et boucle. Les instructions de transfert de contrôle de flux transfèrent l'exécution à des parties du code différentes. Les instructions de contrôle de branchement du flux exécutent un certain bloc d'instructions en se basant sur une condition, alors que les instructions de contrôle de boucle exécuter du code à plusieurs reprises tant que/jusqu'à ce qu'une condition soit remplie.

{{fbdoc item="section" value="Instructions de transfert d'exécution de flux"}}
	Ces instructions sont utilisées pour le transfert inconditionnel ou conditionnel, temporaire ou définitif de l'exécution. Les variantes avec "ON" sélectionnent conditionnellement un point de transfert dans une liste d'étiquettes texte.  L'exécution peut être transférée entre différents champs d'application à condition que le branchement ne traverse aucune définition de tableau local, de chaîne de longueur variable ou d'objet.

	=={{fbdoc item="keyword" value="KeyPgGoto|GOTO"}}==
		Transfère sans condition l'exécution à un autre point du code défini par un label texte. L'exécution reprend à la première instruction suivant cette étiquette.

	=={{fbdoc item="keyword" value="KeyPgGosub|GOSUB"}}==
		Transfère sans condition et temporairement l'exécution à un autre point du code défini par un label texte. L'exécution reprend à la première déclaration après cette étiquette. L'exécution est alors ramenée à son emplacement d'origine avec le mot-clé ##[[KeyPgReturn RETURN]]##. Oui, des déclarations ##[[KeyPgGosub GOSUB]]## peuvent être imbriquées, ce qui signifie que plusieurs déclarations ##[[KeyPgGosub GOSUB]]## peuvent être exécutées le premier ##[[KeyPgReturn RETURN]]## correspondant, mais il doit toujours y avoir un ##[[KeyPgReturn RETURN]]## correspondant dans le déroulement de l'application.

	=={{fbdoc item="keyword" value="KeyPgOngoto|ON GOTO"}}==
		Transfère l'exécution vers un point d'une série de points du code définis par des labels texte, en se basant sur la valeur d'une expression.

	=={{fbdoc item="keyword" value="KeyPgOngosub|ON GOSUB"}}==
		Transfère temporairement l'exécution vers un point d'une série de points du code définis par des labels texte, en se basant sur la valeur d'une expression.

{{fbdoc item="section" value="Instructions de branchement"}}
	Ces instructions sont utilisées pour exécuter un bloc d'un certain nombre de blocs d'instructions.

	=={{fbdoc item="keyword" value="KeyPgIfthen|IF..END IF"}}==
		Exécute un bloc d'instructions si une expression est évaluée comme "true" = vrai (la condition). Si et seulement si l'expression est évaluée à "false" = faux, un autre bloc d'instructions peut être exécuté si une autre expression est évaluée à "true" = vrai en utilisant le mot-clé ##[[KeyPgElseif ELSEIF]]##. Si et seulement si toutes ces expressions sont évaluées à faux, un bloc d'instructions peut être exécuté en utilisant le mot-clé ##[[KeyPgElse ELSE]]##.

	=={{fbdoc item="keyword" value="KeyPgSelectcase|SELECT..END SELECT"}}==
		Exécute un bloc d'une série de blocs d'instructions. Cette instruction de branchement tente de répondre à une condition par rapport à une expression en choisissant un cas parmi un certain nombre de cas possibles relatifs à cette expression. Les différents cas sont vérifiés dans l'ordre dans lequel ils sont donnés et le premier cas qui correspondra (vrai) forcera l'exécution du bloc d'instructions correspondant. Comme pour ##[[KeyPgIfthen IF..END IF]]##, un cas par défaut peut être défini quand aucun des cas définis ne correspond à la condition, et, comme avec les instructions de contrôle de boucle, on peut sortir prématurément d'un bloc d'instructions de vérification de cas avec le mot-clé ##[[KeyPgExit EXIT]]##.

{{fbdoc item="section" value="Instructions de bouclage"}}
	Ces déclarations sont utilisées pour l'exécution d'un bloc d'instructions à plusieurs reprises. Dans un bloc d'instructions, la boucle peut être prématurément réexécutée en utilisant le mot-clé ##[[KeyPgContinue CONTINUE]]## ou abandonné en utilisant le mot-clé ##[[KeyPgExit EXIT]]##. Que la boucle se termine par la condition ou avec le mot-clé ##[[KeyPgExit EXIT]]##, l'exécution commence toujours à la première instruction après le bloc.

	=={{fbdoc item="keyword" value="KeyPgWhilewend|WHILE..WEND"}}==
		Exécute un bloc d'instructions tant qu'une expression est évaluée à "true" = vrai (la condition). L'expression est évaluée et vérifiée avant que le bloc d'instructions ne soit exécuté.

	=={{fbdoc item="keyword" value="KeyPgFornext|FOR..NEXT"}}==
		Comme ##[[KeyPgWhilewend WHILE..WEND]]##, mais plus adapté pour boucler un certain nombre fois. Cette boucle initialise un itérateur avec une valeur initiale qui est comparée à une expression de test. Si la comparaison de l'itérateur donne un résultat inférieur ou égal à l'expression de test (la condition), le bloc d'instructions est exécuté et l'itérateur est alors incrémenté. La boucle peut également être configurée de telle sorte que l'itérateur soit décrémenté après chaque boucle, auquel cas il est comparé si supérieur ou égal à l'expression de test. Les itérateurs peuvent être des types de données numériques comme ##[[KeyPgInteger INTEGER]]## ou ##[[KeyPgSingle DOUBLE]]##, ou des types définis par l'utilisateur. Types définis par l'utilisateur doivent mettre en oeuvre l'##[[KeyPgOpFor Opérateur For]]##.
	
	=={{fbdoc item="keyword" value="KeyPgDoloop|DO..LOOP"}}==
		La plus polyvalente des instructions de bouclage, cette boucle peut exécuter un bloc d'instructions tant que/jusqu'à ce que l'expression soit évaluée à "true" = vrai (la condition). Elle peut aussi retarder le contrôle de l'expression jusqu'à ce que le bloc soit exécuté une première fois, utile quand un bloc d'instructions doit être exécuté //au moins une fois//. Enfin, cette boucle peut n'avoir aucune condition et simplement boucler indéfiniment.

{{fbdoc item="back" value="CatPgProgrammer|Programmer's Guide"}}

