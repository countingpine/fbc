{{fbdoc item="title" value="Control Flow Statements"}}----
Des instructions qui dirigent le flux d'ex&eacute;cution.

{{fbdoc item="desc"}}
	Les instructions de contr&ocirc;le de flux contr&ocirc;lent l'ex&eacute;cution du programme d'une instruction &agrave; la suivante;  elles d&eacute;terminent quelles d&eacute;clarations sont ex&eacute;cut&eacute;es et quand, en se basant sur une certaine condition. La condition est toujours une expression qui renvoie vrai = true ou faux = false. La plupart des instructions de contr&ocirc;le de flux v&eacute;rifient un certain genre de condition et dirigent le flux du code en fonction, c'est &agrave; dire qu'elles ex&eacute;cutent ou non un bloc de code (&agrave; l'exception des instructions de transfert d'ex&eacute;cution de flux et ##[[KeyPgDoloop Do..Loop]]##, qui a une condition facultative). En outre, toutes les instructions de contr&ocirc;le de flux peuvent &ecirc;tre imbriqu&eacute;es, c'est &agrave; dire qu'elles peuvent avoir d'autres instructions de contr&ocirc;le de flux &agrave; l'int&eacute;rieur de leur propre bloc d'instructions.

	Les instructions de contr&ocirc;le de flux se d&eacute;clinent de trois mani&egrave;res: transfert, branchement et boucle. Les instructions de transfert de contr&ocirc;le de flux transf&egrave;rent l'ex&eacute;cution &agrave; des parties du code diff&eacute;rentes. Les instructions de contr&ocirc;le de branchement du flux ex&eacute;cutent un certain bloc d'instructions en se basant sur une condition, alors que les instructions de contr&ocirc;le de boucle ex&eacute;cuter du code &agrave; plusieurs reprises tant que/jusqu'&agrave; ce qu'une condition soit remplie.

{{fbdoc item="section" value="Instructions de transfert d'ex&eacute;cution de flux
	Ces instructions sont utilis&eacute;es pour le transfert inconditionnel ou conditionnel, temporaire ou d&eacute;finitif de l'ex&eacute;cution. Les variantes avec "ON" s&eacute;lectionnent conditionnellement un point de transfert dans une liste d'&eacute;tiquettes texte.  L'ex&eacute;cution peut &ecirc;tre transf&eacute;r&eacute;e entre diff&eacute;rents champs d'application &agrave; condition que le branchement ne traverse aucune d&eacute;finition de tableau local, de cha&icirc;ne de longueur variable ou d'objet.

	**[[KeyPgGoto Goto]]**
		Transf&egrave;re sans condition l'ex&eacute;cution &agrave; un autre point du code d&eacute;fini par un label texte. L'ex&eacute;cution reprend &agrave; la premi&egrave;re instruction suivant cette &eacute;tiquette.

	**[[KeyPgGosub GoSub]]**
		Transf&egrave;re sans condition et temporairement l'ex&eacute;cution &agrave; un autre point du code d&eacute;fini par un label texte. L'ex&eacute;cution reprend &agrave; la premi&egrave;re d&eacute;claration apr&egrave;s cette &eacute;tiquette. L'ex&eacute;cution est alors ramen&eacute;e &agrave; son emplacement d'origine avec le mot-cl&eacute; ##[[KeyPgReturn Return]]##. Oui, des d&eacute;clarations ##[[KeyPgGosub GoSub]]## peuvent &ecirc;tre imbriqu&eacute;es, ce qui signifie que plusieurs d&eacute;clarations ##[[KeyPgGosub GoSub]]## peuvent &ecirc;tre ex&eacute;cut&eacute;es le premier ##[[KeyPgReturn Return]]## correspondant, mais il doit toujours y avoir un ##[[KeyPgReturn Return]]## correspondant dans le d&eacute;roulement de l'application.

	**[[KeyPgOngoto On Goto]]**
		Transf&egrave;re l'ex&eacute;cution vers un point d'une s&eacute;rie de points du code d&eacute;finis par des labels texte, en se basant sur la valeur d'une expression.

	**[[KeyPgOngosub On Gosub]]**
		Transf&egrave;re temporairement l'ex&eacute;cution vers un point d'une s&eacute;rie de points du code d&eacute;finis par des labels texte, en se basant sur la valeur d'une expression.

{{fbdoc item="section" value="Instructions de branchement
	Ces instructions sont utilis&eacute;es pour ex&eacute;cuter un bloc d'un certain nombre de blocs d'instructions.

	**[[KeyPgIfthen If..End If]]**
		Ex&eacute;cute un bloc d'instructions si une expression est &eacute;valu&eacute;e comme "true" = vrai (la condition). Si et seulement si l'expression est &eacute;valu&eacute;e &agrave; "false" = faux, un autre bloc d'instructions peut &ecirc;tre ex&eacute;cut&eacute; si une autre expression est &eacute;valu&eacute;e &agrave; "true" = vrai en utilisant le mot-cl&eacute; ##[[KeyPgElseif ElseIf]]##. Si et seulement si toutes ces expressions sont &eacute;valu&eacute;es &agrave; faux, un bloc d'instructions peut &ecirc;tre ex&eacute;cut&eacute; en utilisant le mot-cl&eacute; ##[[KeyPgElse Else]]##.

	**[[KeyPgSelectcase Select..End Select]]**
		Ex&eacute;cute un bloc d'une s&eacute;rie de blocs d'instructions. Cette instruction de branchement tente de r&eacute;pondre &agrave; une condition par rapport &agrave; une expression en choisissant un cas parmi un certain nombre de cas possibles relatifs &agrave; cette expression. Les diff&eacute;rents cas sont v&eacute;rifi&eacute;s dans l'ordre dans lequel ils sont donn&eacute;s et le premier cas qui correspondra (vrai) forcera l'ex&eacute;cution du bloc d'instructions correspondant. Comme pour ##[[KeyPgIfthen If..End If]]##, un cas par d&eacute;faut peut &ecirc;tre d&eacute;fini quand aucun des cas d&eacute;finis ne correspond &agrave; la condition, et, comme avec les instructions de contr&ocirc;le de boucle, on peut sortir pr&eacute;matur&eacute;ment d'un bloc d'instructions de v&eacute;rification de cas avec le mot-cl&eacute; ##[[KeyPgExit Exit]]##.

{{fbdoc item="section" value="Instructions de bouclage
	Ces d&eacute;clarations sont utilis&eacute;es pour l'ex&eacute;cution d'un bloc d'instructions &agrave; plusieurs reprises. Dans un bloc d'instructions, la boucle peut &ecirc;tre pr&eacute;matur&eacute;ment r&eacute;ex&eacute;cut&eacute;e en utilisant le mot-cl&eacute; ##[[KeyPgContinue Continue]]## ou abandonn&eacute; en utilisant le mot-cl&eacute; ##[[KeyPgExit Exit]]##. Que la boucle se termine par la condition ou avec le mot-cl&eacute; ##[[KeyPgExit Exit]]##, l'ex&eacute;cution commence toujours &agrave; la premi&egrave;re instruction apr&egrave;s le bloc.

	**[[KeyPgWhilewend While..Wend]]**
		Ex&eacute;cute un bloc d'instructions tant qu'une expression est &eacute;valu&eacute;e &agrave; "true" = vrai (la condition). L'expression est &eacute;valu&eacute;e et v&eacute;rifi&eacute;e avant que le bloc d'instructions ne soit ex&eacute;cut&eacute;.

	**[[KeyPgFornext For..Next]]**
		Comme ##[[KeyPgWhilewend While..Wend]]##, mais plus adapt&eacute; pour boucler un certain nombre fois. Cette boucle initialise un it&eacute;rateur avec une valeur initiale qui est compar&eacute;e &agrave; une expression de test. Si la comparaison de l'it&eacute;rateur donne un r&eacute;sultat inf&eacute;rieur ou &eacute;gal &agrave; l'expression de test (la condition), le bloc d'instructions est ex&eacute;cut&eacute; et l'it&eacute;rateur est alors incr&eacute;ment&eacute;. La boucle peut &eacute;galement &ecirc;tre configur&eacute;e de telle sorte que l'it&eacute;rateur soit d&eacute;cr&eacute;ment&eacute; apr&egrave;s chaque boucle, auquel cas il est compar&eacute; si sup&eacute;rieur ou &eacute;gal &agrave; l'expression de test. Les it&eacute;rateurs peuvent &ecirc;tre des types de donn&eacute;es num&eacute;riques comme ##[[KeyPgInteger Integer]]## ou ##[[KeyPgSingle Double]]##, ou des types d&eacute;finis par l'utilisateur. Types d&eacute;finis par l'utilisateur doivent mettre en oeuvre l'##[[KeyPgOpFor Op&eacute;rateur For]]##.
	
	**[[KeyPgDoloop Do..Loop]]**
		La plus polyvalente des instructions de bouclage, cette boucle peut ex&eacute;cuter un bloc d'instructions tant que/jusqu'&agrave; ce que l'expression soit &eacute;valu&eacute;e &agrave; "true" = vrai (la condition). Elle peut aussi retarder le contr&ocirc;le de l'expression jusqu'&agrave; ce que le bloc soit ex&eacute;cut&eacute; une premi&egrave;re fois, utile quand un bloc d'instructions doit &ecirc;tre ex&eacute;cut&eacute; //au moins une fois//. Enfin, cette boucle peut n'avoir aucune condition et simplement boucler ind&eacute;finiment.

{{fbdoc item="back" value="CatPgProgrammer|Programmer's Guide"}}