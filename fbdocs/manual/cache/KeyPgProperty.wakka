{{fbdoc item="title" value="PROPERTY"}}----
Déclare ou définit une propriété dans un type ou une classe

{{fbdoc item="syntax"}}##
	{ [[KeyPgType Type]] | [[KeyPgClass Class]] } //typename//
		[[KeyPgDeclare declare]] **Property** //fieldname// () [[KeyPgAs as]] [[DataType datatype]]
		[[KeyPgDeclare declare]] **Property** //fieldname// ( [ [[KeyPgByref byref]] | [[KeyPgByval byval]] ] //new_value// [[KeyPgAs as]] [[DataType datatype]] )
		[[KeyPgDeclare declare]] **Property** //fieldname// ( [ [[KeyPgByref byref]] | [[KeyPgByval byval]] ] //index// [[KeyPgAs as]] [[DataType datatype]] ) [[KeyPgAs as]] [[DataType datatype]]
		[[KeyPgDeclare declare]] **Property** //fieldname// ( [ [[KeyPgByref byref]] | [[KeyPgByval byval]] ] //index// [[KeyPgAs as]] [[DataType datatype]], [ [[KeyPgByref byref]] | [[KeyPgByval byval]] ] //new_value// [[KeyPgAs as]] [[DataType datatype]] )
	End { [[KeyPgType Type]] | [[KeyPgClass Class]] }

	**Property** //typename//.//fieldname// () [[KeyPgAs as]] [[DataType datatype]]
		//statements//
	**End Property**

	**Property** //typename//.//fieldname// ( [ [[KeyPgByref byref]] | [[KeyPgByval byval]] ] //new_value// [[KeyPgAs as]] [[DataType datatype]] )
		//statements//
	**End Property**

	**Property** //typename//.//fieldname// (  [ [[KeyPgByref byref]] | [[KeyPgByval byval]] ] //index// [[KeyPgAs as]] [[DataType datatype]] ) [[KeyPgAs as]] [[DataType datatype]]
		//statements//
	**End Property**

	**Property** //typename//.//fieldname// (  [ [[KeyPgByref byref]] | [[KeyPgByval byval]] ] //index// [[KeyPgAs as]] [[DataType datatype]], [ [[KeyPgByref byref]] | [[KeyPgByval byval]] ] //new_value// [[KeyPgAs as]] [[DataType datatype]] )
		//statements//
	**End Property**
##
{{fbdoc item="param"}}
	##//typename//## 
		nom de ##[[KeyPgType Type]]## ou ##[[KeyPgClass Class]]##
	##//fieldname//## 
		nom de la propriété
	##//new_value//## 
		la valeur passée à la propriété pour être affectée
	##//index//## 
		la valeur de l'indice de la propriété

{{fbdoc item="desc"}}
	Les champs de la ##**Property**## sont utilisés pour obtenir et définir les valeurs de ##[[KeyPgType Type]]## ou ##[[KeyPgClass Class]]## de la même manière que les champs de données, sauf qu'au lieu d'une simple affectation à un champ ou une valeur récupérée à partir du champ, une procédure est exécutée.

	##//typename//## est le nom du type sous lequel la méthode ##**Property**## est déclarée et définie.  La résolution de noms pour ##//typename//## suit les mêmes règles que les procédures en cas d'utilisation dans un ##[[KeyPgNamespace Namespace]]##.

	Une **Property** peut éventuellement avoir un index de paramètres. Quand elles sont indexées, les **Property**s sont accessibles de cette façon: Property(Indice) = Value.

	Un paramètre caché ##[[KeyPgThis this]]## ayant le même type que ##//typename//## est passé à la procédure ##**Property**##.  ##[[KeyPgThis this]]## est utilisé pour accéder aux champs de ##[[KeyPgType Type]]## ou ##[[KeyPgClass Class]]##.

{{fbdoc item="ex"}}
{{fbdoc item="filename" value="examples/manual/udt/property.bas"}}%%(freebasic)
type Vector2D
  as single x, y
  declare operator cast() as string
  declare property Length() as single
  declare property Length( byval new_length as single )
end type

operator Vector2D.cast () as string
  return "(" + str(x) + ", " + str(y) + ")"
end operator

property Vector2D.Length() as single
  Length = sqr( x * x + y * y )
end property

property Vector2D.Length( byval new_length as single )
  dim m as single = Length
  if m <> 0 then
	'' new vector = old / length * new_length
	x *= new_length / m
	y *= new_length / m
  end if
end property

Dim a as Vector2D = ( 3, 4 )

print "a = "; a
print "a.length = "; a.length
print

a.length = 10

print "a = "; a
print "a.length = "; a.length
%%
Affichage:
%%
a = (3, 4)
a.length =  5

a = (6, 8)
a.length =  10
%%
Property Indexé:
{{fbdoc item="filename" value="examples/manual/udt/property2.bas"}}%%(freebasic)
  '' True/False
Namespace BOOL
  Const FALSE = 0
  Const TRUE = NOT FALSE
End Namespace

Type BitNum
  Num as uInteger
  
	'' Get/Set Properties each with an Index.
  Declare Property NumBit( ByVal Index as Integer ) as Integer
  Declare Property NumBit( ByVal Index as Integer, ByVal Value as Byte )
End Type

  '' Get a bit by it's index.
Property BitNum.NumBit( ByVal Index as Integer ) as Integer
  Return Bit( This.Num, Index )
End Property

  '' Set a bit by it's index.
Property BitNum.NumBit( ByVal Index as Integer, ByVal Value as Byte )

	'' Make sure index is in Integer range.
  If Index >= ( Sizeof(This.Num) * 8 ) then
	Print "Out of uInteger Range!"
	exit property
  else
	If Index < 0 then exit property
  End if
  
  If Value = BOOL.FALSE then
	This.Num = BitReSet( This.Num, Index )
  End if
  
  If Value = BOOL.TRUE then
	This.Num = BitSet( This.Num, Index )
  End if
  
End Property


Dim as BitNum Foo


Print "Testing property indexing with data types:"
Print "FOO Number's Value: " & Foo.Num

  '' Set the bit in the number as true.
Foo.NumBit(31) = BOOL.TRUE
Print "Set the 31st bit of FOO"

  '' Print to see if our bit has been changed.
Print "FOO Number's Value: " & Foo.Num
Print "FOO 31st Bit Set? " & Foo.NumBit(31)
sleep
Print ""
%%
Affichage:
%%
Testing property indexing with data types:
FOO Number's Value: 0
Set the 31st bit of FOO
FOO Number's Value: 2147483648
FOO 31st Bit Set? -1
%%
{{fbdoc item="see"}}
	- ##[[KeyPgType Class]]##
	- ##[[KeyPgType Type]]##

{{fbdoc item="back" value="CatPgUserDefTypes|User Defined Types"}}

