{{fbdoc item="title" value="PROPERTY"}}----
D&eacute;clare ou d&eacute;finit une propri&eacute;t&eacute; dans un type ou une classe

{{fbdoc item="syntax"}}##
	{ [[KeyPgType Type]] | [[KeyPgClass Class]] } //typename//
		[[KeyPgDeclare declare]] **Property** //fieldname// () [[KeyPgAs as]] [[DataType datatype]]
		[[KeyPgDeclare declare]] **Property** //fieldname// ( [ [[KeyPgByref byref]] | [[KeyPgByval byval]] ] //new_value// [[KeyPgAs as]] [[DataType datatype]] )
		[[KeyPgDeclare declare]] **Property** //fieldname// ( [ [[KeyPgByref byref]] | [[KeyPgByval byval]] ] //index// [[KeyPgAs as]] [[DataType datatype]] ) [[KeyPgAs as]] [[DataType datatype]]
		[[KeyPgDeclare declare]] **Property** //fieldname// ( [ [[KeyPgByref byref]] | [[KeyPgByval byval]] ] //index// [[KeyPgAs as]] [[DataType datatype]], [ [[KeyPgByref byref]] | [[KeyPgByval byval]] ] //new_value// [[KeyPgAs as]] [[DataType datatype]] )
	End { [[KeyPgType Type]] | [[KeyPgClass Class]] }

	**Property** //typename//.//fieldname// () [[KeyPgAs as]] [[DataType datatype]]
		//statements//
	**End Property**

	**Property** //typename//.//fieldname// ( [ [[KeyPgByref byref]] | [[KeyPgByval byval]] ] //new_value// [[KeyPgAs as]] [[DataType datatype]] )
		//statements//
	**End Property**

	**Property** //typename//.//fieldname// (  [ [[KeyPgByref byref]] | [[KeyPgByval byval]] ] //index// [[KeyPgAs as]] [[DataType datatype]] ) [[KeyPgAs as]] [[DataType datatype]]
		//statements//
	**End Property**

	**Property** //typename//.//fieldname// (  [ [[KeyPgByref byref]] | [[KeyPgByval byval]] ] //index// [[KeyPgAs as]] [[DataType datatype]], [ [[KeyPgByref byref]] | [[KeyPgByval byval]] ] //new_value// [[KeyPgAs as]] [[DataType datatype]] )
		//statements//
	**End Property**
##
{{fbdoc item="param"}}
	##//typename//## 
		nom de ##[[KeyPgType Type]]## ou ##[[KeyPgClass Class]]##
	##//fieldname//## 
		nom de la propri&eacute;t&eacute;
	##//new_value//## 
		la valeur pass&eacute;e &agrave; la propri&eacute;t&eacute; pour &ecirc;tre affect&eacute;e
	##//index//## 
		la valeur de l'indice de la propri&eacute;t&eacute;

{{fbdoc item="desc"}}
	Les champs de la ##**Property**## sont utilis&eacute;s pour obtenir et d&eacute;finir les valeurs de ##[[KeyPgType Type]]## ou ##[[KeyPgClass Class]]## de la m&ecirc;me mani&egrave;re que les champs de donn&eacute;es, sauf qu'au lieu d'une simple affectation &agrave; un champ ou une valeur r&eacute;cup&eacute;r&eacute;e &agrave; partir du champ, une proc&eacute;dure est ex&eacute;cut&eacute;e.

	##//typename//## est le nom du type sous lequel la m&eacute;thode ##**Property**## est d&eacute;clar&eacute;e et d&eacute;finie.  La r&eacute;solution de noms pour ##//typename//## suit les m&ecirc;mes r&egrave;gles que les proc&eacute;dures en cas d'utilisation dans un ##[[KeyPgNamespace Namespace]]##.

	Une **Property** peut &eacute;ventuellement avoir un index de param&egrave;tres. Quand elles sont index&eacute;es, les **Property**s sont accessibles de cette fa&ccedil;on: Property(Indice) = Value.

	Un param&egrave;tre cach&eacute; ##[[KeyPgThis This]]## ayant le m&ecirc;me type que ##//typename//## est pass&eacute; &agrave; la proc&eacute;dure ##**Property**##.  ##[[KeyPgThis This]]## est utilis&eacute; pour acc&eacute;der aux champs de ##[[KeyPgType Type]]## ou ##[[KeyPgClass Class]]##.

{{fbdoc item="ex"}}
{{fbdoc item="filename" value="examples/manual/udt/property.bas"}}%%(freebasic)
type Vector2D
  as single x, y
  declare operator cast() as string
  declare property Length() as single
  declare property Length( byval new_length as single )
end type

operator Vector2D.cast () as string
  return "(" + str(x) + ", " + str(y) + ")"
end operator

property Vector2D.Length() as single
  Length = sqr( x * x + y * y )
end property

property Vector2D.Length( byval new_length as single )
  dim m as single = Length
  if m <> 0 then
	'' new vector = old / length * new_length
	x *= new_length / m
	y *= new_length / m
  end if
end property

Dim a as Vector2D = ( 3, 4 )

print "a = "; a
print "a.length = "; a.length
print

a.length = 10

print "a = "; a
print "a.length = "; a.length
%%
Affichage:
%%
a = (3, 4)
a.length =  5

a = (6, 8)
a.length =  10
%%Property Index&eacute;:
Property Indexing:
'' True/False
  Namespace BOOL
Const FALSE = 0
  Const TRUE = Not FALSE
  End Namespace
Type BitNum

Num As UInteger
  '' Get/Set Properties each with an Index.
  
	Declare Property NumBit( ByVal Index As Integer ) As Integer
  Declare Property NumBit( ByVal Index As Integer, ByVal Value As Byte )
  End Type
'' Get a bit by it's index.

  Property BitNum.NumBit( ByVal Index As Integer ) As Integer
Return Bit( This.Num, Index )
  End Property
'' Set a bit by it's index.

  Property BitNum.NumBit( ByVal Index As Integer, ByVal Value As Byte )
'' Make sure index is in Integer range.

	If Index >= ( SizeOf(This.Num) * 8 ) Then
  Print "Out of uInteger Range!"
	Exit Property
	Else
  If Index < 0 Then Exit Property
	End If
  If Value = BOOL.FALSE Then
  
  This.Num = BitReset( This.Num, Index )
	End If
  If Value = BOOL.TRUE Then
  
  This.Num = BitSet( This.Num, Index )
	End If
  End Property
  
Dim As BitNum Foo


Print "Testing property indexing with data types:"


Print "FOO Number's Value: " & Foo.Num
'' Set the bit in the number as true.

  Foo.NumBit(31) = BOOL.TRUE
Print "Set the 31st bit of FOO"
'' Print to see if our bit has been changed.

  Print "FOO Number's Value: " & Foo.Num
Print "FOO 31st Bit Set? " & Foo.NumBit(31)
Sleep
Print ""
%%
Affichage:
%%
Testing property indexing with data types:
FOO Number's Value: 0
Set the 31st bit of FOO
FOO Number's Value: 2147483648
FOO 31st Bit Set? -1
%%
{{fbdoc item="see"}}
- ##[[KeyPgType Class]]##
	- ##[[KeyPgType Type]]##
	- ##[[KeyPgType Type]]##

{{fbdoc item="back" value="CatPgUserDefTypes|User Defined Types"}}