{{fbdoc item="title" value="Storage Classes"}}----
Visibilité et durée de vie des variables, des objets et des tableaux

Une classe de stockage pour variable, object ou tableau détermine quand et où de la mémoire leur est allouée et quand elle sera détruite. Il existe deux 2 classes de stockage dans FreeBASIC: //automatic// et //static//.

{{fbdoc item="section" value="Automatic (Automatique)"}}

	La durée de vie d'une variable, d'un objet ou d'un tableau //automatic// commence au point de déclaration et se termine quand on quitte la portée de leur déclaration.
	
	Les entités //automatic// ont la garantie d'avoir un stockage unique pour chaque instance du bloc dans lequel elles sont déclarées. Par exemple, les variables //automatic// déclarées dans une procédure seront alloués à des adresses différentes et auront un état unique (valeur) pour chaque appel de la procédure.
	
	Les variables, objets et tableaux //automatic// sont définis en utilisant les mots-clefs ##[[KeyPgDim Dim]]##, ##[[KeyPgRedim Redim]]## et ##[[KeyPgVar Var]]## sans le spécificateur ##[[KeyPgShared Shared]]##.

	La mémoire pour les variables, objets et tableaux //automatic// est allouée sur la pile du programme.
	
	Les variables, objets et tableaux //automatic// ne sont pas liés.

{{fbdoc item="section" value="Static (Statique)"}}

	La durée de vie d'une variable, d'un objet ou d'un tableau //static// commence à la création du programme et se termine quand on quitte le programme.
	
	Les entités //static// ont la garantie d'avoir le même stockage pour chaque instance du bloc dans lequel elles sont déclarées. Par exemple, les variables //static// déclarées dans une procédure seront alloués à la même adresse et conserveront leur état (valeur) pour chaque appel à la procédure.
	
	Les variables, objets et tableaux //static// sont déclarées en utilisant le mot-clef ##[[KeyPgStatic Static]]##. Entités déclarés en utilisant le spécificateur ##[[KeyPgShared Shared]]## sont implicitement //static//. Toutes les entités déclarées dans une procédure qui est déclarée en utilisant le spécificateur ##[[KeyPgStatic Static]]## sont aussi implicitement //static//.
	
	La mémoire pour les variables, objets et tableaux //static// est allouée dans la section ##.BSS## de l'exécutable ou dans la section ##.DATA## si les variables, objets et tableaux ont été  initialisés lors de leur définition. Les tableaux de longueur variable //static// doivent être déclarés vides, avec une liste de gamme d'indices vide; leurs éléments de données sont toujours alloués dans le stock libre (quand ils sont redimensionnés), mais le tableau interne des données est alloué dans la section ##.DATA## de l'exécutable pour permettre aux l'éléments de données de persister tout au long de l'exécution du programme.
	
	Les variables, objets et tableaux //static// sont liés en interne par défaut, à moins qu'ils n'aient été préalablement déclarés en utilisant les mots-clefs ##[[KeyPgExtern Extern]]## ou ##[[KeyPgCommon Common]]##.

{{fbdoc item="target"}}
	-  Sous DOS et Windows, la taille de la pile du programme peut être ajustée à la compilation en utilisant l'[[CompilerCmdLine option de ligne de commande]] ##//-t//##. Sous Linux, la taille de la pile du programme peut être ajustée au moment du chargement en modifiant ##/etc/security/limits.conf## ou sur une base par thread à l'aide de la commande interne du shell ##ulimit##.

{{fbdoc item="diff"}}
	- ""QuickBASIC"" permet aux entités //static// d'être déclarées seulement dans les procédures et les routines ##DEF FN##.

{{fbdoc item="see"}}
	- ##[[KeyPgExtern Extern]]##, ##[[KeyPgCommon Common]]##
	- ##[[KeyPgDim Dim]]##, ##[[KeyPgRedim Redim]]##, ##[[KeyPgVar Var]]##, ##[[KeyPgShared Shared]]##
	- ##[[KeyPgStatic Static]]##
	- [[ProPgVarProcLinkage Liens]]

{{fbdoc item="back" value="CatPgProgrammer|Programmer's Guide"}}