{{fbdoc item="title" value="CPTR"}}----
Convertit une expression pointeur en pointeur de type de données spécifié

{{fbdoc item="syntax"}}##
	**Cptr**( //""PointerDataType""//, //expression// )
##
{{fbdoc item="desc"}}
	Convertit ##//expression//## vers ##//""PointerDataType""//##.

	##//""PointerDataType""//## doit être un ##[[KeyPgPointer Pointer]]## vers un type de données (par exemple, un type de données ##[[KeyPgPtr Ptr]]## ou un ##[[KeyPgAny Any]]## ##[[KeyPgPtr Ptr]]##), ou un ##[[KeyPgTypeAlias Type (Alias)]]##.
	##//expression//## peut avoir un autre type de pointeur ou être un ##[[KeyPgInteger Integer]]##.

~&//Note: Actuellement, FB n'impose pas effectivement que ##//""PointerDataType""//## soit un pointeur.  Cela changera probablement dans les futures versions.  À l'heure actuelle, il affichera un avertissement si vous tentez de convertir vers un non-pointeur, si vous compilez avec le commutateur de compilateur ##**[[CompilerOptw -w pedantic]]**##.//

{{fbdoc item="ex"}}
{{fbdoc item="filename" value="examples/manual/casting/cptr.bas"}}%%(freebasic)
dim intval as integer
dim intptr as integer ptr
intval = &h0080
intptr = @intval
'' will print -128 and 128, as the first expression will be "seen" as an signed byte
print *cptr( byte ptr, intptr ), *intptr
%%

{{fbdoc item="lang"}}
	- Non disponible dans le dialecte //[[CompilerOptlang -lang qb]]// sauf si référencé avec l'alias ##**""__Cptr""**##.

{{fbdoc item="diff"}}
	- Nouveau pour ""FreeBASIC""

{{fbdoc item="see"}}
	- ##[[KeyPgPtr Ptr]]##
	- ##[[KeyPgCast Cast]]##
	- ##[[KeyPgCbyte Cbyte]]##
	- ##[[KeyPgCshort Cshort]]##
	- ##[[KeyPgCint Cint]]##
	- ##[[KeyPgClngint Clngint]]##
	- ##[[KeyPgCsng Csng]]##
	- ##[[KeyPgCdbl Cdbl]]## 

{{fbdoc item="back" value="CatPgCasting|Converting Data Types"}}