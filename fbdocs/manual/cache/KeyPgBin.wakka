{{fbdoc item="title" value="BIN"}}----
Retourne une chaîne binaire (base 2) représentation d'un entier

{{fbdoc item="syntax"}}##
	[[KeyPgDeclare declare]] [[KeyPgFunction function]] **Bin** [[KeyPgOverload overload]] ( [[KeyPgByval byval]] //number// [[KeyPgAs as]] [[KeyPgByte byte]] ) [[KeyPgAs as]] [[KeyPgString string]]
	
	[[KeyPgDeclare declare]] [[KeyPgFunction function]] **Bin** ( [[KeyPgByval byval]] //number// [[KeyPgAs as]] [[KeyPgShort short]] ) [[KeyPgAs as]] [[KeyPgString string]]
	
	[[KeyPgDeclare declare]] [[KeyPgFunction function]] **Bin** ( [[KeyPgByval byval]] //number// [[KeyPgAs as]] [[KeyPgInteger integer]] ) [[KeyPgAs as]] [[KeyPgString string]]
	[[KeyPgDeclare declare]] [[KeyPgFunction function]] **Bin** ( [[KeyPgByval byval]] //number// [[KeyPgAs as]] [[KeyPgInteger integer]], [[KeyPgByval byval]] //digits// [[KeyPgAs as]] [[KeyPgInteger integer]] ) [[KeyPgAs as]] [[KeyPgString string]]
	
	[[KeyPgDeclare declare]] [[KeyPgFunction function]] **Bin** ( [[KeyPgByval byval]] //number// [[KeyPgAs as]] [[KeyPgLongint longint]] ) [[KeyPgAs as]] [[KeyPgString string]]
	[[KeyPgDeclare declare]] [[KeyPgFunction function]] **Bin** ( [[KeyPgByval byval]] //number// [[KeyPgAs as]] [[KeyPgLongint longint]], [[KeyPgByval byval]] //digits// [[KeyPgAs as]] [[KeyPgInteger integer]] ) [[KeyPgAs as]] [[KeyPgString string]]	
##
{{fbdoc item="usage"}}##
	//result// = **Bin**[$]( //number// [, //digits// ] )
##
{{fbdoc item="param"}}
	##//number//##
		Un nombre ou une expression transformé en nombre. Un nombre en virgule flottante sera converti en ##[[KeyPgLongint longint]]##.
	##//digits//##
		Nombre de chiffres de la chaîne renvoyée.

{{fbdoc item="ret"}}
	Une chaîne contenant la représentation binaire non-signée de ##//number//##.

{{fbdoc item="desc"}}
	Retourne une chaîne binaire représentation de la valeur binaire non-signée de l'entier ##//number//##. Chiffres binaires de 0 à 1.

	Si vous spécifiez ##//digits//## > ##0##, la chaîne résultat aura exactement cette longueur.  Elle sera tronquée ou complètée par des zéros sur la gauche, si nécessaire.

	La longueur de la chaîne ne dépassera pas le nombre de bits maximum requis pour le type de ##//number//## (32 pour un ##[[KeyPgInteger Integer (entier)]]##, 64 pour un ##[[KeyPgLongint LongInt (entier long)]])##.

	Si vous désirez l'opposé, par exemple convertir une chaîne binaire vers un nombre, la meilleure façon de le faire est d'ajouter ##"&B"## au début de la chaîne, et la convertir en utilisant ##[[KeyPgValint Valint]]## ou ##[[KeyPgVallng Vallng]]##, de façon similaire à une chaîne numérique normale.  Par exemple ##[[KeyPgValint Valint]]("&B101")##

{{fbdoc item="ex"}}
{{fbdoc item="filename" value="examples/manual/strings/bin.bas"}}%%(freebasic)
Print Bin(54321)
Print Bin(54321, 5)
Print Bin(54321, 20)
%%
	produira la sortie:

%%1101010000110001
10001
00001101010000110001
%%
{{fbdoc item="lang"}}
	- Non disponible dans le dialecte //[[CompilerOptlang -lang qb]]// sauf si référencé avec l'alias ##**""__Bin""**##.

{{fbdoc item="diff"}}
	- Nouveau pour ""FreeBASIC""

{{fbdoc item="see"}}
	- ##[[KeyPgOct Oct]]##
	- ##[[KeyPgHex Hex]]##
	- ##[[KeyPgValint Valint]]##
	- ##[[KeyPgVallng Vallng]]##

{{fbdoc item="back" value="CatPgString|String Functions"}}