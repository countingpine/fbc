{{fbdoc item="title" value="BIN"}}----
Retourne une cha&icirc;ne binaire (base 2) repr&eacute;sentation d'un entier

{{fbdoc item="syntax"}}##
	[[KeyPgDeclare declare]] [[KeyPgFunction function]] **Bin** [[KeyPgOverload overload]] ( [[KeyPgByval byval]] //number// [[KeyPgAs as]] [[KeyPgByte byte]] ) [[KeyPgAs as]] [[KeyPgString string]]
	
	[[KeyPgDeclare declare]] [[KeyPgFunction function]] **Bin** ( [[KeyPgByval byval]] //number// [[KeyPgAs as]] [[KeyPgShort short]] ) [[KeyPgAs as]] [[KeyPgString string]]
	
	[[KeyPgDeclare declare]] [[KeyPgFunction function]] **Bin** ( [[KeyPgByval byval]] //number// [[KeyPgAs as]] [[KeyPgInteger integer]] ) [[KeyPgAs as]] [[KeyPgString string]]
	[[KeyPgDeclare declare]] [[KeyPgFunction function]] **Bin** ( [[KeyPgByval byval]] //number// [[KeyPgAs as]] [[KeyPgInteger integer]], [[KeyPgByval byval]] //digits// [[KeyPgAs as]] [[KeyPgInteger integer]] ) [[KeyPgAs as]] [[KeyPgString string]]
	
	[[KeyPgDeclare declare]] [[KeyPgFunction function]] **Bin** ( [[KeyPgByval byval]] //number// [[KeyPgAs as]] [[KeyPgLongint longint]] ) [[KeyPgAs as]] [[KeyPgString string]]
	[[KeyPgDeclare declare]] [[KeyPgFunction function]] **Bin** ( [[KeyPgByval byval]] //number// [[KeyPgAs as]] [[KeyPgLongint longint]], [[KeyPgByval byval]] //digits// [[KeyPgAs as]] [[KeyPgInteger integer]] ) [[KeyPgAs as]] [[KeyPgString string]]	
##
{{fbdoc item="usage"}}##
	//result// = **Bin**[$]( //number// [, //digits// ] )
##
{{fbdoc item="param"}}
	##//number//##
		Un nombre ou une expression transform&eacute; en nombre. Un nombre en virgule flottante sera converti en ##[[KeyPgLongint LongInt]]##.
	##//digits//##
		Nombre de chiffres de la cha&icirc;ne renvoy&eacute;e.

{{fbdoc item="section" value="Valeur retourn&eacute;e
	Une cha&icirc;ne contenant la repr&eacute;sentation binaire non-sign&eacute;e de ##//number//##.

{{fbdoc item="desc"}}
	Retourne une cha&icirc;ne binaire repr&eacute;sentation de la valeur binaire non-sign&eacute;e de l'entier ##//number//##. Chiffres binaires de 0 &agrave; 1.

	Si vous sp&eacute;cifiez ##//digits//## > 0, la cha&icirc;ne r&eacute;sultat aura exactement cette longueur.  Elle sera tronqu&eacute;e ou compl&egrave;t&eacute;e par des z&eacute;ros sur la gauche, si n&eacute;cessaire.

	La longueur de la cha&icirc;ne ne d&eacute;passera pas le nombre de bits maximum requis pour le type de ##//number//## (32 pour un ##[[KeyPgInteger Integer (entier)]]##, 64 pour un ##[[KeyPgLongint LongInt (entier long)]])##.

	Si vous d&eacute;sirez l'oppos&eacute;, par exemple convertir une cha&icirc;ne binaire vers un nombre, la meilleure fa&ccedil;on de le faire est d'ajouter ##"&B"## au d&eacute;but de la cha&icirc;ne, et la convertir en utilisant ##[[KeyPgValint ValInt]]## ou ##[[KeyPgVallng ValLng]]##, de fa&ccedil;on similaire &agrave; une cha&icirc;ne num&eacute;rique normale.  Par exemple ##[[KeyPgValint ValInt]]("&B101")##

{{fbdoc item="ex"}}
{{fbdoc item="filename" value="examples/manual/strings/bin.bas"}}%%(freebasic)
Print Bin(54321)
Print Bin(54321, 5)
Print Bin(54321, 20)
%%
	produira la sortie:

%%1101010000110001
10001
00001101010000110001
%%
{{fbdoc item="lang"}}
	- Non disponible dans le dialecte //[[CompilerOptlang -lang qb]]// sauf si r&eacute;f&eacute;renc&eacute; avec l'alias ##**__Bin**##.

{{fbdoc item="diff"}}
	- Nouveau pour Freebasic

{{fbdoc item="see"}}
	- ##[[KeyPgOct Oct]]##
	- ##[[KeyPgHex Hex]]##
	- ##[[KeyPgValint Valint]]##
	- ##[[KeyPgVallng Vallng]]##

{{fbdoc item="back" value="CatPgString|String Functions"}}