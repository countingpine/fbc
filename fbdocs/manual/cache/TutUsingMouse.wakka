{{fbdoc item="title" value="Using the Mouse in FreeBASIC"}}----

Après avoir fait quelques recherches, j'ai rapidement remarqué qu'il n'y avait tout simplement pas tutoriel ou une technique officielle pour la manipulation de la souris dans une application console Windows dans FreeBASIC. Par conséquent, j'ai décidé d'écrire cette technique afin de donner un tel exemple à la Communauté FreeBASIC. Comme vous le savez une console de Windows est toujours informée de la souris par du fait qu'il s'agit d'une fenêtre de console, ce qui signifie qu'elle a été créée avec l'utilisation de l'API Windows, ce qui signifie que la souris peut être accessible à partir de la fenêtre de console. Il n'y a donc pas nécessaire d'activer ou de désactiver la souris dans votre code. Tout ce que vous devez faire est de Get ou Set les coordonnées X et Y et d'obtenir les états des boutons de la souris. Nous allons couvrir les sujets suivants dans ce tutoriel:

	-Obtenir les coordonnées de la souris:
	  Le curseur de la souris, quand la souris est déplacée, met à jour sa position continuellement. Vous pouvez obtenir ces valeurs pour déterminer où le pointeur se trouve actuellement à l'écran.

	-Paramètrer les coordonnées de la souris:
	  Pour une raison quelconque, il peut être nécessaire pour positionner le pointeur de la souris à un endroit autre que celui où il se trouve actuellement.

	-Obtenir les statuts des boutons de la souris:
	  Tout simplement, lorsque l'utilisateur appuie sur un bouton de la souris, elle retourne une valeur qui dit qu'un bouton est pressé et aussi lequel est pressé. A partir de ces valeurs, vous pouvez décider quelle partie de votre code sera exécutée.

Comme avec la plupart des tutoriels, celui-là aussi peut être mieux expliqué à l'aide d'un exemple de programme. Nous allons créer un programme très simple qui agit sur l'interaction de l'utilisateur avec la souris et certaines zones de l'écran. Il devrait fournir les bases de code nécessaires pour opérer efficacement et contrôler la souris dans vos projets personnels de programmation.

IMPORTANT: Il est impératif que vous fixiez vous-même un mode graphique pour utiliser la souris. Les commandes de la souris retournent toujours une valeur de -1 si le mode graphique n'est pas réglé.

==LA DESCRIPTION DU PROGRAMME EXEMPLE==

Dans un souci de programme de démonstration, les choses seront, autant que possible, tout à fait simples et directes. Le programme affiche trois items en haut de l'écran et en fonction de celui sur lequel vous cliquez un message différent s'affiche sur l'écran. Cela devrait vous donner suffisamment d'informations pour savoir comment travailler avec la souris en FreeBASIC.

En FreeBASIC, il y a essentiellement 2 commandes dont vous devez vous soucier lorsque vous essayez de manipuler la souris dans vos projets. Here they are with their syntax explained as per the documentation.

--------------------------------------------------------------------------------
{{fbdoc item="title" value="GETMOUSE"}}
----
{{fbdoc item="syntax"}}
GETMOUSE x, y[, [wheel][, [buttons]]]

{{fbdoc item="desc"}}
GETMOUSE récupère la position de la souris et l'état des boutons. 

La position de la souris est stockée dans X et Y lorsque la fonction est appelée. Si la souris n'est pas dans la fenêtre du programme, X et Y seront à -1.

**"wheel"** est le compteur de la molette de la souris. La rotation de la roue vers l'avant fait augmenter le comptage, vers l'arrière le fait diminuer. Si la souris n'est pas présente ou hors de la fenêtre du programme, "wheel" sera à -1.

**"buttons"** stocke l'état des boutons. A la sortie de la fonction, il y aura retour d'un masque binaire indiquant l'état des boutons. Le bit 0 est à 1 si le bouton de gauche est appuyé; le bit 1 à 1 si le bouton de droite est appuyé; le bit 2 à 1 si le bouton du milieu est appuyé.

*GETMOUSE est utilisé dans les modes graphiques, définis SEULEMENT à l'aide de la commande SCREEEN.*


---------------------------------------------------------------------------------
{{fbdoc item="title" value="SETMOUSE"}}
----
{{fbdoc item="syntax"}}
SETMOUSE x, y, visibility

{{fbdoc item="desc"}}
SETMOUSE fixera les coordonnées X, Y du pointeur de la souris, ainsi que le réglage de sa visibilité. 

La position de la souris est réglée en utilisant les paramètres X et Y. 

La souris sera visible si **"visibility"** est à 1, et invisible lorsque **"visibility"** est à 0.

*SETMOUSE est destiné aux modes graphiques lancés en utilisant l'instruction SCREEN uniquement*

-------------------------------------------------------------------------------- 

==LE CODAGE COMMENCE==

Voici un ensemble de constantes que je déclare au début du module. C'est tout simplement pour gagner un peu de clarté dans le reste du code de l'exemple de programmation.
%%(freebasic)
	CONST LEFTBUTTON = 1 
	CONST MIDDLEBUTTON = 4 
	CONST RIGHTBUTTON = 2 
	CONST SHOWMOUSE = 1
	CONST HIDEMOUSE = 0 
%%
Dans une première étape de cet exemple, nous allons déclarer des variables que nous allons utiliser tout au long de ce programme. Bien sûr, vous n'avez pas à déclarer vos variables, mais moi, je tiens à le faire parce que quand vous le faites vous savez exactement pourquoi vous déclarez ces variables. Pour moi, c'est une bonne pratique.
%%(freebasic)
	DIM CurrentX AS INTEGER 
	DIM CurrentY AS INTEGER
	DIM MouseButtons AS INTEGER
	DIM CanExit AS INTEGER
	DIM AS STRING A,B,C
%%
L'idée ici est de tout faire dans une boucle de telle sorte que nous pouvons également contrôler la façon dont le programme se termine. Nous allons donc créer une boucle qui se terminera lorsque la variable **"CanExit"** sera égale à 0. Dans du boucle, nous allons Interroger la souris et imprimer certaines valeurs de base. (Cette partie est extraite de l'exemple fourni dans l'explication de la syntaxe de GETMOUSE dans le fichier gfxlib.txt). N'oubliez pas de configurer votre mode graphique car il est indispensable pour obtenir des valeurs de retour valides des commandes de la souris. Nous allons utiliser Screen 12 pour notre exemple.
%%(freebasic)
SCREEN 12 
CanExit = 1
 
DO WHILE CanExit <> 0 
	GETMOUSE CurrentX, CurrentY, , MouseButtons 
	IF CurrentX < 0 THEN
	 Print "La souris est hors contexte." 
	ELSE
	IF MouseButtons AND LEFTBUTTON THEN A="L"
	IF MouseButtons AND MIDDLEBUTTON THEN B="M"
	IF MouseButtons AND RIGHTBUTTON THEN C="R"
	 Print Using "Position de la souris: ###:### Boutons: &&&"; CurrentX; CurrentY;A;B;C 
	 A="":B="":C=""	 
	END IF 
LOOP
%%
Cet exemple affichera en permanence essentiellement des informations sur l'endroit où se trouve la souris, si elle est sur la fenêtre du programme et le cas échéant quel bouton la souris est appuyé. L'instruction GETMOUSE basiquement place les coordonnées X et Y courantes dans nos variables **CurrentX** et **CurrentY** et l'état des boutons de la souris dans notre variable **Buttons**. Les trois instructions If afficheront L si le bouton gauche a été appuyé, M si le bouton du milieu (ou la molette) a été appuyé et R si le bouton droit a été appuyé.

Pour l'étape suivante, comme nous voulons contrôler un peu ce qui se passe avec la souris, nous afficherons quelques choses supplémentaires au début du programme et contrôlerons ce qui se passe par la suite, dans la boucle. C'est un texte ordinaire qui est affiché, cela pourrait être remplacé par une série de commandes en ligne ou quelque chose pour dessiner un bouton pour les différentes options. Mais c'est en dehors du champ d'application de ce tutoriel. En se débarrassant des déclarations d'impression non désirées du code ci-dessus, la boucle doit maintenant ressembler à ceci:
%%(freebasic)
	SCREEN 12 
	SETMOUSE 1, 1, 1
	CanExit = 1
	LOCATE 1,1
	PRINT " | FIRST | SECOND | THIRD | EXIT | "
	DO WHILE CanExit <> 0
	 LOCATE 1,1
	 GETMOUSE CurrentX, CurrentY, , MouseButtons
	LOOP 
%%
Essentiellement nous affichons la ligne qui contient " | FIRST | SECOND | THIRD | EXIT | " en haut de l'écran. Et nous entrons dans la boucle qui interroge la souris. Bien sûr, en ce moment rien ne se passera si vous appuyez sur un bouton, car il n'y a pas de code pour lui. Dans notre exemple, nous allons ajouter du code qui affiche simplement l'option qui a été sélectionnée. Si l'utilisateur sélectionne l'option EXIT, nous imprimerons l'option et nous sortirons de la boucle. Nous allons également ajouter une instruction d'affichage en dehors de la boucle avec un SLEEP pour dire à l'utilisateur que nous sommes vraiment en dehors de la boucle et donc que le programme est terminé. Avec tout cela, la code devrait maintenant ressembler à ceci. Je mets le fichier source complet ici, donc vous pouvez le copier et le coller facilement.
%%(freebasic)
CONST LEFTBUTTON   = 1
CONST MIDDLEBUTTON = 4   ' UNUSED IN THIS DEMO
CONST RIGHTBUTTON  = 2   ' UNUSED IN THIS DEMO
CONST SHOWMOUSE    = 1
CONST HIDEMOUSE    = 0

DIM CurrentX     AS INTEGER
DIM CurrentY     AS INTEGER
DIM MouseButtons AS INTEGER
DIM CanExit      AS INTEGER

SCREEN 12
SETMOUSE 1, 1, SHOWMOUSE
CanExit = 1
LOCATE 1,1
PRINT " | FIRST | SECOND | THIRD | EXIT | "

DO
   GETMOUSE CurrentX, CurrentY, , MouseButtons
   IF MouseButtons AND LEFTBUTTON THEN
	  IF CurrentY <= 12 THEN
	     IF CurrentX >= 0 AND CurrentX <=75 THEN
	        LOCATE 12, 1
	        Print "FIRST Option selectionnee ";
	     ELSEIF CurrentX >= 76 AND CurrentX <= 147 THEN
	        LOCATE 12, 1
	        Print "SECOND Option selectionnee";
	     ELSEIF CurrentX >= 148 AND CurrentX <=212 THEN
	        LOCATE 12, 1
	        Print "THIRD Option selectionnee ";
	     ELSEIF CurrentX >= 213 AND CurrentX <=268 THEN
	        LOCATE 12, 1
	        Print "Derniere Option selectionnee  ";
	        EXIT DO
	     ENd IF
	  END IF
   END IF
LOOP WHILE INKEY$ = ""

SETMOUSE 1, 1, HIDEMOUSE
PRINT
Print "ET MAINTENANT ON EST EN DEHORS DE LA BOUCLE"
SLEEP
%%

Vous pouvez voir les nombreuses instructions IF dans ce dernier morceau de code. Les nombres qui sont là ont été déterminés par rapport aux coordonnées renvoyées par SCREEN 12. Toutefois, elles devraient fonctionner dans tous les modes graphiques, car un pixel est un pixel dans une fenêtre graphique de la console. Chaque IF représente le lieu où les différentes options sont écrites à l'écran. Si vous voulez utiliser une routine de bouton graphique,vous pouvez simplement utiliser les mêmes largeur et hauteur pour dessiner le bouton dans ces instructions IF pour savoir quel bouton a été cliqué.

==EN CONCLUSION==

Comme vous pouvez le voir, utiliser la souris est très simple dans FreeBASIC. Vous pouvez utiliser une simple instruction comme la commande d'affichage PRINT pour dessiner vos écrans ou vous pouvez utiliser une commande graphique comme LINE pour dessiner vos écrans graphiquement. Peu importe la façon dont vous choisissez d' élaborer vos écrans, les instructions SETMOUSE et GETMOUSE fonctionneront de la même manière et retourneront les mêmes valeurs. Tout ce que vous avez à faire, c'est d'obtenir les informations, et d'obliger vos programmes à faire ce que vous voulez qu'ils fassent si on appuye sur un bouton, sélectionne une option, ou même dans le cas d'un jeu, vous pouvez facilement faire bouger le personnage principal vers l'endroit où vous avez cliqué sur l'écran. A vous de choisir.

Comme toujours, si vous avez des questions concernant ce tutoriel ou sur tout autre que j'ai écrit, n'hésitez pas à m'envoyer un email et nous verrons ce que nous pouvons faire pour résoudre votre problème particulier.


MystikShadows
Stéphane Richard
srichard@adaworld.com 