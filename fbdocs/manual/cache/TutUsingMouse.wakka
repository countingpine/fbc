{{fbdoc item="title" value="Using the Mouse in FreeBASIC"}}----<div id="fb_tab_r"> <img src="images/fblogo_mini.gif">

<br \="">Apr&egrave;s avoir fait quelques recherches, j'ai rapidement remarqu&eacute; qu'il n'y avait tout simplement pas tutoriel ou une technique officielle pour la manipulation de la souris dans une application console Windows dans FreeBasic. Par cons&eacute;quent, j'ai d&eacute;cid&eacute; d'&eacute;crire cette technique afin de donner un tel exemple &agrave; la Communaut&eacute; FreeBasic. Comme vous le savez une console de Windows est toujours inform&eacute;e de la souris par du fait qu'il s'agit d'une fen&ecirc;tre de console, ce qui signifie qu'elle a &eacute;t&eacute; cr&eacute;&eacute;e avec l'utilisation de l'API Windows, ce qui signifie que la souris peut &ecirc;tre accessible &agrave; partir de la fen&ecirc;tre de console. Il n'y a donc pas n&eacute;cessaire d'activer ou de d&eacute;sactiver la souris dans votre code. Tout ce que vous devez faire est de Get ou Set les coordonn&eacute;es X et Y et d'obtenir les &eacute;tats des boutons de la souris. Nous allons couvrir les sujets suivants dans ce tutoriel:<br \=""><br \=""><li>Obtenir les coordonn&eacute;es de la souris:<br \=""></li>		 Le curseur de la souris, quand la souris est d&eacute;plac&eacute;e, met &agrave; jour sa position continuellement. Vous pouvez obtenir ces valeurs pour d&eacute;terminer o&ugrave; le pointeur se trouve actuellement &agrave; l'&eacute;cran.<br \=""><br \="">

	<li>Param&egrave;trer les coordonn&eacute;es de la souris:<br \=""></li>		 Pour une raison quelconque, il peut &ecirc;tre n&eacute;cessaire pour positionner le pointeur de la souris &agrave; un endroit autre que celui o&ugrave; il se trouve actuellement.<br \=""><br \="">
	  <li>Obtenir les statuts des boutons de la souris:<br \=""></li>		 Tout simplement, lorsque l'utilisateur appuie sur un bouton de la souris, elle retourne une valeur qui dit qu'un bouton est press&eacute; et aussi lequel est press&eacute;. A partir de ces valeurs, vous pouvez d&eacute;cider quelle partie de votre code sera ex&eacute;cut&eacute;e.<br \=""><br \="">

	Comme avec la plupart des tutoriels, celui-l&agrave; aussi peut &ecirc;tre mieux expliqu&eacute; &agrave; l'aide d'un exemple de programme. Nous allons cr&eacute;er un programme tr&egrave;s simple qui agit sur l'interaction de l'utilisateur avec la souris et certaines zones de l'&eacute;cran. Il devrait fournir les bases de code n&eacute;cessaires pour op&eacute;rer efficacement et contr&ocirc;ler la souris dans vos projets personnels de programmation.<br \=""><br \="">IMPORTANT: Il est imp&eacute;ratif que vous fixiez vous-m&ecirc;me un mode graphique pour utiliser la souris. Les commandes de la souris retournent toujours une valeur de -1 si le mode graphique n'est pas r&eacute;gl&eacute;.<br \=""><br \="">**LA DESCRIPTION DU PROGRAMME EXEMPLE**<br \=""><br \="">Dans un souci de programme de d&eacute;monstration, les choses seront, autant que possible, tout &agrave; fait simples et directes. Le programme affiche trois items en haut de l'&eacute;cran et en fonction de celui sur lequel vous cliquez un message diff&eacute;rent s'affiche sur l'&eacute;cran. Cela devrait vous donner suffisamment d'informations pour savoir comment travailler avec la souris en FreeBasic.<br \=""><br \="">En FreeBasic, il y a essentiellement 2 commandes dont vous devez vous soucier lorsque vous essayez de manipuler la souris dans vos projets. Here they are with their syntax explained as per the documentation.<br \=""><br \="">--------------------------------------------------------------------------------<br \=""><br \="">{{fbdoc item="syntax"}}<br \="">GETMOUSE x, y[, [wheel][, [buttons]]]<br \=""><br \="">
	  {{fbdoc item="desc"}}<br \="">GETMOUSE r&eacute;cup&egrave;re la position de la souris et l'&eacute;tat des boutons. <br \=""><br \="">La position de la souris est stock&eacute;e dans X et Y lorsque la fonction est appel&eacute;e. Si la souris n'est pas dans la fen&ecirc;tre du programme, X et Y seront &agrave; -1.<br \=""><br \="">**"wheel"** est le compteur de la molette de la souris. La rotation de la roue vers l'avant fait augmenter le comptage, vers l'arri&egrave;re le fait diminuer. Si la souris n'est pas pr&eacute;sente ou hors de la fen&ecirc;tre du programme, "wheel" sera &agrave; -1.<br \=""><br \="">**"buttons"** stocke l'&eacute;tat des boutons. A la sortie de la fonction, il y aura retour d'un masque binaire indiquant l'&eacute;tat des boutons. Le bit 0 est &agrave; 1 si le bouton de gauche est appuy&eacute;; le bit 1 &agrave; 1 si le bouton de droite est appuy&eacute;; le bit 2 &agrave; 1 si le bouton du milieu est appuy&eacute;.<br \=""><br \="">*GETMOUSE est utilis&eacute; dans les modes graphiques, d&eacute;finis SEULEMENT &agrave; l'aide de la commande SCREEEN.*<br \=""><br \=""><br \="">---------------------------------------------------------------------------------<br \=""><br \="">

	{{fbdoc item="syntax"}}<br \="">SETMOUSE x, y, visibility<br \=""><br \="">
	  {{fbdoc item="desc"}}<br \="">SETMOUSE fixera les coordonn&eacute;es X, Y du pointeur de la souris, ainsi que le r&eacute;glage de sa visibilit&eacute;. <br \=""><br \="">La position de la souris est r&eacute;gl&eacute;e en utilisant les param&egrave;tres X et Y. <br \=""><br \="">La souris sera visible si **"visibility"** est &agrave; 1, et invisible lorsque **"visibility"** est &agrave; 0.<br \=""><br \="">*SETMOUSE est destin&eacute; aux modes graphiques lanc&eacute;s en utilisant l'instruction SCREEN uniquement*<br \=""><br \="">-------------------------------------------------------------------------------- <br \=""><br \="">**LE CODAGE COMMENCE**<br \=""><br \="">Voici un ensemble de constantes que je d&eacute;clare au d&eacute;but du module. C'est tout simplement pour gagner un peu de clart&eacute; dans le reste du code de l'exemple de programmation.<br \="">%%(freebasic)

Const LEFTBUTTON = 1 <br>    Const MIDDLEBUTTON = 4 <br>    Const RIGHTBUTTON = 2 <br>    Const SHOWMOUSE = 1<br>    Const HIDEMOUSE = 0 <br>

##<br>Dans une premi&egrave;re &eacute;tape de cet exemple, nous allons d&eacute;clarer des variables que nous allons utiliser tout au long de ce programme. Bien s&ucirc;r, vous n'avez pas &agrave; d&eacute;clarer vos variables, mais moi, je tiens &agrave; le faire parce que quand vous le faites vous savez exactement pourquoi vous d&eacute;clarez ces variables. Pour moi, c'est une bonne pratique.<br \="">%%(freebasic)

Dim CurrentX As Integer <br>    Dim CurrentY As Integer<br>    Dim MouseButtons As Integer<br>    Dim CanExit As Integer<br>    Dim As String A,B,C<br>

##<br>L'id&eacute;e ici est de tout faire dans une boucle de telle sorte que nous pouvons &eacute;galement contr&ocirc;ler la fa&ccedil;on dont le programme se termine. Nous allons donc cr&eacute;er une boucle qui se terminera lorsque la variable **"CanExit"** sera &eacute;gale &agrave; 0. Dans du boucle, nous allons Interroger la souris et imprimer certaines valeurs de base. (Cette partie est extraite de l'exemple fourni dans l'explication de la syntaxe de GETMOUSE dans le fichier gfxlib.txt). N'oubliez pas de configurer votre mode graphique car il est indispensable pour obtenir des valeurs de retour valides des commandes de la souris. Nous allons utiliser Screen 12 pour notre exemple.<br \="">%%(freebasic)

Screen 12 <br>CanExit = 1<br> <br>Do While CanExit <> 0 <br>    GetMouse CurrentX, CurrentY, , MouseButtons <br>    If CurrentX < 0 Then<br>     Print "La souris est hors contexte." <br>    Else<br>    If MouseButtons And LEFTBUTTON Then A="L"<br>    If MouseButtons And MIDDLEBUTTON Then B="M"<br>    If MouseButtons And RIGHTBUTTON Then C="R"<br>     Print Using "Position de la souris: ###:### Boutons: &&&"; CurrentX; CurrentY;A;B;C <br>     A="":B="":C=""     <br>    End If <br>Loop<br>

##<br>Cet exemple affichera en permanence essentiellement des informations sur l'endroit o&ugrave; se trouve la souris, si elle est sur la fen&ecirc;tre du programme et le cas &eacute;ch&eacute;ant quel bouton la souris est appuy&eacute;. L'instruction GETMOUSE basiquement place les coordonn&eacute;es X et Y courantes dans nos variables **CurrentX** et **CurrentY** et l'&eacute;tat des boutons de la souris dans notre variable **Buttons**. Les trois instructions If afficheront L si le bouton gauche a &eacute;t&eacute; appuy&eacute;, M si le bouton du milieu (ou la molette) a &eacute;t&eacute; appuy&eacute; et R si le bouton droit a &eacute;t&eacute; appuy&eacute;.<br \=""><br \="">Pour l'&eacute;tape suivante, comme nous voulons contr&ocirc;ler un peu ce qui se passe avec la souris, nous afficherons quelques choses suppl&eacute;mentaires au d&eacute;but du programme et contr&ocirc;lerons ce qui se passe par la suite, dans la boucle. C'est un texte ordinaire qui est affich&eacute;, cela pourrait &ecirc;tre remplac&eacute; par une s&eacute;rie de commandes en ligne ou quelque chose pour dessiner un bouton pour les diff&eacute;rentes options. Mais c'est en dehors du champ d'application de ce tutoriel. En se d&eacute;barrassant des d&eacute;clarations d'impression non d&eacute;sir&eacute;es du code ci-dessus, la boucle doit maintenant ressembler &agrave; ceci:<br \="">%%(freebasic)
Screen 12 <br>    SetMouse 1, 1, 1<br>    CanExit = 1<br>    Locate 1,1<br>    Print " | FIRST | SECOND | THIRD | EXIT | "<br>    Do While CanExit <> 0<br>     Locate 1,1<br>     GetMouse CurrentX, CurrentY, , MouseButtons<br>    Loop <br>
##<br>Essentiellement nous affichons la ligne qui contient " | FIRST | SECOND | THIRD | EXIT | " en haut de l'&eacute;cran. Et nous entrons dans la boucle qui interroge la souris. Bien s&ucirc;r, en ce moment rien ne se passera si vous appuyez sur un bouton, car il n'y a pas de code pour lui. Dans notre exemple, nous allons ajouter du code qui affiche simplement l'option qui a &eacute;t&eacute; s&eacute;lectionn&eacute;e. Si l'utilisateur s&eacute;lectionne l'option EXIT, nous imprimerons l'option et nous sortirons de la boucle. Nous allons &eacute;galement ajouter une instruction d'affichage en dehors de la boucle avec un SLEEP pour dire &agrave; l'utilisateur que nous sommes vraiment en dehors de la boucle et donc que le programme est termin&eacute;. Avec tout cela, la code devrait maintenant ressembler &agrave; ceci. Je mets le fichier source complet ici, donc vous pouvez le copier et le coller facilement.<br \="">%%(freebasic)
Const LEFTBUTTON   = 1<br>Const MIDDLEBUTTON = 4   ' UNUSED IN THIS DEMO<br>Const RIGHTBUTTON  = 2   ' UNUSED IN THIS DEMO<br>Const SHOWMOUSE    = 1<br>Const HIDEMOUSE    = 0<br><br>Dim CurrentX     As Integer<br>Dim CurrentY     As Integer<br>Dim MouseButtons As Integer<br>Dim CanExit      As Integer<br><br>Screen 12<br>SetMouse 1, 1, SHOWMOUSE<br>CanExit = 1<br>Locate 1,1<br>Print " | FIRST | SECOND | THIRD | EXIT | "<br><br>Do<br>   GetMouse CurrentX, CurrentY, , MouseButtons<br>   If MouseButtons And LEFTBUTTON Then<br>      If CurrentY <= 12 Then<br>         If CurrentX >= 0 And CurrentX <=75 Then<br>            Locate 12, 1<br>            Print "FIRST Option selectionnee ";<br>         ElseIf CurrentX >= 76 And CurrentX <= 147 Then<br>            Locate 12, 1<br>            Print "SECOND Option selectionnee";<br>         ElseIf CurrentX >= 148 And CurrentX <=212 Then<br>            Locate 12, 1<br>            Print "THIRD Option selectionnee ";<br>         ElseIf CurrentX >= 213 And CurrentX <=268 Then<br>            Locate 12, 1<br>            Print "Derniere Option selectionnee  ";<br>            Exit Do<br>         End If<br>      End If<br>   End If<br>Loop While Inkey$ = ""<br><br>SetMouse 1, 1, HIDEMOUSE<br>Print<br>Print "ET MAINTENANT ON EST EN DEHORS DE LA BOUCLE"<br>Sleep<br>
##<br><br \="">Vous pouvez voir les nombreuses instructions IF dans ce dernier morceau de code. Les nombres qui sont l&agrave; ont &eacute;t&eacute; d&eacute;termin&eacute;s par rapport aux coordonn&eacute;es renvoy&eacute;es par SCREEN 12. Toutefois, elles devraient fonctionner dans tous les modes graphiques, car un pixel est un pixel dans une fen&ecirc;tre graphique de la console. Chaque IF repr&eacute;sente le lieu o&ugrave; les diff&eacute;rentes options sont &eacute;crites &agrave; l'&eacute;cran. Si vous voulez utiliser une routine de bouton graphique,vous pouvez simplement utiliser les m&ecirc;mes largeur et hauteur pour dessiner le bouton dans ces instructions IF pour savoir quel bouton a &eacute;t&eacute; cliqu&eacute;.<br \=""><br \="">**EN CONCLUSION**<br \=""><br \="">Comme vous pouvez le voir, utiliser la souris est tr&egrave;s simple dans FreeBasic. Vous pouvez utiliser une simple instruction comme la commande d'affichage PRINT pour dessiner vos &eacute;crans ou vous pouvez utiliser une commande graphique comme LINE pour dessiner vos &eacute;crans graphiquement. Peu importe la fa&ccedil;on dont vous choisissez d' &eacute;laborer vos &eacute;crans, les instructions SETMOUSE et GETMOUSE fonctionneront de la m&ecirc;me mani&egrave;re et retourneront les m&ecirc;mes valeurs. Tout ce que vous avez &agrave; faire, c'est d'obtenir les informations, et d'obliger vos programmes &agrave; faire ce que vous voulez qu'ils fassent si on appuye sur un bouton, s&eacute;lectionne une option, ou m&ecirc;me dans le cas d'un jeu, vous pouvez facilement faire bouger le personnage principal vers l'endroit o&ugrave; vous avez cliqu&eacute; sur l'&eacute;cran. A vous de choisir.<br \=""><br \="">Comme toujours, si vous avez des questions concernant ce tutoriel ou sur tout autre que j'ai &eacute;crit, n'h&eacute;sitez pas &agrave; m'envoyer un email et nous verrons ce que nous pouvons faire pour r&eacute;soudre votre probl&egrave;me particulier.<br \=""><br \=""><br \="">MystikShadows<br \="">St&eacute;phane Richard<br \="">srichard@adaworld.com 

{{fbdoc item="desc"}}
GETMOUSE retrieves the mouse position and button status. 

Mouse position is stored in X and Y when the function is called. If the mouse is not in the program window, X and Y will be -1.

'wheel' is the mouse wheel counter. Rotating the wheel away from you makes the count to increase, rotating towards you makes it to decrease. If mouse is not present or out of the program window, wheel will hold -1.

'buttons' stores the button status. On function termination, this will return a bitmask holding buttons status. Bit 0 is set if left mouse button is down; bit 1 is set if right mouse button is down; bit 2 is set if middle mouse button is down.

*GETMOUSE is for use in graphics modes, set using the SCREEEN command ONLY.*


---------------------------------------------------------------------------------
{{fbdoc item="title" value="SETMOUSE"}}
----
{{fbdoc item="syntax"}}
SETMOUSE x, y, visibility

{{fbdoc item="desc"}}
SETMOUSE will set the X,Y coordinates of the mouse pointer, as well as setting it's visibility. 

Mouse position is set using the X and Y parameters. 

The mouse will be visible if visibility is set to 1, and invisible if visibility is set to 0.

*SETMOUSE is intended for graphics modes initiated using the SCREEN statement only.*

-------------------------------------------------------------------------------- 

==THE CODING BEGINS==

Here are a set of constants that I declare at the beginning of the module. This is simply to gain a bit of clarity of code in the rest of the programming example.
%%(freebasic)
	CONST LEFTBUTTON = 1 
	CONST MIDDLEBUTTON = 4 
	CONST RIGHTBUTTON = 2 
	CONST SHOWMOUSE = 1
	CONST HIDEMOUSE = 0 
%%
As a first step in this example, we will be declaring variables that we will be using throughout the example program. Of course you don't have to declare your variables, but me I like to do so because when you do so you know exactly why you're declaring your variables. To me that's good practice.
%%(freebasic)
	DIM CurrentX AS INTEGER 
	DIM CurrentY AS INTEGER
	DIM MouseButtons AS INTEGER
	DIM CanExit AS INTEGER
	DIM AS STRING A,B,C
%%
The idea here is to do everything within a loop so that we can also control how the program exits. So we'll create a loop that will exit when the "Can********Exit" variable is equal to 0. In the loop we'll Interrogate the mouse and print some basic values. (This part is extracted from the example provided in the GETMOUSE syntax explanation in the gfxlib.txt file). Don't forget to set your graphics mode as it is a must to get valid return values from the mouse commands. We'll use Screen 12 for our example.
%%(freebasic)
SCREEN 12 
CanExit = 1
 
DO WHILE CanExit <> 0 
	GETMOUSE CurrentX, CurrentY, , MouseButtons 
	IF CurrentX < 0 THEN
	 PRINT "Mouse is out of context." 
	ELSE
	IF MouseButtons AND LEFTBUTTON THEN A="L"
	IF MouseButtons AND MIDDLEBUTTON THEN B="M"
	IF MouseButtons AND RIGHTBUTTON THEN C="R"
	 PRINT USING "Mouse position: ###:### Buttons: &&&"; CurrentX; CurrentY;A;B;C 
	 A="":B="":C=""	 
	END IF 
LOOP
%%
This sample will basically continuously display information about Where the mouse is, if it's on the program window and which mouse button is pressed if any. The GETMOUSE statement basically puts the current X and Y coordinates in our Current********X and Current********Y variables and the status of the mouse buttons in our Mouse********Buttons variable. The Three If Statements will print L if the left button was pressed, M if the middle button (or the wheel) was pressed and R if the Right button was pressed.

For the next step, since we want to control a bit what's happening with the mouse, will display a few extra things at the beginning of the program and control what happens with them afterwards, in the loop. This is regular text being displayed, this could be replaced by a series of line commands or something to draw a button for the different options. But that is outside the scope of this tutorial. So far, by getting rid of the unwanted print statements from the code above, the loop should now look like this:
%%(freebasic)
	SCREEN 12 
	SETMOUSE 1, 1, 1
	CanExit = 1
	LOCATE 1,1
	PRINT " | FIRST | SECOND | THIRD | EXIT | "
	DO WHILE CanExit <> 0
	 LOCATE 1,1
	 GETMOUSE CurrentX, CurrentY, , MouseButtons
	LOOP 
%%
Basically we print the line that has " | FIRST | SECOND | THIRD | EXIT | " at the top of the screen. And we go into the loop that interrogates the mouse. Of course, right now nothing will happen if you press a button because there is no code for it. In our example, we'll add code that simple prints which option was selected. If the user selects the EXIT option, we'll print the Option and we'll exit the loop. We'll also add a print statement outside the loop with a sleep to tell the use that we are truely outside the loop and therefore the program is ended. With all this, the code should now look like this. I am putting the whole source file here so you can cut and paste it easily.
%%(freebasic)
CONST LEFTBUTTON   = 1
CONST MIDDLEBUTTON = 4   ' UNUSED IN THIS DEMO
CONST RIGHTBUTTON  = 2   ' UNUSED IN THIS DEMO
CONST SHOWMOUSE    = 1
CONST HIDEMOUSE    = 0

DIM CurrentX     AS INTEGER
DIM CurrentY     AS INTEGER
DIM MouseButtons AS INTEGER
DIM CanExit      AS INTEGER

SCREEN 12
SETMOUSE 1, 1, SHOWMOUSE
CanExit = 1
LOCATE 1,1
PRINT " | FIRST | SECOND | THIRD | EXIT | "

DO
   GETMOUSE CurrentX, CurrentY, , MouseButtons
   IF MouseButtons AND LEFTBUTTON THEN
	  IF CurrentY <= 12 THEN
	     IF CurrentX >= 0 AND CurrentX <=75 THEN
	        LOCATE 12, 1
	        PRINT "First Option Selected ";
	     ELSEIF CurrentX >= 76 AND CurrentX <= 147 THEN
	        LOCATE 12, 1
	        PRINT "Second Option Selected";
	     ELSEIF CurrentX >= 148 AND CurrentX <=212 THEN
	        LOCATE 12, 1
	        PRINT "Third Option Selected ";
	     ELSEIF CurrentX >= 213 AND CurrentX <=268 THEN
	        LOCATE 12, 1
	        PRINT "Last Option Selected  ";
	        EXIT DO
	     ENd IF
	  END IF
   END IF
LOOP WHILE INKEY$ = ""

SETMOUSE 1, 1, HIDEMOUSE
PRINT
PRINT "AND NOW WE'RE OUT OF THE LOOP"
SLEEP
%%

You can see the many IF statements in this last piece of code. The numbers that are there have been measured as per SCREEN 12 returned coordinates. They should work in all graphics mode however because a pixel is a pixel in a Console Graphics Window. Each if represents where the different options are written on the screen. If you would have used a graphics button routine you could simply use the same width and height as you did to draw the button in these if statements to know which button was clicked.

==IN CONCLUSION==

As you can see, using the mouse has been made very simple in FreeBasic. You can use simple statement like the print command to draw your screens or you can use graphics command like LINE to draw your screens graphically. No matter which way you choose to draw your screens with, the SETMOUSE and GETMOUSE statement will work the same way and return the very same values. All you have to do is get that information and make your programs do what you want them to do if they press a button, select an option, or even in the case of a game, you could easily make the main character move towards the location where you clicked on the screen as well. The choice is up to you.

As always, if you have any questions regarding this tutorial or any other I've written, feel free to email me and we'll see what we can do about solving your particular problem.


MystikShadows
St&eacute;phane Richard
srichard@adaworld.com 