{{fbdoc item="title" value="DYLIBSYMBOL"}}----
Renvoie l'adresse d'une fonction ou d'une variable dans une dll

{{fbdoc item="syntax"}}##
	[[KeyPgDeclare declare]] [[KeyPgFunction function]] **Dylibsymbol** ( [[KeyPgByval byval]] //library// [[KeyPgAs as]] [[KeyPgAny any]] [[KeyPgPtr ptr]], [[KeyPgByref byref]] //symbol// [[KeyPgAs as]] [[KeyPgString string]] ) [[KeyPgAs as]] [[KeyPgAny any]] [[KeyPgPtr ptr]]
	[[KeyPgDeclare declare]] [[KeyPgFunction function]] **Dylibsymbol** ( [[KeyPgByval byval]] //library// [[KeyPgAs as]] [[KeyPgAny any]] [[KeyPgPtr ptr]], [[KeyPgByval byval]] //symbol// [[KeyPgAs as]] [[KeyPgShort short]] ) [[KeyPgAs as]] [[KeyPgAny any]] [[KeyPgPtr ptr]]
##
{{fbdoc item="usage"}}##
	//result// = **Dylibsymbol** ( //library//, //symbol// )
##
{{fbdoc item="param"}}
	##//library//##
		Le [[KeyPgAny any]] [[KeyPgPtr ptr]] de prise en charge de la DLL retourné par ##[[KeyPgDylibload Dylibload]]##
	##//symbol//##
		Une [[KeyPgString String = Chaîne]] contenant le nom de la fonction, ou de la variable dans la librairie pour laquelle on retourne l'adresse.  Sous Windows seulement, peut aussi être un ##[[KeyPgShort short]]## contenant l'ordinal de la fonction/variable.

{{fbdoc item="ret"}}
	Un ##[[KeyPgPtr pointer]]## vers la fonction ou la variable dans la librairie.

	Si la fonction échoue, la valeur retournée est 0.

{{fbdoc item="desc"}}
	##**DyLibSymbol**## renvoie un pointeur sur la variable ou une fonction appelée ##//symbol//## , dans la dll pointée par ##//libhandle//##. ##//libhandle//## est obtenu en chargeant la dll avec ##[[KeyPgDylibload Dylibload]]##. Le symbole doit avoir été ##[[KeyPgExport Export]]##é dans la DLL.
	Si ##//libhandle//## est 0, le symbole est recherché dans l'exécutable ou la dll courant.

	Si on utilise les fonctions ##[[KeyPgCdecl Cdecl]]##, seule le nom de la procédure nécessite d'être spécifié. Si lien dynamique à une fonction en utilisant STDCALL (par défaut dans Windows), alors la fonction doit être "decorated". Pour "decorate" une fonction, utilisez son nom, '@', puis le nombre d'octets passé comme arguments. Par exemple, si la fonction ##FOO## prend 3 arguments entiers, la fonction "decorated" serait 'FOO@12'. Rappelez-vous, sans un ##[[KeyPgAlias alias]]## explicite, le nom de la procédure sera en majuscules.

	Si lien vers une dll créée dans Visual C""++""(tm), "decoration" ne doit pas être utilisé. Pour GCC, "decoration" est nécessaire.

	**Note:** Le dylibsymbol, si échec, essaiera automatiquement de "decorate" la procédure, de @0 à @256, en incréments de 4 octets.

{{fbdoc item="ex"}}
{{fbdoc item="filename" value="examples/manual/module/mydll2.bas"}}%%(freebasic)
'' mydll.dll

'' in the DLL the function must be declared as CDECL and export

Function AddNumbers cdecl Alias "AddNumbers" _
  ( _
	ByVal operand1 As Integer, ByVal operand2 As Integer _
  ) As Integer Export

   AddNumbers = operand1 + operand2

End Function
%%

{{fbdoc item="filename" value="examples/manual/module/dylibsymbol.bas"}}%%(freebasic)
'' create a function pointer, arguments must be the same
'' as in the original function

Dim AddNumbers As Function ( ByVal operand1 As Integer, ByVal operand2 As Integer ) As Integer

Dim hndl As Any Ptr

hndl=DyLibLoad("mydll.dll")

'' find the procedure address (case matters!)
AddNumbers = DyLibSymbol( hndl, "AddNumbers" )

'' then call it..
Print "1 + 2 ="; AddNumbers( 1, 2 )

DyLibFree hndl

Sleep
%%

{{fbdoc item="target"}}
	- Les bibliothèques de liens dynamiques ne sont pas disponibles sous DOS, car l'OS ne les supporte pas.
	- Ordinaux ne sont pas pris en charge sur Linux, 0 est toujours retourné.

{{fbdoc item="lang"}}
	- Non disponible dans le dialecte //[[CompilerOptlang -lang qb]]// sauf si référencé avec l'alias ##**""__Dylibsymbol""**##.

{{fbdoc item="diff"}}
	- Nouveau pour ""FreeBASIC""

{{fbdoc item="see"}}
	- ##[[KeyPgDylibload Dylibload]]##
	- ##[[KeyPgExport Export]]##

{{fbdoc item="back" value="CatPgModularizing|Modularizing"}}