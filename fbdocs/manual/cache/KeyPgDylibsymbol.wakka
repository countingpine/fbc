{{fbdoc item="title" value="DYLIBSYMBOL"}}----
Renvoie l'adresse d'une fonction ou d'une variable dans une dll

{{fbdoc item="syntax"}}##
	[[KeyPgDeclare declare]] [[KeyPgFunction function]] **Dylibsymbol** ( [[KeyPgByval byval]] //library// [[KeyPgAs as]] [[KeyPgAny any]] [[KeyPgPtr ptr]], [[KeyPgByref byref]] //symbol// [[KeyPgAs as]] [[KeyPgString string]] ) [[KeyPgAs as]] [[KeyPgAny any]] [[KeyPgPtr ptr]]
	[[KeyPgDeclare declare]] [[KeyPgFunction function]] **Dylibsymbol** ( [[KeyPgByval byval]] //library// [[KeyPgAs as]] [[KeyPgAny any]] [[KeyPgPtr ptr]], [[KeyPgByval byval]] //symbol// [[KeyPgAs as]] [[KeyPgShort short]] ) [[KeyPgAs as]] [[KeyPgAny any]] [[KeyPgPtr ptr]]
##
{{fbdoc item="usage"}}##
	//result// = **Dylibsymbol** ( //library//, //symbol// )
##
{{fbdoc item="param"}}
	##//library//##
		Le [[KeyPgAny Any]] [[KeyPgPtr Ptr]] de prise en charge de la DLL retourn&eacute; par ##[[KeyPgDylibload DyLibLoad]]##
	##//symbol//##
		Une [[KeyPgString String = Cha&icirc;ne]] contenant le nom de la fonction, ou de la variable dans la librairie pour laquelle on retourne l'adresse.  Sous Windows seulement, peut aussi &ecirc;tre un ##[[KeyPgShort Short]]## contenant l'ordinal de la fonction/variable.

{{fbdoc item="section" value="Valeur retourn&eacute;e
	Un ##[[KeyPgPtr Pointer]]## vers la fonction ou la variable dans la librairie.

	Si la fonction &eacute;choue, la valeur retourn&eacute;e est 0.

{{fbdoc item="desc"}}
	##**DyLibSymbol**## renvoie un pointeur sur la variable ou une fonction appel&eacute;e ##//symbol//## , dans la dll point&eacute;e par ##//libhandle//##. ##//libhandle//## est obtenu en chargeant la dll avec ##[[KeyPgDylibload DyLibLoad]]##. Le symbole doit avoir &eacute;t&eacute; ##[[KeyPgExport Export]]##&eacute; dans la DLL.
	Si ##//libhandle//## est 0, le symbole est recherch&eacute; dans l'ex&eacute;cutable ou la dll courant.

	Si on utilise les fonctions ##[[KeyPgCdecl cdecl]]##, seule le nom de la proc&eacute;dure n&eacute;cessite d'&ecirc;tre sp&eacute;cifi&eacute;. Si lien dynamique &agrave; une fonction en utilisant STDCALL (par d&eacute;faut dans Windows), alors la fonction doit &ecirc;tre "decorated". Pour "decorate" une fonction, utilisez son nom, '@', puis le nombre d'octets pass&eacute; comme arguments. Par exemple, si la fonction ##FOO## prend 3 arguments entiers, la fonction "decorated" serait 'FOO@12'. Rappelez-vous, sans un ##[[KeyPgAlias Alias]]## explicite, le nom de la proc&eacute;dure sera en majuscules.

	Si lien vers une dll cr&eacute;&eacute;e dans Visual C++(tm), "decoration" ne doit pas &ecirc;tre utilis&eacute;. Pour GCC, "decoration" est n&eacute;cessaire.

	**Note:** Le dylibsymbol, si &eacute;chec, essaiera automatiquement de "decorate" la proc&eacute;dure, de @0 &agrave; @256, en incr&eacute;ments de 4 octets.

{{fbdoc item="ex"}}
	%%(freebasic)

'' mydll.dll
	'' in the DLL the function must be declared as CDECL and export
	Function AddNumbers cdecl Alias "AddNumbers" _

( _
	ByVal operand1 As Integer, ByVal operand2 As Integer _

) As Integer Export
	AddNumbers = operand1 + operand2

End Function
	%%
	%%(freebasic)

'' create a function pointer, arguments must be the same