{{fbdoc item="title" value="RANDOMIZE"}}----
Alimente le générateur de nombres aléatoires

{{fbdoc item="syntax"}}##
	[[KeyPgDeclare declare]] [[KeyPgSub sub]] **Randomize** ( [[KeyPgByval byval]] //seed// [[KeyPgAs as]] [[KeyPgDouble double]] = -1.0,  [[KeyPgByval byval]] //algorithm// [[KeyPgAs as]] [[KeyPgInteger integer]] = 0 )
##
{{fbdoc item="usage"}}##
	**Randomize** [ //seed// ][, //algorithm// ]
##
{{fbdoc item="param"}}
	##//seed//##
		Une valeur ##[[KeyPgDouble double]]## pour alimenter le générateur de nombres aléatoires.  Si omise, une valeur basée sur ##[[KeyPgTimer Timer]]## sera utilisée à la place.
	##//algorithm//##
		Une valeur ##[[KeyPgInteger integer]]## pour sélectionner l'algorithme utilisé.  Si omise, l'algorithme par défaut pour le [[CompilerDialects dialecte du langage]] est utilisé.

{{fbdoc item="desc"}}
	Définit la valeur de départ aléatoire qui permet à ##[[KeyPgRnd Rnd]]## de générer des nombres aléatoires et sélectionne l'algorithme à utiliser. Les valeurs valides pour ##//algorithm//## sont:

		##**0**## - Valeur par défaut pour le [[CompilerDialects dialecte du langage]]. C'est l'algorithme ##**3**## dans le dialecte //[[CompilerOptlang -lang fb]]//, ##**4**## dans le dialecte //[[CompilerOptlang -lang qb]]// et ##**1**## en dialecte //[[CompilerOptlang -lang fblite]]//.
		##**1**## - Utilise la fonction ##rand()## de la bibliothèque du langage C. Vous obtiendrez des résultats différents selon la plate-forme.
		##**2**## - Utilise une mise en œuvre rapide. Ce devrait être stable sur toutes les plates-formes et offre une granularité 32-bit, un degré raisonnable de hasard.
		##**3**## - Utilise "Mersenne Twister". Ce devrait être stable sur toutes les plates-formes, offre une granularité 32-bit et donne un degré élevé de hasard.
		##**4**## - Utilise une fonction qui est conçue pour donner les mêmes séquences de nombres aléatoires que QBASIC. Ce devrait être stable sur toutes les plates-formes et offre une précision 24-bit, avec un faible degré de l'aléatoire.
		
		Pour toute semence donnée, chaque algorithme produit une séquence précise, déterministe de nombres pour cette semence.  Si vous voulez que chaque appel à ##**Randomize**## produise une séquence différente de nombres, une graine qui n'est pas prévisible doit être utilisée - par exemple, la valeur retournée par ##[[KeyPgTimer Timer]]##.  L'omission du paramètre ##//seed//## utilise une valeur sur cette base.
		Note: en utilisant la valeur ##[[KeyPgTimer Timer]]## directement en tant que paramètre va produire la semence même si elle est utilisée plus d'une fois dans la même seconde.  Toutefois, il n'est généralement pas louable d'appeler ##**Randomize**## deux fois avec des graines imprévisibles de toute façon, parce que la deuxième séquence ne sera pas plus aléatoire que la première.  Dans la plupart des cas, "Mersenne twister" procurera une séquence de nombres suffisante, sans nécessiter de réensemencement entre les appels à ##[[KeyPgRnd Rnd]]##.


		Lorsque vous appelez ##**Randomize**## avec l'algorithme QB compatible, une partie de l'ancienne graine est retenue.  Cela signifie que si vous appelez ##**Randomize**## plusieurs fois avec la même graine, vous **n'**obtiendrez **pas** la même séquence à chaque fois.  Pour obtenir une séquence spécifique au mode compatible QB, fixez la semence en appelant ##[[KeyPgRnd Rnd]]## avec un paramètre négatif.

{{fbdoc item="ex"}}
{{fbdoc item="filename" value="examples/manual/math/randomize.bas"}}%%(freebasic)
'' Seed the RNG to the method using C's rand()
randomize , 1

'' Print a sequence of random numbers
for i as integer = 1 to 10
	print rnd
next
%%

{{fbdoc item="lang"}}
	L'algorithme utilisé par défaut dépend du dialecte en usage:
		- Avec le dialecte //[[CompilerOptlang -lang fb]]//, une fonction "Mersenne Twister" 32 bits avec une granularité de 32 bits est utilisée.
		- Avec le dialecte //[[CompilerOptlang -lang qb]]//, une fonction donnant le même résultat que ##**Rnd**## dans QB est utilisée. La granularité est de 24 bits.
		- Avec les dialectes //[[CompilerOptlang -lang deprecated]]// et //[[CompilerOptlang -lang fblite]]//, la fonction C disponible dans le système est utilisée. La fonction a une granularité de 15 bits dans Win32, et 32 bits sous Linux et DOS.

{{fbdoc item="diff"}}
	- Le paramètre ##//algorithm//## est nouveau pour FreeBASIC.	- QBASIC n'avait qu'un seul algorithme (reproduit dans FB en algorithme numéro ##**4**## et défini par défaut dans le dialecte //[[CompilerOptlang -lang qb]]//).

{{fbdoc item="see"}}
	- ##[[KeyPgRnd Rnd]]##
	- [[CompilerDialects Les dialectes du FreeBASIC]]

{{fbdoc item="back" value="CatPgMath|Mathematical Functions"}}

