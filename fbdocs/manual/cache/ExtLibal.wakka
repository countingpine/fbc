{{fbdoc item="title" value="OpenAL"}}----
OpenAL est une API multi-plateforme 3D audio appropri&eacute;e pour une utilisation avec les applications de jeux et de nombreux autres types d'applications audio.

Website: http://www.openal.org
Plates-formes support&eacute;es: Win32, Linux
En-t&ecirc;tes &agrave; inclure: al/al.bi

{{fbdoc item="ex"}}
{{fbdoc item="filename" value="examples/manual/libraries/openal.bas"}}%%(freebasic)
'' OpenAL-based .wav player example

#include "al/al.bi"
#include "al/alut.bi"

const SOUND_FILE = "test.wav"

'' Initialize OpenAL
alutInit(0, 0)

''
'' Load the .wav into an OpenAL buffer
''
dim as ALuint buffer
alGenBuffers(1, @buffer)

dim as ALenum wavFormat
dim as ALsizei wavSize
dim as ALsizei wavFreq
dim as any ptr wavData
dim as ALboolean wavLoop
alutLoadWAVFile(SOUND_FILE, @wavFormat, @wavData, @wavSize, @wavFreq, @wavLoop)
alBufferData(buffer, wavFormat, wavData, wavSize, wavFreq)
alutUnloadWAV(wavFormat, wavData, wavSize, wavFreq)

if (alGetError() <> AL_NO_ERROR) then
	print "Error: Loading the .wav failed!"
end if

''
'' Setup sound sources -- each one can have a 3D position & velocity.
''
dim as ALuint source
alGenSources(1, @source)

dim as ALfloat SourcePos(0 to 2) = {0.0, 0.0, 0.0}
dim as ALfloat SourceVel(0 to 2) = {0.0, 0.0, 0.0}

alSourcei(source, AL_BUFFER, buffer)
alSourcef(source, AL_PITCH, 1.0)
alSourcef(source, AL_GAIN, 1.0)
alSourcefv(source, AL_POSITION, @SourcePos(0))
alSourcefv(source, AL_VELOCITY, @SourceVel(0))

''
'' Setup the listener's 3D position etc.
''
dim as ALfloat listener_position(0 to 2) = {0.0, 0.0, 0.0}
dim as ALfloat listener_velocity(0 to 2) = {0.0, 0.0, 0.0}
dim as ALfloat listener_orientation(0 to 5) = {0.0, 0.0, -1.0, _ '' look at
	                                           0.0, 0.0, 1.0}    '' up vector
alListenerfv(AL_POSITION, @listener_position(0))
alListenerfv(AL_VELOCITY, @listener_velocity(0))
alListenerfv(AL_ORIENTATION, @listener_orientation(0))

''
'' Play the sound (change to AL_FALSE to disable looping)
''
alSourcei(source, AL_LOOPING, AL_TRUE)
alSourcePlay(source)

print "Sound is playing, press ESC to exit and anything else to pause..."
dim as string key
dim as integer active = -1
do
	key = inkey()
	if (len(key) > 0) then
		if (key = chr(27)) then
			exit do
		end if

		if (active) then
			alSourcePause(source)
			active = 0
		else
			alSourcePlay(source)
			active = -1
		end if
	end if
loop

alSourceStop(source)

''
'' Clean up
''
alDeleteBuffers(1, @buffer)
alDeleteSources(1, @source)
alutExit()
%%

{{fbdoc item="back" value="ExtLibTOC|External Library Table of Contents"}}