{{fbdoc item="title" value="Profiling"}}----
Le profilage peut &ecirc;tre utilis&eacute; pour analyser les performances d'une application.

Les performances d'une application peuvent &ecirc;tre mesur&eacute;es par le nombre de fois que les fonctions sont appel&eacute;es, combien de temps est consacr&eacute; &agrave; l'ex&eacute;cution de ces fonctions et quelles sont les fonctions qui appellent d'autres fonctions. Cela peut aider &agrave; identifier les fonctions susceptibles de prendre trop de temps &agrave; l'ex&eacute;cution ou ex&eacute;cut&eacute;es trop de fois et qui pourraient m&eacute;riter d'&ecirc;tre examin&eacute;es pour une optimisation.

FreeBASIC utilise GPROF pour analyser l'ex&eacute;cution d'une application.  Les informations de profilage sont collect&eacute;es pendant que le programme est en cours d'ex&eacute;cution et GPROF est utilis&eacute; par la suite pour le rapport sur les donn&eacute;es recueillies.

Les trois &eacute;tapes de base pour le profilage d'un programme sont:
	- 1) Pr&eacute;parer le programme pour le profilage en compilant le source avec l'option //[[CompilerOptprofile -profile]]//.
	- 2) Ex&eacute;cuter le programme de collecte d'informations (stock&eacute;es dans ##gmon.out##).
	- 3) Analyser les informations recueillies &agrave; l'aide de GPROF.

Une documentation compl&egrave;te sur GPROF est disponible ici: [[http://www.gnu.org/software/binutils/manual/gprof-2.9.1/gprof http://www.gnu.org/software/binutils/manual/gprof-2.9.1/gprof.html]].  Si la documentation s'est d&eacute;plac&eacute;e de cet endroit, il suffit de rechercher sur le web pour "GNU GPROF" et un lien pertinent devrait &ecirc;tre retourn&eacute;.

FreeBASIC prend en charge le profilage des fonctions; pas de profilage bloc-de-base et ligne-par-ligne.

{{fbdoc item="section" value="Pr&eacute;parer un programme pour le profilage
	Seul le code qui est compil&eacute; avec l'option de ligne de commande //[[CompilerOptprofile -profile]]// peut &ecirc;tre profil&eacute;.  Passer l'option //[[CompilerOptprofile -profile]]// pour le compilateur FreeBASIC pour pr&eacute;parer le programme au profilage.  Ceci indique au compilateur d'ins&eacute;rer du code de d&eacute;marrage sp&eacute;cial au d&eacute;but de l'application ainsi qu'au d&eacute;but de chaque fonction.
	%%
fbc program.bas -profile
%%

{{fbdoc item="section" value="Le profilage du programme
	Les informations n&eacute;cessaires pour analyser l'ex&eacute;cution du programme sont recueillies lorsque le programme est en cours d'ex&eacute;cution.  Ex&eacute;cutez le programme pour commencer &agrave; collecter les informations d'appel de fonctions.  Ces informations sont automatiquement stock&eacute;es dans un fichier nomm&eacute; ##gmon.out## dans le m&ecirc;me r&eacute;pertoire que le programme.

{{fbdoc item="section" value="Analyse des r&eacute;sultats du programme
	Utiliser GPROF pour analyser les r&eacute;sultats.  Le rapport par d&eacute;faut de GPROF inclut des descriptions de ce que signifie chacune des colonnes de valeurs.  Si vous &ecirc;tes nouvel utilisateur de GPROF, vous pouvez d'abord ex&eacute;cuter le rapport par d&eacute;faut et lire les descriptions.  La sortie de GPROF peut &ecirc;tre sauvegard&eacute;e dans un fichier de redirection.

	Enregistrer la sortie de GPROF dans ##profile.txt##:
	%%
gprof program[.exe] > profile.txt
%%

	Afficher uniquement le rapport simple sans les descriptions:
	%%
gprof program[.exe] --brief --flat-profile > profile.txt
%%

{{fbdoc item="section" value="Combiner les r&eacute;sultats de plusieurs sessions
	GPROF a aussi une option '--sum' pour combiner commod&eacute;ment les r&eacute;sultats de plusieurs sessions d'ex&eacute;cutions.  Voici un exemple utilisable:
	- Ex&eacute;cutez votre programme une fois. Cela cr&eacute;era ##gmon.out##.
	- Utilisez la commande:
		##mv gmon.out gmon.sum## 
		ou 
		##rename gmon.out gmon.sum##.
	- Ex&eacute;cutez &agrave; nouveau votre programme.  Cela cr&eacute;era de nouvelles donn&eacute;es dans ##gmon.out##.
	- Fusionnez les nouvelles donn&eacute;es dans ##gmon.out## dans ##gmon.sum## en utilisant la commande: 
		##gprof --sum program[.exe] gmon.out gmon.sum##
	- R&eacute;p&eacute;tez les deux derni&egrave;res &eacute;tapes autant de fois que n&eacute;cessaire. 
	- Analysez les donn&eacute;es de synth&egrave;se &agrave; l'aide de la commande: 
		##gprof program[.exe] gmon.sum > profile.txt##

{{fbdoc item="section" value="Fonctionnement interne du profilage FreeBASIC
	Quand l'option '-profile' est valid&eacute;e, un ou plusieurs morceaux de code sont ajout&eacute;s au programme.
	- L'appel &agrave; ##"_monstartup()"## au d&eacute;but du code principal implicite initialise la biblioth&egrave;que de profilage.
	- Un appel &agrave; ##"mcount()"## au d&eacute;but de chaque proc&eacute;dure.  C'est ainsi que la biblioth&egrave;que de profilage garde la trace de ce que fait la fonction en cours et aussi les autres fonctions.
	- Lier du code de programmation suppl&eacute;mentaire de d&eacute;marrage.  (par exemple, ##gcrt?.o## )

	La biblioth&egrave;que de profilage peut &ecirc;tre elle-m&ecirc;me dans une biblioth&egrave;que s&eacute;par&eacute;e ou &ecirc;tre une partie de la biblioth&egrave;que d'ex&eacute;cution C.
	- mingw n&eacute;cessitera ##gcrt2.o## et ##libgmon.a ##
	- cygwin n&eacute;cessitera gcrt0.o et ##libgmon.a##
	- dos n&eacute;cessitera ##gcrt0.o## (le code de profilage est dans ##libc.a##) 
	- linux n&eacute;cessitera ##gcrt1.o## (le code de profilage est dans ##libc.a##) 

	Les d&eacute;tails peuvent varier d'un portage de FreeBasic &agrave; l'autre, mais le code source construit pour le profilage avec FreeBasic devrait &ecirc;tre compatible avec d'autres langages qui supportent GPROF.

{{fbdoc item="back" value="CatPgProgrammer|Programmer's Guide"}}