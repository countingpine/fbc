{{fbdoc item="title" value="Profiling"}}----
Le profilage peut être utilisé pour analyser les performances d'une application.

Les performances d'une application peuvent être mesurées par le nombre de fois que les fonctions sont appelées, combien de temps est consacré à l'exécution de ces fonctions et quelles sont les fonctions qui appellent d'autres fonctions. Cela peut aider à identifier les fonctions susceptibles de prendre trop de temps à l'exécution ou exécutées trop de fois et qui pourraient mériter d'être examinées pour une optimisation.

FreeBASIC utilise GPROF pour analyser l'exécution d'une application.  Les informations de profilage sont collectées pendant que le programme est en cours d'exécution et GPROF est utilisé par la suite pour le rapport sur les données recueillies.

Les trois étapes de base pour le profilage d'un programme sont:
	- 1) Préparer le programme pour le profilage en compilant le source avec l'option //[[CompilerOptprofile -profile]]//.
	- 2) Exécuter le programme de collecte d'informations (stockées dans ##gmon.out##).
	- 3) Analyser les informations recueillies à l'aide de GPROF.

Une documentation complète sur GPROF est disponible ici: [[http://www.gnu.org/software/binutils/manual/gprof-2.9.1/gprof.html http://www.gnu.org/software/binutils/manual/gprof-2.9.1/gprof.html]].  Si la documentation s'est déplacée de cet endroit, il suffit de rechercher sur le web pour "GNU GPROF" et un lien pertinent devrait être retourné.

FreeBASIC prend en charge le profilage des fonctions; pas de profilage bloc-de-base et ligne-par-ligne.

{{fbdoc item="section" value="Préparer un programme pour le profilage"}}
	Seul le code qui est compilé avec l'option de ligne de commande //[[CompilerOptprofile -profile]]// peut être profilé.  Passer l'option //[[CompilerOptprofile -profile]]// pour le compilateur FreeBASIC pour préparer le programme au profilage.  Ceci indique au compilateur d'insérer du code de démarrage spécial au début de l'application ainsi qu'au début de chaque fonction.
	%%
fbc program.bas -profile
%%

{{fbdoc item="section" value="Le profilage du programme"}}
	Les informations nécessaires pour analyser l'exécution du programme sont recueillies lorsque le programme est en cours d'exécution.  Exécutez le programme pour commencer à collecter les informations d'appel de fonctions.  Ces informations sont automatiquement stockées dans un fichier nommé ##gmon.out## dans le même répertoire que le programme.

{{fbdoc item="section" value="Analyse des résultats du programme"}}
	Utiliser GPROF pour analyser les résultats.  Le rapport par défaut de GPROF inclut des descriptions de ce que signifie chacune des colonnes de valeurs.  Si vous êtes nouvel utilisateur de GPROF, vous pouvez d'abord exécuter le rapport par défaut et lire les descriptions.  La sortie de GPROF peut être sauvegardée dans un fichier de redirection.

	Enregistrer la sortie de GPROF dans ##profile.txt##:
	%%
gprof program[.exe] > profile.txt
%%

	Afficher uniquement le rapport simple sans les descriptions:
	%%
gprof program[.exe] --brief --flat-profile > profile.txt
%%

{{fbdoc item="section" value="Combiner les résultats de plusieurs sessions"}}
	GPROF a aussi une option '--sum' pour combiner commodément les résultats de plusieurs sessions d'exécutions.  Voici un exemple utilisable:
	- Exécutez votre programme une fois. Cela créera ##gmon.out##.
	- Utilisez la commande:
		##mv gmon.out gmon.sum## 
		ou 
		##rename gmon.out gmon.sum##.
	- Exécutez à nouveau votre programme.  Cela créera de nouvelles données dans ##gmon.out##.
	- Fusionnez les nouvelles données dans ##gmon.out## dans ##gmon.sum## en utilisant la commande: 
		##gprof --sum program[.exe] gmon.out gmon.sum##
	- Répétez les deux dernières étapes autant de fois que nécessaire. 
	- Analysez les données de synthèse à l'aide de la commande: 
		##gprof program[.exe] gmon.sum > profile.txt##

{{fbdoc item="section" value="Fonctionnement interne du profilage FreeBASIC"}}
	Quand l'option '-profile' est validée, un ou plusieurs morceaux de code sont ajoutés au programme.
	- L'appel à ##"_monstartup()"## au début du code principal implicite initialise la bibliothèque de profilage.
	- Un appel à ##"mcount()"## au début de chaque procédure.  C'est ainsi que la bibliothèque de profilage garde la trace de ce que fait la fonction en cours et aussi les autres fonctions.
	- Lier du code de programmation supplémentaire de démarrage.  (par exemple, ##gcrt?.o## )

	La bibliothèque de profilage peut être elle-même dans une bibliothèque séparée ou être une partie de la bibliothèque d'exécution C.
	- mingw nécessitera ##gcrt2.o## et ##libgmon.a ##
	- cygwin nécessitera gcrt0.o et ##libgmon.a##
	- dos nécessitera ##gcrt0.o## (le code de profilage est dans ##libc.a##) 
	- linux nécessitera ##gcrt1.o## (le code de profilage est dans ##libc.a##) 

	Les détails peuvent varier d'un portage de FreeBASIC à l'autre, mais le code source construit pour le profilage avec FreeBASIC devrait être compatible avec d'autres langages qui supportent GPROF.

{{fbdoc item="back" value="CatPgProgrammer|Programmer's Guide"}}