{{fbdoc item="title" value="CONSTRUCTOR"}}----
Appelé automatiquement lorsqu'une classe ou un type défini par l'utilisateur est créé

{{fbdoc item="syntax"}}##
	[[KeyPgType Type]] //typename//
		[[KeyPgDeclare declare]] **Constructor** ( )
		[[KeyPgDeclare declare]] **Constructor** ( [ [[KeyPgByref byref]] | [[KeyPgByval byval]] ] //parameter// [[KeyPgAs as]] [[DataType datatype]] [ = //default// ] [, ... ] )
	End Type

	**Constructor** //typename// ( [ //parameters// ] )
		//statements//
	**End Constructor**
##
{{fbdoc item="param"}}
	##//typename//## 
		nom du ##[[KeyPgType Type]]## ou ##[[KeyPgClass Class]]##

{{fbdoc item="desc"}}
	Les méthodes ##**Constructor**## sont appelées lorsqu'un ##[[KeyPgType Type]]## défini par l'utilisateur ou une variable de ##[[KeyPgClass Class]]## est créé.

	##//typename//## est le nom du type pour lequel la méthode ##**Constructor**## est déclarée et définie.  La résolution de noms pour ##//typename//## suit les mêmes règles que les procédures en cas d'utilisation dans un ##[[KeyPgNamespace espace de noms]]##.

	Plus d'un constructeur peut exister pour un type ou une classe.  La méthode constructeur exacte appelée dépend de la signature ##//parameter//## correspondant quand la variable est initialisée.  Plus d'un ##//parameter//## peut exister dans la déclaration de la méthode ##**Constructor**##.

	Une méthode constructeur est passée à un paramètre ##[[KeyPgThis this]]## caché qui est du même type que ##//typename//##.  ##[[KeyPgThis this]]## est éventuellement utilisé pour accéder aux champs du ##[[KeyPgType Type]]## ou de la ##[[KeyPgClass Class]]## qui a été initialisé dans la méthode ##**Constructor**##.

	Le chaînage des constructeurs dans les types imbriqués est pris en charge.  Tous les champs qui ont leur propre constructeur par défaut sont appelés en premier.

	Les constructeurs sont appelés lors de la déclaration d'instances statiques globales ou locales de ##//typename//## et lors de l'allocation dynamique de ##//typename//## en utilisant l'opérateur ##[[KeyPgOpNew New]]##.

{{fbdoc item="ex"}}
Exemple de constructeur simple pour débutants.
{{fbdoc item="filename" value="examples/manual/udt/constructor-ptr.bas"}}%%(freebasic)
Type MyObj
  Foo As Integer Ptr
  
	'' Constructor to create our integer, and set its value.
  Declare Constructor( ByVal DefVal As Integer = 0 )
	'' Destroy our integer on object deletion.
  Declare Destructor()
End Type

Constructor MyObj( ByVal DefVal As Integer = 0 )
  Print "Creating a new integer in MyObj!"
  Print "The Integer will have the value of: " & DefVal
  Print ""
  
	'' Create a pointer, and set its value to the one passed to the
	'' Constructor.
  This.Foo = New Integer
  *This.Foo = DefVal
End Constructor

Destructor MyObj()
  Print "Deleting our Integer in MyObj!"
  Print ""
  
	'' Delete the pointer we created in MyObj.
  Delete This.Foo
  This.Foo = 0
End Destructor


Scope
	'' Create a MyObj type object
	'' Send the value of '10' to the constructor
  Dim As MyObj Bar = 10
  
	'' See if the integer's been created.  Print its value.
  Print "The Value of our integer is: " & *Bar.Foo
  Print ""
  
  Sleep
End Scope
  '' We've just gone out of a scope.  The Destructor should be called now
  '' Because our objects are being deleted.
Sleep
%%
Exemple de construction plus avancée, montrant une surcharge constructeur entre autres choses.
{{fbdoc item="filename" value="examples/manual/udt/constructor.bas"}}%%(freebasic)
type sample

  _text as string

  declare constructor ()
  declare constructor ( a as integer )
  declare constructor ( a as single  ) 
  declare constructor ( a as string, b as byte ) 

  declare operator cast () as string

end type

constructor sample ()
  print "constructor sample ()"
  print
  this._text = "Empty"
end constructor

constructor sample ( a as integer )
  print "constructor sample ( a as integer )"
  print "  a = "; a
  print
  this._text = str(a)
end constructor

constructor sample ( a as single )
  print "constructor sample ( a as single )"
  print "  a = "; a
  print
  this._text = str(a)
end constructor

constructor sample ( a as string, b as byte )
  print "constructor sample ( a as string, b as byte )"
  print "  a = "; a
  print "  b = "; b
  print
  this._text = str(a) + "," + str(b)
end constructor

operator sample.cast () as string
  return this._text
end operator

print "Creating x1"
dim x1 as sample

print "Creating x2"
dim x2 as sample = 1

print "Creating x3"
dim x3 as sample = 99.9

print "Creating x4"
dim x4 as sample = sample( "aaa", 1 )

print "Values:"
print "  x1 = "; x1
print "  x2 = "; x2
print "  x3 = "; x3
print "  x4 = "; x4
%%
{{fbdoc item="lang"}}
	- Les caractéristiques liées à l'objet sont prises en charge uniquement dans le dialecte //[[CompilerOptlang -lang fb]]//

{{fbdoc item="diff"}}
	- Nouveau pour ""FreeBASIC""

{{fbdoc item="see"}}
	- ##[[KeyPgType Class]]##
	- ##[[KeyPgModuleConstructor Constructor (Module)]]##
	- ##[[KeyPgOpNew New]]##
	- ##[[KeyPgDestructor Destructor]]##
	- ##[[KeyPgType Type]]##

{{fbdoc item="back" value="CatPgUserDefTypes|User Defined Types"}}

