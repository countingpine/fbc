{{fbdoc item="title" value="Operator OR= (Inclusive Disjunction and Assign)"}}----
Effectue une manipulation de bits OR (disjonction inclusive) et attribue le résultat à une variable

{{fbdoc item="syntax"}}##
	[[KeyPgDeclare declare]] [[KeyPgOperator operator]] **Or=** ( [[KeyPgByref byref]] //lhs// [[KeyPgAs as]] //T1//, [[KeyPgByref byref]] //rhs// [[KeyPgAs as]] //T2// )
##
{{fbdoc item="usage"}}##
	//lhs// **Or=** //rhs//
##
{{fbdoc item="param"}}
	##//lhs//##
		La variable à assigner.
	##//T1//##
		Tout type numérique.
	##//rhs//##
		La valeur qui sert à effectuer un OR (disjonction inclusive) avec ##//lhs//##.
	##//T2//##
		Tout type numérique.

{{fbdoc item="desc"}}
	Cet opérateur effectue un OR et attribue le résultat à une variable. Il est fonctionnellement équivalent à:
##
		//lhs// = //lhs// [[KeyPgOpOr or]] //rhs//
##
	##**Or=**## compare chaque bit de ses opérandes, ##//lhs//## et ##//rhs//##, et si l'un des bits est à 1, alors le bit correspondant dans le premier opérande, ##//lhs//##, est mis à 1, sinon il est mis à 0.

	Cet opérateur peut être surchargé pour des types définis par l'utilisateur.

{{fbdoc item="ex"}}
{{fbdoc item="filename" value="examples/manual/operator/or-assign.bas"}}%%(freebasic)
dim as ubyte a = &b00110011
dim as ubyte b = &b01010101
a or= b
'' Result    a = &b01110111
print bin(a)
%%

{{fbdoc item="lang"}}
	- Dans le dialecte //[[CompilerOptlang -lang qb]]//, cet opérateur ne peut pas être surchargé.

{{fbdoc item="diff"}}
	- Nouveau pour ""FreeBASIC""

{{fbdoc item="see"}}
	- ##[[KeyPgOpOr Or]]##

{{fbdoc item="back" value="CatPgOpAssignment|Assignment Operators"}}{{fbdoc item="back" value="CatPgOperators|Operators"}}