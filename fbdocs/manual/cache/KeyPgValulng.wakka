{{fbdoc item="title" value="VALULNG"}}----
Conversion d'une cha&icirc;ne en nombre entier long non-sign&eacute;

{{fbdoc item="syntax"}}##
	[[KeyPgDeclare declare]] [[KeyPgFunction function]] **Valulng** [[KeyPgOverload overload]] ( [[KeyPgByref byref]] //strnum// [[KeyPgAs as]] [[KeyPgConstQualifier const]] [[KeyPgString string]] ) [[KeyPgAs as]] [[KeyPgUlongint ulongint]]
	[[KeyPgDeclare declare]] [[KeyPgFunction function]] **Valulng** ( [[KeyPgByval byval]] //strnum// [[KeyPgAs as]] [[KeyPgConstQualifier const]] [[KeyPgWstring wstring]] [[KeyPgPtr ptr]] ) [[KeyPgAs as]] [[KeyPgUlongint ulongint]]
##
{{fbdoc item="usage"}}##
	//result// = **Valulng** ( //strnum// )
##
{{fbdoc item="param"}}
	##//strnum//##
		la cha&icirc;ne &agrave; convertir

{{fbdoc item="section" value="Valeur retourn&eacute;e
	Retourne un ##[[KeyPgUlongint ULongInt (entier long non-sign&eacute;)]]## de la cha&icirc;ne convertie

	Si le premier caract&egrave;re de la cha&icirc;ne n'est pas valide, ##**ValULng**## retournera ##0##.

{{fbdoc item="desc"}}
	Par exemple, ##**ValULng**("10")## retournera ##10##, et ##**ValULng**("10.60")## retournera ##10##. La fonction analyse la cha&icirc;ne &agrave; partir de la gauche, en sautant tout espace blanc, et retourne le plus long nombre qu'elle peut lire, s'arr&ecirc;tant au premier caract&egrave;re non-appropri&eacute;, qu'elle trouve.  Tout caract&egrave;re non-num&eacute;rique, inclus les points d&eacute;cimaux et les sp&eacute;cificateurs d'exposant, sont consid&eacute;r&eacute;s comme non-appropri&eacute;s. Par exemple, ##**ValULng**("23.1E+6")## retournera seulement ##23##.

	##**ValULng**## peut convertir des nombres entiers en format [[KeyPgBin Binaire]] / [[KeyPgOct Octal]] / [[KeyPgHex Hexad&eacute;cimal]], s'il y a devant l'identificateur pertinent (##"&B"## / ##"&O"## / ##"&H"##), par exemple: ##**ValULng**("&HFF")## retourne ##255##.

	Si vous voulez convertir un nombre en une cha&icirc;ne, utilisez la fonction ##[[KeyPgStr Str]]##.

{{fbdoc item="ex"}}
{{fbdoc item="filename" value="examples/manual/strings/valulng.bas"}}%%(freebasic)
dim a as string, b as ulongint
a = "20xa211"
b = valulng(a)
print a, b
%%

%%
20xa211   20
%%


{{fbdoc item="lang"}}
	- Non disponible dans le dialecte //[[CompilerOptlang -lang qb]]// sauf si r&eacute;f&eacute;renc&eacute; avec l'alias ##**__Valulng**##.

{{fbdoc item="diff"}}
	- Nouveau pour FreeBASIC

{{fbdoc item="see"}}
	- ##[[KeyPgCulngint Culngint]]##
	- ##[[KeyPgVal Val]]##
	- ##[[KeyPgValuint Valuint]]##
	- ##[[KeyPgVallng Vallng]]##
	- ##[[KeyPgStr Str]]##
	- ##[[KeyPgChr Chr]]##
	- ##[[KeyPgAsc Asc]]##

{{fbdoc item="back" value="CatPgCasting|Converting Data Types"}}{{fbdoc item="back" value="CatPgString|String Functions"}}