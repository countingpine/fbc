{{fbdoc item="title" value="Arrays"}}----
Types de conteneurs multi-dimensionnels.

{{fbdoc item="section" value="Vue d'ensemble
	Les //tableaux (arrays)// sont des types particuliers de [[ProPgVariables variables]] qui agissent comme des conteneurs pour un certain nombre valeurs ou d'//&eacute;l&eacute;ments//. Un tableau peut stocker des &eacute;l&eacute;ments de tout type et tous ses &eacute;l&eacute;ments sont du m&ecirc;me type. Par exemple, un tableau peut stocker des &eacute;l&eacute;ments ##[[KeyPgInteger Integer]]## ou ##[[KeyPgSingle Single]]##, mais pas les deux en m&ecirc;me temps. Ces &eacute;l&eacute;ments sont accessibles -- en lecture ou en &eacute;criture -- par l'interm&eacute;diaire d'une valeur ##[[KeyPgInteger Integer]]## repr&eacute;sentant leur //position// dans le tableau. Les tableaux ont des longueurs ou des //tailles// qui sont &eacute;gales au nombre &eacute;l&eacute;ments qu'ils contiennent &agrave; un moment donn&eacute;. Les tableaux de //longueur fixe (Fixed-length)// ont une taille constante tout au long de leur existence, alors que la taille des tableaux de //longueur variable (variable-length)// peut changer de fa&ccedil;on dynamique.

{{fbdoc item="section" value="El&eacute;ments et positions
	Les valeurs qu'un tableau stocke sont ses &eacute;l&eacute;ments. Chaque &eacute;l&eacute;ment d'un tableau a une position correspondante, qui est une valeur ##[[KeyPgInteger Integer]]## allant de sa //limite inf&eacute;rieure (lower bound)// &agrave; sa //limite sup&eacute;rieure (upper bound)//, incluses. Ces positions sont utilis&eacute;es pour acc&eacute;der aux &eacute;l&eacute;ments individuels du tableau &agrave; l'aide de l'##[[KeyPgOpArrayIndex Operator ()]]## qui acquiert une position et renvoie une r&eacute;f&eacute;rence sur l'&eacute;l&eacute;ment &agrave; cette position. Une position valide dans un tableau est sup&eacute;rieure ou &eacute;gale &agrave; sa borne inf&eacute;rieure et inf&eacute;rieure ou &eacute;gale &agrave; sa limite sup&eacute;rieure.

{{fbdoc item="filename" value="examples/manual/proguide/arrays/array1.bas"}}%%(freebasic)
' Create an array of 3 elements all having the value zero (0.0f).
dim array(1 to 3) as single

' Assign a value to the first element.
array(1) = 1.2

' Output the values of all the elements ("1.2 0 0").
for position as integer = 1 to 3
	print array(position)
next
%%

{{fbdoc item="section" value="Dimensions et limites
	La taille d'un tableau est &eacute;gale au nombre d'&eacute;l&eacute;ments qu'il stocke &agrave; un moment donn&eacute;. Un tableau peut avoir une taille de z&eacute;ro (0), ce qui signifie qu'il ne stocke pas de valeurs pour le moment -- il est //vide//. Si la taille d'un tableau est sup&eacute;rieure &agrave; z&eacute;ro, c'est qu'il stocke des &eacute;l&eacute;ments. La taille d'un tableau est &eacute;gale &agrave; la diff&eacute;rence entre eux ses bornes sup&eacute;rieure et inf&eacute;rieure augment&eacute;e de 1, ou ##[[KeyPgUbound UBound]](//array//) - [[KeyPgLbound LBound]](//array//) + 1##.

	Les bornes inf&eacute;rieure et sup&eacute;rieure d&eacute;terminent pas seulement la taille d'un tableau, mais aussi les positions de chacun de ses &eacute;l&eacute;ments valides. Par exemple, un tableau avec sa borne inf&eacute;rieure &eacute;gale &agrave; z&eacute;ro (0) et sa borne sup&eacute;rieure &eacute;gale &agrave; quatre (4) stocke cinq (5) &eacute;l&eacute;ments, le premier &eacute;l&eacute;ment &agrave; la position 0 et dernier &agrave; la position 5. Ces bornes ne peuvent &ecirc;tre pr&eacute;cis&eacute;es lorsque le tableau est d&eacute;clar&eacute;, ou, pour certains tableaux, modifi&eacute; par le redimensionnement du tableau. Les limites inf&eacute;rieure et sup&eacute;rieure d'un tableau peuvent &ecirc;tre r&eacute;cup&eacute;r&eacute;es &agrave; l'aide de ##[[KeyPgLbound LBound]]## et ##[[KeyPgUbound UBound]]##, respectivement.

	Lors de la cr&eacute;ation ou du redimensionnement d'un tableau, si sa limite inf&eacute;rieure n'est pas sp&eacute;cifi&eacute;e sa valeur par d&eacute;faut sera z&eacute;ro (0).

{{fbdoc item="filename" value="examples/manual/proguide/arrays/array2.bas"}}%%(freebasic)
' Declares and initializes an array of four integer elements.
dim array(3) as integer = { 10, 20, 30, 40 }

' Outputs all of the element values (" 10 20 30 40").
for position as integer = lbound(array) to ubound(array)
	print array(position) ;
next
%%

{{fbdoc item="section" value="Longueur fixe (Fixed-length) et longueur variable (variable-length)
	Il existe deux types fondamentaux de tableaux: //[[ProPgFixLenArrays longueur fixe]]// et //[[ProPgVarLenArrays longueur variable]]//. Principale diff&eacute;rence entre les deux: les limites des tableaux de longueur fixe ne peuvent jamais changer, c'est &agrave; dire qu'ils stockent toujours le m&ecirc;me nombre d'&eacute;l&eacute;ments aux m&ecirc;mes positions. Les limites des tableaux &agrave; longueur variable peuvent changer, affectant le nombre d'&eacute;l&eacute;ments stock&eacute;s et/ou les positions des &eacute;l&eacute;ments.

	Puisque les tableaux de longueur fixe ne changent jamais la taille, le compilateur choisit pour faire de la place en--ou, //affecter//--la m&eacute;moire pour les &eacute;l&eacute;ments du tableau, soit en stockage statique ou sur la pile du programme, selon la [[ProPgStorageClasses classe de stockage]] des tableaux. Cela peut &ecirc;tre un avantage, Cela peut &ecirc;tre un avantage, puisque le co&ucirc;t de la cr&eacute;ation de ces sortes des tableaux ne comprend pas les p&eacute;nalit&eacute;s n&eacute;fastes d'ex&eacute;cution. Les tableaux de longueur fixe sont d&eacute;clar&eacute;s &agrave; l'aide de ##[[KeyPgExtern Extern]]##, ##[[KeyPgStatic Static]]## et ##[[KeyPgDim Dim]]##. Au minimum une limite sup&eacute;rieure doit &ecirc;tre sp&eacute;cifi&eacute;e et toutes les limites doivent &ecirc;tre &agrave; la compilation des valeurs constantes, telles que les litt&eacute;raux num&eacute;riques, variables ##[[KeyPgConst Const]]## ou &eacute;num&eacute;rateurs ##[[KeyPgEnum Enum]]##.

	Les ableaux de longueur variable peuvent changer de taille, de sorte que le compilateur choisit d'allouer la m&eacute;moire pour les &eacute;l&eacute;ments du tableau lors de l'ex&eacute;cution, dans le stock libre. L'avantage ici, bien s&ucirc;r, c'est d'&ecirc;tre en mesure de redimensionner dynamiquement les tableaux, cependant, les performances d'ex&eacute;cution peuvent varier quand ils sont cr&eacute;&eacute;s, redimensionn&eacute;es ou d&eacute;truits. Les tableaux de longueur variable sont sont d&eacute;clar&eacute;s &agrave; l'aide de ##[[KeyPgExtern Extern]]##, ##[[KeyPgStatic Static]]##, ##[[KeyPgDim Dim]]## et ##[[KeyPgRedim ReDim]]##. Lors de l'utilisation de ##[[KeyPgExtern Extern]]##, ##[[KeyPgStatic Static]]## ou ##[[KeyPgDim Dim]]##, les bornes inf&eacute;rieure et sup&eacute;rieure peuvent &ecirc;tre laiss&eacute;es non sp&eacute;cifi&eacute;es--en d&eacute;coulant un tableau vide--ou l'une doit avoir une valeur sous forme de variable, comme une variable ##[[KeyPgInteger Integer]]## ou un r&eacute;sultat de ##[[KeyPgFunction Function]]##. ##[[KeyPgRedim ReDim]]## peut &ecirc;tre utilis&eacute; pour redimensionner un tableau de longueur variable existant, en lui donnant des limites inf&eacute;rieure et/ou sup&eacute;rieure diff&eacute;rentes.

{{fbdoc item="filename" value="examples/manual/proguide/arrays/array3.bas"}}%%(freebasic)
' Creates a fixed-length array that holds 5 single elements.
const totalSingles = 5
dim flarray(1 to totalSingles) as single

' Creates an empty variable-length array that holds integer values.
dim vlarray() as integer

' Resizes the array to 10 elements.
redim vlarray(1 to 10) as integer
%%

{{fbdoc item="section" value="Les tableaux multi-dimensionnels
	Les tableaux examin&eacute;s jusqu'ici &eacute;taient uni-dimensionnels, c'est-&agrave;-dire que leurs &eacute;l&eacute;ments sont accessibles via une seule position. Les tableaux &agrave; une dimension peuvent &ecirc;tre consid&eacute;r&eacute;s comme une simple rang&eacute;e d'&eacute;l&eacute;ments. Les tableaux peuvent aussi avoir plus d'une dimension; un &eacute;l&eacute;ment individuel du tableau est accessible &agrave; l'aide de deux ou plusieurs positions. Les tableaux &agrave; deux dimensionnels utilisent deux positions--une position de ligne et une de colonne--pour se r&eacute;f&eacute;rer &agrave; des &eacute;l&eacute;ments individuels, comme une grille ou une table. Les tableaux tri-dimensionnels utilisent trois positions--une position de rang&eacute;e, de colonne et peut-&ecirc;tre de profondeur--pour se r&eacute;f&eacute;rer &agrave; des &eacute;l&eacute;ments individuels, comme dans un cube. Les tableaux &agrave; quatre dimensions peuvent &ecirc;tre consid&eacute;r&eacute;s comme un ou plusieurs tableaux tri-dimensionnels, et ainsi de suite. Les tableaux multi-dimensionnels sont d&eacute;clar&eacute;s comme les tableaux &agrave; une dimension, si ce n'est que plus d'une limite inf&eacute;rieure et une limite sup&eacute;rieure sont sp&eacute;cifi&eacute;es.

{{fbdoc item="filename" value="examples/manual/proguide/arrays/array4.bas"}}%%(freebasic)
' Take Care while initializing multi-dimensional array
Dim as integer multidim(1 to 2,1 to 5) = {{0,0,0,0,0},{0,0,0,0,0}}
%%

{{fbdoc item="see"}}
	- [[ProPgFixLenArrays Tableaux de longueur fixe]]
	- [[ProPgVarLenArrays Tableaux de longueur variable]]
	- [[ProPgVariableScope Port&eacute;e des variables]]

{{fbdoc item="back" value="CatPgProgrammer|Programmer's Guide"}}