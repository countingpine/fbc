{{fbdoc item="title" value="Shared Libraries"}}----
Une bibliothèque partagée c'est du code compilé qui pourra être chargé et utilisé plus tard lors de l'exécution d'un exécutable.

Lorsque le compilateur génère un exécutable, les fichiers sources de base sont d'abord transformés en fichiers objets.  Les fichiers objets sont ensuite liés ensemble pour créer un exécutable.  Une bibliothèque partagée c'est un peu comme une bibliothèque statique en ce qu'elle contient des fichiers objet.  Mais une bibliothèque partagée est aussi comme un fichier exécutable en ce qu'elle est chargée uniquement lorsque l'exécutable est en cours d'exécution.  

La bibliothèque est dénommée partagée, parce que le code dans la bibliothèque est chargé par un fichier exécutable à l'exécution et peut être chargé par plus d'un exécutable, même s'il peut n'y avoir qu'une seule copie de la bibliothèque partagée.

Une fois que la bibliothèque est générée, on peut alors utiliser le code qu'elle contient comme si nous avions compilé les sources directement avec notre programme.

{{fbdoc item="section" value="Exemple de bibliothèque partagée"}}
	Voici un exemple simple de création d'une bibliothèque partagée en utilisant ces trois fichiers:
	- ##mylib.bas## - le source de la bibliothèque
	- ##mylib.bi## - l'en-tête de la bibliothèque
	- ##mytest.bas## - un programme de test

	Notre bibliothèque aura un module unique assurant une fonction unique:

	{{fbdoc item="filename" value="examples/manual/proguide/shared-lib/mylib.bas"}}%%(freebasic)
'' mylib.bas
'' compiler avec: fbc -dll mylib.bas

'' Additionne deux nombres ensemble et retourne le résultat
Public Function Add2( ByVal x As Integer, ByVal y As Integer ) As Integer Export
  Return( x + y )
End Function
%%
	Compiler la bibliothèque avec:
	##fbc -dll mylib.bas##

	L'option ##-dll## indique au compilateur de prendre le code source, ##mylib.bas##, et de le transformer en un fichier objet ##mylib.o##, puis stocker le fichier objet dans une bibliothèque partagée.  Le nom de la bibliothèque partagée aura l' extension ##.so## ou ##.dll## selon que la plate-forme est la version Linux ou Windows. Une bibliothèque peut contenir de nombreux modules (fichiers source), chacun avec de nombreuses fonctions, mais pour cet exemple simple, il n'y en a simplement qu'un seul.

	Créer une bibliothèque partagée est presque identique à créer une bibliothèque statique à l'exception de l'ajout de spécificateur de déclaration ##[[KeyPgExport Export]]##.  ##**Export**## indique au compilateur de rendre la fonction visible aux autres exécutables chargeant la bibliothèque partagée.

	Pour faire usage de la bibliothèque dans un autre code source, nous avons besoin d'une certaine façon de dire au compilateur ce qui est exactement dans la bibliothèque.  Une bonne façon pour y parvenir est de mettre les déclarations (également appelée une interface ou API) de la bibliothèque dans un fichier d'en-tête.

	{{fbdoc item="filename" value="examples/manual/proguide/shared-lib/mylib.bi"}}%%(freebasic)
'' mylib.bi
#inclib "mylib"
Declare Function Add2( ByVal x As Integer, ByVal y As Integer ) As Integer
%%
	Il n'est pas nécessaire de compiler le fichier d'en-tête.  Nous le souhaitons sous sa forme de source pour qu'il puisse être inclus avec les autres fichiers source.  L' instruction ##[[KeyPgInclib #inclib]]## donnera au compilateur le nom de la bibliothèque partagée que nous devons lier à l'exécution d'un exécutable qui en a besoin.

	Grâce à notre bibliothèque (fichier .dll / .so) et un fichier en-tête (.bi file) nous pouvons les essayer dans un programme de test:

	{{fbdoc item="filename" value="examples/manual/proguide/shared-lib/mytest.bas"}}%%(freebasic)
'' mytest.bas
'' compiler avec: fbc mytest.bas
#include once "mylib.bi"
Print Add2(1,2)
%%
	L'instruction ##[[KeyPgInclude #include]]## indique au compilateur d'inclure le code de source à partir de ##mylib.bi## comme si nous l'avions tapé dans le source original.  De la manière dont nous avons écrit notre fichier d'inclusion, il indique au compilateurtout ce qu'il doit savoir sur la bibliothèque.

	Nous compilons ceci avec:
	##fbc mytest.bas##

	Puis, quand nous lançons l'exécutable ##mytest##, nous devrions obtenir le résultat:
	##3##

	Plus d'un module source peut être utilisé lors de la compilation de la bibliothèque.  Et les programmes de base peuvent utiliser plus d'une bibliothèque en incluant les fichiers en-tête nécessaires.  Certaines bibliothèques sont si importantes qu'elles peuvent utiliser plusieurs en-têtes.  Pour de très grands projets, la création de bibliothèques partagées avec certains modules de code qui ne changent que rarement peut améliorer considérablement les temps de compilation.

	Les bibliothèques partagées peut éventuellement contenir des informations de débogage spécifiées avec l'option de ligne de commande //[[CompilerOptg -g]]//.

	Les fichiers objets, et donc les bibliothèques partagées, sont spécifique à la plate-forme et dans certains cas spécifiques à une version particulière du compilateur et de la bibliothèque d'exécution FreeBASIC.

{{fbdoc item="section" value="Utilisation des bibliothèques partagées sous Windows"}}
	Sous Windows, la bibliothèque partagée doit être stockée dans un endroit où elle peut être trouvée par l'exécutable qui en a besoin à l'exécution.  

	Le système d'exploitation peut rechercher dans les répertoires suivants:
	- Le répertoire à partir duquel l'exécutable a été chargé.
	- Le répertoire courant.
	- Le répertoire Windows et le dossier système de Windows.
	- La liste des répertoires dans la variable d'environnement ##PATH##.

	L'ordre dans lequel les répertoires sont parcourus peut dépendre de la version Windows en cours d'utilisation et avec quels paramètres le système d'exploitation est configuré.

{{fbdoc item="section" value="Utilisation des bibliothèques partagées sous Linux"}}

	Par défaut, Linux normalement ne cherchera pas dans le répertoire courant ou dans le répertoire à partir duquel l'exécutable a été chargé.  Vous devrez soit:
	- copier le fichier .so copier le fichier dans un répertoire qui contient les bibliothèques partagées (par exemple, ##/usr/lib##) et lancer ##ldconfig## pour configurer la bibliothèque.
	- modifier la variable d'environnement LD_LIBRARY_PATH pour rechercher le répertoire courant ou dans un répertoire spécifique pour la bibliothèque partagée nouvellement créée.

	Pour lancer l'exécutable ##./mytest/## et dire à Linux de rechercher temporairement dans le répertoire courant, utilisez la commande suivante:
	%%
LD_LIBRARY_PATH=.:$LD_LIBRARY_PATH ./mytest
%%

{{fbdoc item="section" value="Executables that export symbols"}}
	Si un fichier exécutable contient des symboles qui doivent être disponibles pour d'autres bibliothèques partagées lorsque ces bibliothèques partagées sont chargés, utilisez le spécificateur de déclaration de procédure ##[[KeyPgExport Export]]## et l'option //[[CompilerOptexport -export]]// de la ligne de commande lors de la compilation (linkage) de l'exécutable.

	L'option //[[CompilerOptexport -export]]// n'a aucun effet supplémentaire lorsqu'elle est utilisée avec les options de ligne de commande //[[CompilerOptdylib -dylib]]// ou //[[CompilerOptdll -dll]]//.

{{fbdoc item="section" value="Chargement dynamique des bibliothèques partagées"}}
	Les bibliothèques partagées peuvent être chargées et utilisées lors de l'exécution par chargement dynamique de la bibliothèque et de ses symboles, à l'exécution.
	- ##[[KeyPgDylibload Dylibload]]## peut être utilisé pour charger et obtenir un "handle" (identifiant numérique) à une bibliothèque partagée.
	- ##[[KeyPgDylibsymbol Dylibsymbol]]## est utilisé pour obtenir l'adresse d'un symbole dans une bibliothèque partagée qui a été chargée.
	- ##[[KeyPgDylibfree Dylibfree]]## est utilisé pour décharger une bibliothèque partagée quand elle n'est plus nécessaire.

	Les procédures dans une bibliothèque partagée doivent utiliser le spécificateur ##[[KeyPgExport Export]]## afin de s'assurer que le nom des symboles est placé dans le tableau des exportations de la librairie partagée.

{{fbdoc item="see"}}
	- [[ProPgStaticLibraries Bibliothèques statiques]]
	- ##[[KeyPgInclib #inclib]]##
	- ##[[KeyPgInclude #include]]##
	- [[CompilerOptdll Option du compilateur: -dll]]
	- [[CompilerOptexport Option du compilateur: -export]]
	- [[CompilerOptdylib Option du compilateur: -dylib]]

{{fbdoc item="back" value="CatPgProgrammer|Programmer's Guide"}}
