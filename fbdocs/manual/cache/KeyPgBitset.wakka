{{fbdoc item="title" value="BITSET"}}----
Obtient la valeur d'un entier dont on a positionné un certain bit à un (1).

{{fbdoc item="syntax"}}##
	[[KeyPgPpdefine #define]] **Bitset**( //value//, //bit_number// ) ((//value//) [[KeyPgOpOr or]] ([[KeyPgCast Cast]]([[KeyPgTypeof TypeOf]](//Value//), 1) [[KeyPgOpShiftLeft shl]] (//bit_number//)))
##
{{fbdoc item="usage"}}##
	//result// = **Bitset**( //value//, //bit_number// )
##
{{fbdoc item="param"}}
	##//value//##
		La valeur entière.
	##//bit_number//##
		L'indice du bit à mettre à zéro.

{{fbdoc item="ret"}}
	Retourne la valeur entière avec le bit spécifié mis à 1.

{{fbdoc item="desc"}}
	Cette macro se développe en une copie de la valeur entière ##//value//## avec le bit ##//bit_number//## "validé" (à //on//, ou `##1##`). Se comporte comme `##//value// [[KeyPgOpOr Or]] (1 [[KeyPgOpShiftLeft Shl]] //bit_number//)##`.

	La plage valide de valeurs pour ##//bit_number//## dépend de la taille, en bits, de`##[[KeyPgTypeof Typeof]](//value//)##`, qui est `##0##` par le biais de `##[[KeyPgSizeof Sizeof]](//value//) * 8 - 1##`. Voir [[TblVarTypes Limites des types de données standard]] pour un tableau des types de données standard et leurs tailles.

{{fbdoc item="ex"}}
{{fbdoc item="filename" value="examples/manual/bits/bitset.bas"}}%%(freebasic)
print bitset(4, 0)
print hex(bitset(1ull, 63))
%%
	produira la sortie:

%% 5
8000000000000001
%%

{{fbdoc item="lang"}}
	- Non disponible dans le dialecte //[[CompilerOptlang -lang qb]]//.

{{fbdoc item="diff"}}
	- Nouveau pour ""FreeBASIC""

{{fbdoc item="see"}}
	- ##[[KeyPgBit Bit]]##
	- ##[[KeyPgBitreset Bitreset]]##
	
{{fbdoc item="back" value="CatPgBits|Bit Manipulation"}}

