{{fbdoc item="title" value="BYVAL"}}----
Sp&eacute;cificateur de d&eacute;claration pour passer explicitement un param&egrave;tre par valeur

{{fbdoc item="syntax"}}##
	**Byval** //param// [[KeyPgAs as]] [[DataType datatype]]
##
{{fbdoc item="usage"}}##
	[ [[KeyPgDeclare declare]] ] { [[KeyPgSub sub]] | [[KeyPgFunction function]] } //proc_name// ( **Byval** //param// [[KeyPgAs as]] [[DataType datatype]]  )
##
{{fbdoc item="desc"}}
	##**ByVal**## dans une liste de param&egrave;tres d'une instruction de d&eacute;claration provoque une copie de la variable &agrave; passer par sa valeur &agrave; la proc&eacute;dure (par exemple, un sous-programme ou une fonction).

	Cela signifie que si la valeur de la variable //##x##// est pass&eacute;e, alors la variable d'origine //##x##// ne sera en aucune fa&ccedil;on modifi&eacute;e; toutefois, si la variable a &eacute;t&eacute; pass&eacute;e ##[[KeyPgByref ByRef]]##, la valeur de la variable d'origine //##x##// peut &ecirc;tre modifi&eacute;e par la fonction appel&eacute;e.

	Note: Pour arguments de cha&icirc;ne, ##**ByVal**## a actuellement un sens diff&eacute;rent: au lieu de passer une copie de la cha&icirc;ne, il passe un pointeur ##[[KeyPgZstring ZString]]## vers la cha&icirc;ne de donn&eacute;es, alors que ##[[KeyPgByref ByRef]]## passe un pointeur vers le descripteur de cha&icirc;ne FreeBASIC. Ce comportement permet de passer ##**ByVal**## ##[[KeyPgString String]]## directement aux proc&eacute;dures C. La cha&icirc;ne pass&eacute;e de cette mani&egrave;re ne sera pas chang&eacute;e par ##[[KeyPgSub Sub]]##/##[[KeyPgFunction Function]]##, et le descripteur de cha&icirc;ne ne sera pas mis &agrave; jour. La signification du passage d'une ##[[KeyPgString String]]## ##**ByVal**## pourrait changer dans le futur; par cons&eacute;quent, passer ##[[KeyPgString String]]## ##**ByVal**## doit &ecirc;tre &eacute;vit&eacute;.  ##[[KeyPgZstring ZString]]## est plus adapt&eacute; dans le but de passer des "cha&icirc;nes termin&eacute;es par z&eacute;ro" (ZString) aux fonctions C.

	L'oppos&eacute; de ##[[KeyPgByref ByRef]]##.

{{fbdoc item="ex"}}
{{fbdoc item="filename" value="examples/manual/procs/byval.bas"}}%%(freebasic)
Sub MySub(byval value as integer)
	value += 1
End Sub

Dim MyVar As Integer

MyVar = 1
Print "MyVar: "; MyVar 'output = 1
MySub MyVar
Print "MyVar: "; MyVar 'output = 1, because byval won't change the values passed into it globally.
Sleep
End
%%

{{fbdoc item="lang"}}
	- Dans le dialecte //[[CompilerOptlang -lang fb]]//, ##**ByVal**## est la convention de passage de param&egrave;tre par d&eacute;faut pour tous les types int&eacute;gr&eacute;s &agrave; l'exception de ##[[KeyPgString String]]##; Cha&icirc;ne (String) et les ##[[KeyPgType Type]]##s d&eacute;finis par l'utilisateur sont pass&eacute;s ##[[KeyPgByref ByRef]]## par d&eacute;faut.
	- Dans les dialectes //[[CompilerOptlang -lang qb]]// et //[[CompilerOptlang -lang fblite]]//, ##**ByRef**## est la convention de passage des param&egrave;tres.

{{fbdoc item="diff"}}
	- QB utilise seulement ##**ByVal**## dans les d&eacute;clarations aux sous-routines non-Basic

{{fbdoc item="see"}}
	- [[ProPgPassingArguments Passer des arguments aux proc&eacute;dures]]
	- ##[[KeyPgDeclare Declare]]##
	- ##[[KeyPgByref ByRef]]##

{{fbdoc item="back" value="CatPgProcedures|Procedures"}}