{{fbdoc item="title" value="EOF"}}----
Vérifie si la fin d'un fichier ouvert a été atteinte

{{fbdoc item="syntax"}}##
	[[KeyPgDeclare declare]] [[KeyPgFunction function]] **Eof** ( [[KeyPgByval byval]] //filenum// [[KeyPgAs as]] [[KeyPgInteger integer]] ) [[KeyPgAs as]] [[KeyPgInteger integer]]
##
{{fbdoc item="usage"}}##
	//result// = **Eof**( //filenum// )
##
{{fbdoc item="param"}}
	##//filenum//##
		Un ##[[KeyPgInteger integer]]## numéro d'un fichier ouvert.

{{fbdoc item="ret"}}
	Retourne vrai (true) (-1) si la fin du fichier (End Of File) a été atteinte, autrement zéro (0).

{{fbdoc item="desc"}}
	Lors d'une lecture de fichier ouvert avec ##[[KeyPgInputfilemode Input (File Mode)]]##, il est utile de savoir quand la fin du fichier est atteinte, ceci évite d'avoir une erreur causée par un essai de lecture après la fin du fichier. L'utilisation de ##**EOF**## permet de déterminer quand on a atteint la fin. ##**EOF**## attend un numéro valide de fichier déjà ouvert. Utilisez ##[[KeyPgFreefile Freefile]]## pour récupérer un numéro de fichier disponible.

	Pour les numéros de fichiers liés aux fichiers ouverts pour ##[[KeyPgOutput Output]]##, EOF retourne toujours 0.

{{fbdoc item="ex"}}
{{fbdoc item="filename" value="examples/manual/fileio/eof.bas"}}%%(freebasic)
'' This code finds a free file number to use and attempts to open the file
'' "file.ext" and if successful, binds our file number to the opened file. It
'' reads the file line by line, outputting it to the screen. We loop until eof()
'' returns true, in this case we ignore the loop if file is empty.

dim as string file_name
dim as integer file_num

file_name = "file.ext"
file_num = freefile( )                 '' retrieve an available file number

'' open our file and bind our file number to it, exit on error
if( open( file_name for input as #file_num ) ) then
   print "ERROR: opening file " ; file_name
   end -1
end if

do until eof( file_num )               '' loop until we have reached the end of the file
   dim as string text
   line input #file_num, text               '' read a line of text ...
   Print text                             '' ... and output it to the screen
loop

close #file_num                        '' close file via our file number

end 0
%%

	En raison des différences sous-jacentes dans les librairies utilisées par le compilateur sur les différentes plates-formes, la fonction ##**EOF**## peut être peu fiable lors de la lecture de fichiers texte créés dans Linux (avec des fins de ligne indiquées par LF) dans la version Windows du compilateur. Les compilateur DOS et Linux n'ont pas ce problème. Une solution consiste à ouvrir le fichier pour un accès [[KeyPgBinary Binary]] au lieu d'un [[KeyPgInputfilemode Input]]. [[KeyPgLineinputPp Line Input#]] et ##**EOF**## peuvent encore être utilisés comme dans l'exemple ci-dessus, et la fonction EOF sera fiable. Cette solution ne détecte pas le caractère de fin de fichier, mais ceci n'est utilisé que pour marquer la fin des flux de texte qui ne sont pas des fichiers sur le disque.

{{fbdoc item="diff"}}
	- Dans QB le port COM signale un EOF quand il n'y a aucun caractère en attente de lecture.
	- Dans QB, pour les fichiers ouverts en mode RANDOM ou BINARY, EOF retourne une valeur différente de zéro seulement après une lecture une fois la fin du fichier atteinte.  Dans FreeBASIC, EOF retourne "true" (vrai) après la lecture du dernier item.

{{fbdoc item="see"}}
	- ##[[KeyPgLof Lof]]##
	- ##[[KeyPgLoc Loc]]##
	- ##[[KeyPgFreefile Freefile]]##

{{fbdoc item="back" value="CatPgFile|File I/O Functions"}}

