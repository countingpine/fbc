{{fbdoc item="title" value="Nouveau &agrave; la programmation?"}}----
Si vous êtes nouveau à la programmation en général, vous devriez probablement apprendre ce que sont certains concepts de base:

**Comment votre programme est exécuté**
	-Qu'est-ce qu'un compilateur?
	-Syntaxe
	-Déroulement du programme
**Variables**
	-Types de données de base
**Entrée/Sortie (E/S)**

Ci-dessus vous avez les concepts de programmation les plus importants pour un débutant absolu qui veut apprendre la programmation.  Je vais expliquer comment ces concepts fonctionnent en FreeBASIC.  Il est également important d'apprendre à utiliser le manuel, situé à www.freebasic.net/wiki.  La plupart des communautés de programmation et les langages ont des manuels avec des descriptions et des démonstrations.  TOUJOURS consulter le manuel avant d'aller voir ailleurs.  Il y a des chances que les informations que vous cherchez soient dans le manuel, et si elles n'y sont pas, elles peuvent être ajoutées.

Ce tutoriel concerne la version 1.0. Ne vous souciez pas pour le numéro de révision ^^;;

===Comment votre programme est exécuté===

==Qu'est-ce qu'un compilateur?==

FreeBASIC est un langage de programmation compilé, plutôt qu'interprété.  Ce que cela signifie, c'est que FreeBASIC prend le code que vous tapez, comme "PRINT" ou "SLEEP" et le transforme directement en code "Assembleur" ou "Machine".  Les codes "Assembleur" et "Machine" sont compris par les ordinateurs.  En général, vous ne coderez jamais en code "Machine", quel que soit le "niveau bas" (low level) (la façon dont vous êtes proche du code machine de programmation) où vous irez.

FreeBASIC est un langage de programmation de haut niveau.  FreeBASIC fait en sorte que le programmeur ait à faire moins de travail possible. Avec une programmation de haut niveau, vous n'avez pas à vous soucier des domaines les plus complexes de la programmation.  Dans les langages de programmation tels que C et ASM, qui sont de bas niveau, le programmeur a l'avantage de la manipulation de l'ordinateur sur un plan plus précis et moins humain, avec l'inconvénient d'avoir à en savoir plus sur ce qui se passe en interne.

Le choix de votre compilateur dépendra de la situation.  Si vous désirez un contrôle complet sur chaque action entreprise par votre ordinateur, vous choisirez de coder en ASM ou C.  Cependant, comme les ordinateurs et les compilateurs ont progressé, vous n'avez plus à vous soucier autant de la vitesse et les détails de niveau inférieur de votre code.  À bien des égards, tout l'objet de la programmation de niveau supérieur est de s'assurer que vous n'aurez pas à vous soucier des ces choses.  FreeBASIC gère de nombreuses optimisations et améliorations que vous auriez normalement eu à faire vous-même, tout en vous permettant d'accéder aux zones de niveau inférieur de contrôle si vous le souhaitez.  Un problème par rapport à cela, cependant, qui est un problème commun à la plupart des formes de plus haut niveau de la programmation, est le niveau élevé des actions implicites prises par le compilateur.  Si vous voulez travailler avec le code de niveau inférieur dans un langage de haut niveau, vous avez besoin de savoir comment contrôler explicitement certains aspects de votre code.

==Syntaxe==

La syntaxe est la façon dont les mots et commandes sont regroupées dans la programmation, l'ordre dans lequel ils se trouvent, quelles commandes sont autorisées et où, et si cela est compatible, fixe des règles sur la façon dont vous structurez votre programme.

Par exemple, dans la programmation, vous aurez la tâche d'appeler des commandes et de leur donner l'ordre de faire quelque chose.  Les règles de syntaxe vous diront comment vous pouvez appeler cette commande et ce qui est ou n'est pas autorisé.  Elles vous aideront à appeler cette commande intelligemment, et vous aideront à prévenir d'éventuelles erreurs qui pourraient survenir dans un environnement avec une "syntaxe plus laxiste" (ce qui est pratiquement impossible dans la plupart des formes de la programmation).

La syntaxe du FreeBASIC est généralement comme suit:  NomCommande ""[""Argument,""]"" ""[""Un autre Argument""]""

Si ce qui précède peut sembler déroutant au premier abord, c'est en fait très simple.  Tout cela signifie que vous donnez au compilateur une commande, puis vous donnez vos arguments après la commande.  Les arguments sont séparés les uns des autres par des virgules.  Un exemple de commande pourrait être:  ##//Draw Circle, 10//##.  On peut supposer que ##//Draw//## dessinera quelque chose, ##//Circle//## sera la forme dessinée et 10 le rayon du cercle.  Dans ce cas, les règles de syntaxe pour cette commande pourraient ressembler à:  ##//Draw ""[""Shape,""]"" ""[""Size""]""//##

Le code de FreeBASIC n'est *pas* sensible à la casse.  Appeler la commande """DRaW""" est identique à appeler la commande "draw".

==Déroulement du programme==

Le code FreeBASIC est lu depuis le HAUT du code, jusqu'au BAS, une ligne à la fois.  Lorsque la ligne de code est lue par le compilateur, ou que le code compilé pour cette ligne est lu par l'ordinateur, la commande qui se trouve sur la ligne sera exécutée (elle sera exécutée, ce qui se produira, votre ordinateur fera ce que le code lui dit de faire).  Un exemple de code peut être:

%%(freebasic)
PRINT "HI"
SLEEP
%%

Puisque le code PRINT est sur une ligne avant SLEEP, PRINT sera exécuté en premier.  SLEEP est sur la ligne suivante et sera exécutée après que l'exécution de PRINT soit terminée.

Des commentaires peuvent être faits en FreeBASIC, qui seront ignorés et ne deviendront pas une partie de votre programme.  Des commentaires peuvent prendre jusqu'à une ligne complète si vous les commencez par ##**'**## ou peuvent être des commentaires sur plusieurs lignes si vous les commencez par ##**/**## et les terminez par ##**/**##.  Voici un exemple d'utilisation des commentaires.  Remarquez comment aucun des codes ou caractères dans les commentaires ne sont utilisés par le compilateur.

%%(freebasic)
'  ABLASHD
' PRINT "HI!" ' Cette ligne de code ne sera jamais affichée, car elle est commentée.
Print "Ceci n'est pas un commentaire.  Cet événement aura lieu."  ' Affiche que ceci n'est pas uncommentaire.
Sleep ' Met en pause le programme jusqu'à l'appui sur une touche.
%%

===Variables===

Que sont les variables?  Elles sont la partie la plus importante de la programmation, voici pourquoi.  Chaque fois que vous faites quelque chose d'utile dans la programmation, vous allez stocker des informations dans des variables.

Vous souvenez-vous fait algèbre ou avoir utilisé des lettres en mathématiques, à l'école?  Un exemple pourrait ressembler à:  ##//x = 4, 1 + x = 5//##.  En programmation, les variables correspondent exactement à cela.  Ce sont des mots ou des lettres qui contiennent des valeurs dans la programmation.  Ces valeurs peuvent stocker des données importantes comme un nom, à combien s'élève la santé de votre personnage principal dans votre jeu vidéo ou même quelque chose d'aussi simple que la couleur d'un pixel.  Lorsque vous créez une variable, en réalité vous stockez les données qu'elle contient dans un petit morceau de la mémoire de l'ordinateur.  En FreeBASIC et la plupart des langages de programmation, vous travaillerez beaucoup avec des variables.

Pour créer des variables en FreeBASIC, utilisez la commande DIM.  De quoi DIM est-il l'abréviation?  Je ne sais pas, mais il pourrait être l'abréviation de DIMENSION, où les programmeurs définissent la "taille" de leur variable.  DIM est utilisé pour dire FreeBASIC que nous créons une nouvelle variable dans notre programme.  La commande est décrite plus en détail sur la page [[KeyPgDim Dim]], mais nous allons l'expliquer moins en détail ici.

La syntaxe la plus simple pour les DIM est:  ##**DIM [NomDeVariable] AS [TypeDeDonnée] [= [Valeur] ]**##

Que fait cela, il dit à FreeBASIC:
- Nous créons une variable, parce que nous avons tapé la commande DIM
- Nous nommons la variable [NomDeVariable] (où "NomDeVariable" est le nom de la variable que nous voulons céer.  Une variable peut être nommée X, Y, AlexPritchard, BLahblh, Foo, etc.)
- Nous spécifions le type de la variable, car nous avons tapé AS après "NomDeVariable"
- Nous créons une variable du type [TypeDeDonnée] (Le type de donnée peut être quelque chose qui contient chiffres, des lettres, ou tout un tas de choses!)
- On peut aussi assigner la valeur de la variable par EQUALS (=) après sa création.

Exemple:
%%(freebasic)
DIM foo AS INTEGER = 5
PRINT foo
SLEEP
%%

Dans notre programme, on créé ##//foo//##. FOO est créé comme un INTEGER (Un [[CatPgStdDataTypes type de données]] qui peut contenir des nombres). Nous avons donné à ##//foo//## la valeur de 5.  Puis nous appelons la commande PRINT, qui PRINT (AFFICHE) l'information à l'écran.  Nous PRINTons ##//foo//##, donc le nombre 5 sera PRINTé à l'écran.  Puis nous SLEEPons, ce qui met notre programme en pause jusqu'à ce qu'on appuie sur une touche.

==Les types de données de base==

Les variables sont un sujet difficile, je pense, pour débuter dans la programmation.  Il y a beaucoup de différents types de variables! Le type de variable est le type de données.  "Le type de donnée qui est détenue dans ce type de variable" et vous vous demandez pourquoi il a été ramené à un type de données? ^^;;  Pour les débutants, on va vous familiariser avec ces types de variables:

Integer (Entier)- Contient des nombres SANS PARTIE DECIMALE.  Sera généralement de la taille d'un registre de votre ordinateur, ce qui n'est pas un sujet que je vais développer.
Double - Contient des nombres AVEC PARTIE DECIMALE.  Contient aussi bien de très grans comme de très petits nombres, avec des niveaux élevés de précision (une manière pour donner exactement à une variable toute valeur que vous désirez lui attribuer)
String (Chaîne) - Une fonctionnalité intéressante de FreeBASIC.  STRING est un type de données qui contient des lettres et des chiffres pour vous.  Construit pour stocker des informations telles que votre nom et des informations intéressantes à afficher à l'écran, telles que les Instructions de cuisson.

Souvenez-vous, suivez la syntaxe correcte de DIM.  DIM "nomdevariable" AS INTEGER créera un INTEGER appelé "nomdevariable", que vous pourrez utiliser dans votre programme.  Vous pouvez remplacer INTEGER par DOUBLE ou STRING.  ATTENTION!  Les types de données ne sont *pas* toujours compatibles les uns avec les autres!  Vous ne pouvez pas donner à une STRING la valeur 5!  Vous pouvez cependant lui donner la valeur de "5" (les guillemets spécifient des caractères de chaîne dans FB).  Vous ne pouvez pas avoir un nombre entier ou double égal à "5", car "5" est une chaîne et pas un nombre.

Voici un exemple vraiment "cool", qui montre comment vous pouvez utiliser des variables pour stocker votre nom.

%%(freebasic)
'' Crée la variable MyName.  Lui affecte la valeur 'Alex'
DIM as STRING MyName = "Alex"

'' Affiche la variable MyName
Print MyName

'' met le programme en pause jusqu'à l'appui sur une touche.
Sleep
%%

===Entrée/Sortie (E/S)===

L'##**Entrée**## est de la réception de l'information.  Lorsque vous demandez une ##**Entrée**## sur quelque chose, quelqu'un ou quelque chose vous est donné.  Vous obtenez une ##**Sortie**## de leur part.  (DEMANDER QUELQUE CHOSE, Récupérer quelque chose)

La ##**Sortie**## est l'envoi d'informations.  Quand vous effectuez une ##**Sortie**## vers quelqu'un, vous êtes celui qui lui donne une ##**Entrée**##.  (DONNER QUELQUE CHOSE, Envoyer quelque chose)

Input (Entrée) et Output (Sortie) sont souvent rassemblés et abrégés I/O (E/S) ou IO (ES).


FreeBASIC possède de NOMBREUSES méthodes d'##**Entrée**## et de ##**Sortie**##.  Pour un débutant, la plupart d'entre elles pourraient finir par vous dérouter, car elles nécessitent généralement une meilleure connaissance des variables et de formes plus complexes de la programmation.  Nous allons étudier les bases même des E/S.

Vous vous souvenez de la commande PRINT dans les exemples ci-dessus?  C'est une ##**Sortie**##.  PRINT effectue une ##**Sortie**## vers l'écran de l'ordinateur.  PRINT est une forme très basique de ##**Sortie**## et elle est également facile à étudier!  Il vous suffit d'appeler la commande PRINT, puis lui dire ce que vous voulez afficher.  Si vous voulez PRINT des mots, vous les donnez entre des guillemets doubles.  Si vous souhaitez afficher une variable, il suffit de donner à PRINT le nom de la variable que vous désirez afficher.

Print [CeQuiEstàAfficher]
Exemple:

%%(freebasic)
'' Affiche le mot HI! à l'écran
Print "HI!"

'' Crée un nouvel entier et le nomme foo.  Lui donne la valeur de 10.
Dim as Integer foo = 10

'' Affiche la valeur de foo.
Print foo
sleep
%%

INPUT n'est pas beaucoup plus compliqué.  Cependant, chaque fois que vous utilisez INPUT, vous devez récupérer ce que vous avez obtenu d'INPUT et le mettre dans quelque chose.  Exactement comme pour une sortie, nous devons donner quelque chose à la commande PRINT pour qu'elle le sorte.  Nous connaissez déjà des variables, n'est-ce pas?  Nous allons utiliser nos des variables pour stocker les informations entrées par l'utilisateur.

1) Nous avons besoin d'une variable pour stocker ces informations dedans.
2) Nous avons besoin d'appeler une commande pour obtenir une entrée.
3) Nous avons besoin d'imprimer l'entrée pour s'assurer que nous avons stocké correctement l'information.

Je sais comment faire 1 et 3, mais que faire pour le 2?  Nous allons apprendre une nouvelle commande pour cela.  Pouvez-vous deviner son nom?  INPUT!  Ouaip ^^;; Pour obtenir INPUT (ENTREE), nous allons utiliser la commande, INPUT.

La syntaxe d'INPUT est la suivante:  INPUT [VariableAEntrer]

You can also use input like so:  INPUT [Chaîne à Afficher Pour Demander à l'Utilisateur ce qu'il doit Entrer,] [VariableAEntrer]

La première version d'INPUT  vous permettra de recueillir l'ENTREE et la placera dans la variable.  La seconde version OUTPUT (AFFICHE) votre message à l'écran avant de demander pour l'ENTREE.  De cette façon, l'utilisateur saura ce qu'il doit entrer!  En variante, vous pouvez simplement utiliser la commande PRINT avant qu'INPUT envoie un message, mais parfois pouvoir mettre le code relatif sur une seule ligne est plus commode.

Exemple:

%%(freebasic)
'' Crée une chaîne.  Nous chargerons le nom utilisateur dans une chaîne!
Dim as STRING MyName

'' Obtient le nom utilisateur!
'' The message Please Enter Your Name is posted on the screen,
'' and then the user has a chance to enter in their name!
Input "SVP, entrez votre nom!", MyName

'' Affiche nom utilisateur obtenu à l'instant.
'' Comme input, nous pouvons afficher plusieurs messages ou
'' exécuter different types de commandes en les séparant par des virgules.
Print "Votre Nom est: ", MyName

'' met le programme en pause jusqu'à un appui sur une touche
sleep
%%

Cela illustre INPUT et OUTPUT!  Les deux sont essentiels dans la programmation, ou au moins la programmation graphique.  OUTPUT peut faire beaucoup de choses différentes, ainsi que INPUT.  Vous pourriez obtenir entrée de capteurs d'un bras robotique plutôt que par le clavier de l'utilisateur.  Vous avez peut-être la sortie sur une perceuse électrique plutôt que  sur un moniteur.  Cela dépend réellement du matériel et le but de votre programme.

A ce moment-là, et dans la plupart des cas, vous n'avez pas à trop à vous inquiéter d'où vient l'entrée ou où elle va relativement à vos fonctions standard d'E/S.  Des méthodes plus avancées d'E / S vous permettent de décider d'où elle vient (de quelle entrée) et où elle va (où envoyer la sortie).

===Définitions de programmation===

Argument:  Voir paramètre

ASM:  Le code de niveau le plus bas que l'homme peut lire.  Il peut être compilé directement en code machine.

Compilation:  Le processus de transformation du texte d'un langage à l'autre.  Ex:  BASIC en FreeBASIC compilé en ASM.  Cet ASM compilé en code machine.

Code Machine:  Des 0 et des 1.  C'est *le* code que votre ordinateur comprendra.

Paramètre:  Les données que vous passez à une commande que vous appelez dans la programmation.  Les paramètres passés permettent aux commandes de savoir COMMENT elles devront faire quelque chose ou ce qu'elles devront faire.  Passé lea paramètre 'Rectangle' à la commade 'Draw', serait logique si cela dessinait un rectangle sur votre écran.

Pixel:  Un 'point' sur votre moniteur.  Les moniteurs sont constitués de milliers de petits points qui sont éclairés de différentes couleurs.  La couleur dépend de la valeur de la variable pixel que le moniteur reçoit.  Croyez-le ou non, même votre matériel utilise des variables, de nombreuses façons.

Syntaxe:  Comment les mots sont regroupés.  Votre syntaxe dans la programmation sont des ensembles de règles qui vous disent quel où code peut être placé.  Elle veille à ce que seul le code logique soit autorisé.  Ex:  Print "Hi".  PRINT est la COMMANDE, "Hi" est ce que la commande PRINT va utiliser.  Est-ce logique?

Variable:  Un mot qui contient des données dans la programmation.  Vous attribuez des valeurs à ces mots et avec ces valeurs, vous pouvez sauvegarder les informations de votre programme.

