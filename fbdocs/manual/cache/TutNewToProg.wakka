{{fbdoc item="title" value="New to Programming?"}}----
Si vous &ecirc;tes nouveau &agrave; la programmation en g&eacute;n&eacute;ral, vous devriez probablement apprendre ce que sont certains concepts de base:

**Comment votre programme est ex&eacute;cut&eacute;**
	<li>Qu'est-ce qu'un compilateur?
	<li>Syntaxe
	<li>D&eacute;roulement du programme
**Variables**
	<li>Types de donn&eacute;es de base
**Entr&eacute;e/Sortie (E/S)**

Ci-dessus vous avez les concepts de programmation les plus importants pour un d&eacute;butant absolu qui veut apprendre la programmation.  Je vais expliquer comment ces concepts fonctionnent en FreeBASIC.  Il est &eacute;galement important d'apprendre &agrave; utiliser le manuel, situ&eacute; &agrave; www.freebasic.net/wiki.  La plupart des communaut&eacute;s de programmation et les langages ont des manuels avec des descriptions et des d&eacute;monstrations.  TOUJOURS consulter le manuel avant d'aller voir ailleurs.  Il y a des chances que les informations que vous cherchez soient dans le manuel, et si elles n'y sont pas, elles peuvent &ecirc;tre ajout&eacute;es.

Ce tutoriel concerne la version 1.0. Ne vous souciez pas pour le num&eacute;ro de r&eacute;vision ^^;;

<div class="fb_header">Comment votre programme est ex&eacute;cut&eacute;

**Qu'est-ce qu'un compilateur?**

FreeBasic est un langage de programmation compil&eacute;, plut&ocirc;t qu'interpr&eacute;t&eacute;.  Ce que cela signifie, c'est que FreeBASIC prend le code que vous tapez, comme "PRINT" ou "SLEEP" et le transforme directement en code "Assembleur" ou "Machine".  Les codes "Assembleur" et "Machine" sont compris par les ordinateurs.  En g&eacute;n&eacute;ral, vous ne coderez jamais en code "Machine", quel que soit le "niveau bas" (low level) (la fa&ccedil;on dont vous &ecirc;tes proche du code machine de programmation) o&ugrave; vous irez.

FreeBASIC est un langage de programmation de haut niveau.  FreeBASIC fait en sorte que le programmeur ait &agrave; faire moins de travail possible. Avec une programmation de haut niveau, vous n'avez pas &agrave; vous soucier des domaines les plus complexes de la programmation.  Dans les langages de programmation tels que C et ASM, qui sont de bas niveau, le programmeur a l'avantage de la manipulation de l'ordinateur sur un plan plus pr&eacute;cis et moins humain, avec l'inconv&eacute;nient d'avoir &agrave; en savoir plus sur ce qui se passe en interne.

Le choix de votre compilateur d&eacute;pendra de la situation.  Si vous d&eacute;sirez un contr&ocirc;le complet sur chaque action entreprise par votre ordinateur, vous choisirez de coder en ASM ou C.  Cependant, comme les ordinateurs et les compilateurs ont progress&eacute;, vous n'avez plus &agrave; vous soucier autant de la vitesse et les d&eacute;tails de niveau inf&eacute;rieur de votre code.  &Agrave; bien des &eacute;gards, tout l'objet de la programmation de niveau sup&eacute;rieur est de s'assurer que vous n'aurez pas &agrave; vous soucier des ces choses.  FreeBASIC g&egrave;re de nombreuses optimisations et am&eacute;liorations que vous auriez normalement eu &agrave; faire vous-m&ecirc;me, tout en vous permettant d'acc&eacute;der aux zones de niveau inf&eacute;rieur de contr&ocirc;le si vous le souhaitez.  Un probl&egrave;me par rapport &agrave; cela, cependant, qui est un probl&egrave;me commun &agrave; la plupart des formes de plus haut niveau de la programmation, est le niveau &eacute;lev&eacute; des actions implicites prises par le compilateur.  Si vous voulez travailler avec le code de niveau inf&eacute;rieur dans un langage de haut niveau, vous avez besoin de savoir comment contr&ocirc;ler explicitement certains aspects de votre code.

**Syntaxe**

La syntaxe est la fa&ccedil;on dont les mots et commandes sont regroup&eacute;es dans la programmation, l'ordre dans lequel ils se trouvent, quelles commandes sont autoris&eacute;es et o&ugrave;, et si cela est compatible, fixe des r&egrave;gles sur la fa&ccedil;on dont vous structurez votre programme.

Par exemple, dans la programmation, vous aurez la t&acirc;che d'appeler des commandes et de leur donner l'ordre de faire quelque chose.  Les r&egrave;gles de syntaxe vous diront comment vous pouvez appeler cette commande et ce qui est ou n'est pas autoris&eacute;.  Elles vous aideront &agrave; appeler cette commande intelligemment, et vous aideront &agrave; pr&eacute;venir d'&eacute;ventuelles erreurs qui pourraient survenir dans un environnement avec une "syntaxe plus laxiste" (ce qui est pratiquement impossible dans la plupart des formes de la programmation).

La syntaxe du FreeBASIC est g&eacute;n&eacute;ralement comme suit:  NomCommande [Argument,] [Un autre Argument]

Si ce qui pr&eacute;c&egrave;de peut sembler d&eacute;routant au premier abord, c'est en fait tr&egrave;s simple.  Tout cela signifie que vous donnez au compilateur une commande, puis vous donnez vos arguments apr&egrave;s la commande.  Les arguments sont s&eacute;par&eacute;s les uns des autres par des virgules.  Un exemple de commande pourrait &ecirc;tre:  ##//Draw Circle, 10//##.  On peut supposer que ##//Draw//## dessinera quelque chose, ##//Circle//## sera la forme dessin&eacute;e et 10 le rayon du cercle.  Dans ce cas, les r&egrave;gles de syntaxe pour cette commande pourraient ressembler &agrave;:  ##//Draw [Shape,] [Size]//##

Le code de FreeBASIC n'est *pas* sensible &agrave; la casse.  Appeler la commande "DRaW" est identique &agrave; appeler la commande "draw".

**D&eacute;roulement du programme**

Le code FreeBASIC est lu depuis le HAUT du code, jusqu'au BAS, une ligne &agrave; la fois.  Lorsque la ligne de code est lue par le compilateur, ou que le code compil&eacute; pour cette ligne est lu par l'ordinateur, la commande qui se trouve sur la ligne sera ex&eacute;cut&eacute;e (elle sera ex&eacute;cut&eacute;e, ce qui se produira, votre ordinateur fera ce que le code lui dit de faire).  Un exemple de code peut &ecirc;tre:

%%(freebasic)
PRINT "HI"
SLEEP
%%

Puisque le code PRINT est sur une ligne avant SLEEP, PRINT sera ex&eacute;cut&eacute; en premier.  SLEEP est sur la ligne suivante et sera ex&eacute;cut&eacute;e apr&egrave;s que l'ex&eacute;cution de PRINT soit termin&eacute;e.

Des commentaires peuvent &ecirc;tre faits en FreeBasic, qui seront ignor&eacute;s et ne deviendront pas une partie de votre programme.  Des commentaires peuvent prendre jusqu'&agrave; une ligne compl&egrave;te si vous les commencez par ##**'**## ou peuvent &ecirc;tre des commentaires sur plusieurs lignes si vous les commencez par ##**/**## et les terminez par ##**/**##.  Voici un exemple d'utilisation des commentaires.  Remarquez comment aucun des codes ou caract&egrave;res dans les commentaires ne sont utilis&eacute;s par le compilateur.

%%(freebasic)
'  ABLASHD
' PRINT "HI!" ' Cette ligne de code ne sera jamais affich&eacute;e, car elle est comment&eacute;e.
Print "Ceci n'est pas un commentaire.  Cet &eacute;v&eacute;nement aura lieu."  ' Affiche que ceci n'est pas uncommentaire.
Sleep ' Met en pause le programme jusqu'&agrave; l'appui sur une touche.
%%

<div class="fb_header">Variables

Que sont les variables?  Elles sont la partie la plus importante de la programmation, voici pourquoi.  Chaque fois que vous faites quelque chose d'utile dans la programmation, vous allez stocker des informations dans des variables.

Vous souvenez-vous fait alg&egrave;bre ou avoir utilis&eacute; des lettres en math&eacute;matiques, &agrave; l'&eacute;cole?  Un exemple pourrait ressembler &agrave;:  ##//x = 4, 1 + x = 5//##.  En programmation, les variables correspondent exactement &agrave; cela.  Ce sont des mots ou des lettres qui contiennent des valeurs dans la programmation.  Ces valeurs peuvent stocker des donn&eacute;es importantes comme un nom, &agrave; combien s'&eacute;l&egrave;ve la sant&eacute; de votre personnage principal dans votre jeu vid&eacute;o ou m&ecirc;me quelque chose d'aussi simple que la couleur d'un pixel.  Lorsque vous cr&eacute;ez une variable, en r&eacute;alit&eacute; vous stockez les donn&eacute;es qu'elle contient dans un petit morceau de la m&eacute;moire de l'ordinateur.  En FreeBASIC et la plupart des langages de programmation, vous travaillerez beaucoup avec des variables.

Pour cr&eacute;er des variables en FreeBASIC, utilisez la commande DIM.  De quoi DIM est-il l'abr&eacute;viation?  Je ne sais pas, mais il pourrait &ecirc;tre l'abr&eacute;viation de DIMENSION, o&ugrave; les programmeurs d&eacute;finissent la "taille" de leur variable.  DIM est utilis&eacute; pour dire FreeBasic que nous cr&eacute;ons une nouvelle variable dans notre programme.  La commande est d&eacute;crite plus en d&eacute;tail sur la page [[KeyPgDim Dim]], mais nous allons l'expliquer moins en d&eacute;tail ici.

La syntaxe la plus simple pour les DIM est:  ##**DIM [NomDeVariable] AS [TypeDeDonn&eacute;e] [= [Valeur] ]**##

Que fait cela, il dit &agrave; FreeBASIC:
- Nous cr&eacute;ons une variable, parce que nous avons tap&eacute; la commande DIM
- Nous nommons la variable [NomDeVariable] (o&ugrave; "NomDeVariable" est le nom de la variable que nous voulons c&eacute;er.  Une variable peut &ecirc;tre nomm&eacute;e X, Y, AlexPritchard, BLahblh, Foo, etc.)
- Nous sp&eacute;cifions le type de la variable, car nous avons tap&eacute; AS apr&egrave;s "NomDeVariable"
- Nous cr&eacute;ons une variable du type [TypeDeDonn&eacute;e] (Le type de donn&eacute;e peut &ecirc;tre quelque chose qui contient chiffres, des lettres, ou tout un tas de choses!)
- On peut aussi assigner la valeur de la variable par EQUALS (=) apr&egrave;s sa cr&eacute;ation.

Exemple:
%%(freebasic)
DIM foo AS INTEGER = 5
PRINT foo
SLEEP
%%

Dans notre programme, on cr&eacute;&eacute; ##//foo//##. FOO est cr&eacute;&eacute; comme un INTEGER (Un [[CatPgStdDataTypes type de donn&eacute;es]] qui peut contenir des nombres). Nous avons donn&eacute; &agrave; ##//foo//## la valeur de 5.  Puis nous appelons la commande PRINT, qui PRINT (AFFICHE) l'information &agrave; l'&eacute;cran.  Nous PRINTons ##//foo//##, donc le nombre 5 sera PRINT&eacute; &agrave; l'&eacute;cran.  Puis nous SLEEPons, ce qui met notre programme en pause jusqu'&agrave; ce qu'on appuie sur une touche.

**Les types de donn&eacute;es de base**

Les variables sont un sujet difficile, je pense, pour d&eacute;buter dans la programmation.  Il y a beaucoup de diff&eacute;rents types de variables! Le type de variable est le type de donn&eacute;es.  "Le type de donn&eacute;e qui est d&eacute;tenue dans ce type de variable" et vous vous demandez pourquoi il a &eacute;t&eacute; ramen&eacute; &agrave; un type de donn&eacute;es? ^^;;  Pour les d&eacute;butants, on va vous familiariser avec ces types de variables:

Integer (Entier)- Contient des nombres SANS PARTIE DECIMALE.  Sera g&eacute;n&eacute;ralement de la taille d'un registre de votre ordinateur, ce qui n'est pas un sujet que je vais d&eacute;velopper.
Double - Contient des nombres AVEC PARTIE DECIMALE.  Contient aussi bien de tr&egrave;s grans comme de tr&egrave;s petits nombres, avec des niveaux &eacute;lev&eacute;s de pr&eacute;cision (une mani&egrave;re pour donner exactement &agrave; une variable toute valeur que vous d&eacute;sirez lui attribuer)
String (Cha&icirc;ne) - Une fonctionnalit&eacute; int&eacute;ressante de FreeBASIC.  STRING est un type de donn&eacute;es qui contient des lettres et des chiffres pour vous.  Construit pour stocker des informations telles que votre nom et des informations int&eacute;ressantes &agrave; afficher &agrave; l'&eacute;cran, telles que les Instructions de cuisson.

Souvenez-vous, suivez la syntaxe correcte de DIM.  DIM "nomdevariable" AS INTEGER cr&eacute;era un INTEGER appel&eacute; "nomdevariable", que vous pourrez utiliser dans votre programme.  Vous pouvez remplacer INTEGER par DOUBLE ou STRING.  ATTENTION!  Les types de donn&eacute;es ne sont *pas* toujours compatibles les uns avec les autres!  Vous ne pouvez pas donner &agrave; une STRING la valeur 5!  Vous pouvez cependant lui donner la valeur de "5" (les guillemets sp&eacute;cifient des caract&egrave;res de cha&icirc;ne dans FB).  Vous ne pouvez pas avoir un nombre entier ou double &eacute;gal &agrave; "5", car "5" est une cha&icirc;ne et pas un nombre.

Voici un exemple vraiment "cool", qui montre comment vous pouvez utiliser des variables pour stocker votre nom.

%%(freebasic)
'' Cr&eacute;e la variable MyName.  Lui affecte la valeur 'Alex'
DIM as STRING MyName = "Alex"

'' Affiche la variable MyName
Print MyName

'' met le programme en pause jusqu'&agrave; l'appui sur une touche.
Sleep
%%

<div class="fb_header">Entr&eacute;e/Sortie (E/S)

L'##**Entr&eacute;e**## est de la r&eacute;ception de l'information.  Lorsque vous demandez une ##**Entr&eacute;e**## sur quelque chose, quelqu'un ou quelque chose vous est donn&eacute;.  Vous obtenez une ##**Sortie**## de leur part.  (DEMANDER QUELQUE CHOSE, R&eacute;cup&eacute;rer quelque chose)

La ##**Sortie**## est l'envoi d'informations.  Quand vous effectuez une ##**Sortie**## vers quelqu'un, vous &ecirc;tes celui qui lui donne une ##**Entr&eacute;e**##.  (DONNER QUELQUE CHOSE, Envoyer quelque chose)

Input (Entr&eacute;e) et Output (Sortie) sont souvent rassembl&eacute;s et abr&eacute;g&eacute;s I/O (E/S) ou IO (ES).


FreeBASIC poss&egrave;de de NOMBREUSES m&eacute;thodes d'##**Entr&eacute;e**## et de ##**Sortie**##.  Pour un d&eacute;butant, la plupart d'entre elles pourraient finir par vous d&eacute;router, car elles n&eacute;cessitent g&eacute;n&eacute;ralement une meilleure connaissance des variables et de formes plus complexes de la programmation.  Nous allons &eacute;tudier les bases m&ecirc;me des E/S.

Vous vous souvenez de la commande PRINT dans les exemples ci-dessus?  C'est une ##**Sortie**##.  PRINT effectue une ##**Sortie**## vers l'&eacute;cran de l'ordinateur.  PRINT est une forme tr&egrave;s basique de ##**Sortie**## et elle est &eacute;galement facile &agrave; &eacute;tudier!  Il vous suffit d'appeler la commande PRINT, puis lui dire ce que vous voulez afficher.  Si vous voulez PRINT des mots, vous les donnez entre des guillemets doubles.  Si vous souhaitez afficher une variable, il suffit de donner &agrave; PRINT le nom de la variable que vous d&eacute;sirez afficher.

Print [CeQuiEst&agrave;Afficher]
Exemple:

%%(freebasic)
'' Affiche le mot HI! &agrave; l'&eacute;cran
Print "HI!"

'' Cr&eacute;e un nouvel entier et le nomme foo.  Lui donne la valeur de 10.
Dim as Integer foo = 10

'' Affiche la valeur de foo.
Print foo
sleep
%%

INPUT n'est pas beaucoup plus compliqu&eacute;.  Cependant, chaque fois que vous utilisez INPUT, vous devez r&eacute;cup&eacute;rer ce que vous avez obtenu d'INPUT et le mettre dans quelque chose.  Exactement comme pour une sortie, nous devons donner quelque chose &agrave; la commande PRINT pour qu'elle le sorte.  Nous connaissez d&eacute;j&agrave; des variables, n'est-ce pas?  Nous allons utiliser nos des variables pour stocker les informations entr&eacute;es par l'utilisateur.

1) Nous avons besoin d'une variable pour stocker ces informations dedans.
2) Nous avons besoin d'appeler une commande pour obtenir une entr&eacute;e.
3) Nous avons besoin d'imprimer l'entr&eacute;e pour s'assurer que nous avons stock&eacute; correctement l'information.

Je sais comment faire 1 et 3, mais que faire pour le 2?  Nous allons apprendre une nouvelle commande pour cela.  Pouvez-vous deviner son nom?  INPUT!  Ouaip ^^;; Pour obtenir INPUT (ENTREE), nous allons utiliser la commande, INPUT.

La syntaxe d'INPUT est la suivante:  INPUT [VariableAEntrer]

You can also use input like so:  INPUT [Cha&icirc;ne &agrave; Afficher Pour Demander &agrave; l'Utilisateur ce qu'il doit Entrer,] [VariableAEntrer]

La premi&egrave;re version d'INPUT  vous permettra de recueillir l'ENTREE et la placera dans la variable.  La seconde version OUTPUT (AFFICHE) votre message &agrave; l'&eacute;cran avant de demander pour l'ENTREE.  De cette fa&ccedil;on, l'utilisateur saura ce qu'il doit entrer!  En variante, vous pouvez simplement utiliser la commande PRINT avant qu'INPUT envoie un message, mais parfois pouvoir mettre le code relatif sur une seule ligne est plus commode.

Exemple:

%%(freebasic)
'' Cr&eacute;e une cha&icirc;ne.  Nous chargerons le nom utilisateur dans une cha&icirc;ne!
Dim as STRING MyName

'' Obtient le nom utilisateur!
'' The message Please Enter Your Name is posted on the screen,
'' and then the user has a chance to enter in their name!
Input "SVP, entrez votre nom!", MyName

'' Affiche nom utilisateur obtenu &agrave; l'instant.
'' Comme input, nous pouvons afficher plusieurs messages ou
'' ex&eacute;cuter different types de commandes en les s&eacute;parant par des virgules.
Print "Votre Nom est: ", MyName

'' met le programme en pause jusqu'&agrave; un appui sur une touche
sleep
%%

Cela illustre INPUT et OUTPUT!  Les deux sont essentiels dans la programmation, ou au moins la programmation graphique.  OUTPUT peut faire beaucoup de choses diff&eacute;rentes, ainsi que INPUT.  Vous pourriez obtenir entr&eacute;e de capteurs d'un bras robotique plut&ocirc;t que par le clavier de l'utilisateur.  Vous avez peut-&ecirc;tre la sortie sur une perceuse &eacute;lectrique plut&ocirc;t que  sur un moniteur.  Cela d&eacute;pend r&eacute;ellement du mat&eacute;riel et le but de votre programme.

A ce moment-l&agrave;, et dans la plupart des cas, vous n'avez pas &agrave; trop &agrave; vous inqui&eacute;ter d'o&ugrave; vient l'entr&eacute;e ou o&ugrave; elle va relativement &agrave; vos fonctions standard d'E/S.  Des m&eacute;thodes plus avanc&eacute;es d'E / S vous permettent de d&eacute;cider d'o&ugrave; elle vient (de quelle entr&eacute;e) et o&ugrave; elle va (o&ugrave; envoyer la sortie).

<div class="fb_header">D&eacute;finitions de programmation

Argument:  Voir param&egrave;tre

ASM:  Le code de niveau le plus bas que l'homme peut lire.  Il peut &ecirc;tre compil&eacute; directement en code machine.

Compilation:  Le processus de transformation du texte d'un langage &agrave; l'autre.  Ex:  BASIC en FreeBASIC compil&eacute; en ASM.  Cet ASM compil&eacute; en code machine.

Code Machine:  Des 0 et des 1.  C'est *le* code que votre ordinateur comprendra.

Param&egrave;tre:  Les donn&eacute;es que vous passez &agrave; une commande que vous appelez dans la programmation.  Les param&egrave;tres pass&eacute;s permettent aux commandes de savoir COMMENT elles devront faire quelque chose ou ce qu'elles devront faire.  Pass&eacute; lea param&egrave;tre 'Rectangle' &agrave; la commade 'Draw', serait logique si cela dessinait un rectangle sur votre &eacute;cran.

Pixel:  Un 'point' sur votre moniteur.  Les moniteurs sont constitu&eacute;s de milliers de petits points qui sont &eacute;clair&eacute;s de diff&eacute;rentes couleurs.  La couleur d&eacute;pend de la valeur de la variable pixel que le moniteur re&ccedil;oit.  Croyez-le ou non, m&ecirc;me votre mat&eacute;riel utilise des variables, de nombreuses fa&ccedil;ons.

Syntaxe:  Comment les mots sont regroup&eacute;s.  Votre syntaxe dans la programmation sont des ensembles de r&egrave;gles qui vous disent quel o&ugrave; code peut &ecirc;tre plac&eacute;.  Elle veille &agrave; ce que seul le code logique soit autoris&eacute;.  Ex:  Print "Hi".  PRINT est la COMMANDE, "Hi" est ce que la commande PRINT va utiliser.  Est-ce logique?

Variable:  Un mot qui contient des donn&eacute;es dans la programmation.  Vous attribuez des valeurs &agrave; ces mots et avec ces valeurs, vous pouvez sauvegarder les informations de votre programme.