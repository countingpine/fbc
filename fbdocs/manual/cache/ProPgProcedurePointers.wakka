{{fbdoc item="title" value="Pointers to Procedures"}}----
Pointeurs qui pointent vers des procédures

	Tout comme les pointeurs peuvent être faits pour pointer vers un type ##[[KeyPgInteger Integer]]## ou ##[[KeyPgSingle Single]]##, les pointeurs peuvent aussi pointer vers des procédures, c'est à dire qu'ils peuvent stocker l'adresse d'une procédure.

{{fbdoc item="section" value="Déclaration"}}
	Pour déclarer un pointeur vers une procédure, utilisez les mots-clefs ##[[KeyPgSub Sub]]## ou ##[[KeyPgFunction Function]]##, suivi de paramètres et du type de la valeur de retour:

{{fbdoc item="filename" value="examples/manual/proguide/procptrs/dimptr.bas"}}%%(freebasic)
' déclare un pointeur vers une procédure Sub qui n'a aucun argument
dim pointerToProcedure as sub
%%
	Les pointeurs de procédure stockent l'adresse de la procédure, qui est récupérée à l'aide de ##[[KeyPgOpAt Operator @]]## (Adresse de) ou de ##[[KeyPgOpProcptr ProcPtr operator]]##:

{{fbdoc item="filename" value="examples/manual/proguide/procptrs/pfunc.bi"}}%%(freebasic)
function Add (a as integer, b as integer) as integer
	return a + b
end function

dim pFunc as function (as integer, as integer) as integer = @Add
%%

{{fbdoc item="section" value="Appel d'un pointeur de procédure"}}
	La chose intéressante à propos des pointeurs procédure est qu'ils peuvent être appelés tout comme une procédure:

{{fbdoc item="filename" value="examples/manual/proguide/procptrs/calling.bas"}}%%(freebasic)
'' .. Add et pFunc comme avant ..
#include once "pfunc.bi"

print "3 + 4 = " & pFunc(3, 4)
%%

{{fbdoc item="section" value="Passage de pointeur de procédure à d'autres procédures"}}
	Passage de pointeurs de procédure à d'autres procédures est similaires à:

{{fbdoc item="filename" value="examples/manual/proguide/procptrs/passing.bas"}}%%(freebasic)
'' .. Add et pFunc comme avant ..
#include once "pfunc.bi"

function DoOperation (a as integer, b as integer, operation as function (as integer, as integer) as integer) as integer
	return operation(a, b)
end function

print "3 + 4 = " & DoOperation(3, 4, @Add)
%%
	Parce que les déclarations de pointeur de procédure peuvent être longues, il est souvent utile de créer un alias de type pour le pointeur de procédure, dans un effort de clarification du code:

{{fbdoc item="filename" value="examples/manual/proguide/procptrs/alias.bas"}}%%(freebasic)
'' .. Add et pFunc comme avant ..
#include once "pfunc.bi"

type operation as function (as integer, as integer) as integer

function DoOperation (a as integer, b as integer, op as operation) as integer
	return op(a, b)
end function

print "3 + 4 = " & DoOperation(3, 4, @Add)
%%

{{fbdoc item="section" value="Pointeurs de pointeurs de procédure"}}
	Parce que la syntaxe d'un pointeur de procédure ne permet pas de déclaration d'un pointeur vers un pointeur de procédure, un alias de type est utilisé. Notez comment il est nécessaire d'entourer un pointeur déréférencé vers un pointeur de procédure par des parenthèses lors de l'appel de la procédure. C'est parce que l'opérateur d'appel de fonction "()" a une priorité supérieure à ##[[KeyPgOpValueOf Operator *]]## (Valeur de):

{{fbdoc item="filename" value="examples/manual/proguide/procptrs/procptrs.bas"}}%%(freebasic)
sub Halve (byref i as integer)
	i /= 2
end sub

sub Triple (byref i as integer)
	i *= 3
end sub

type operation as sub (byref as integer)

' an array of procedure pointers, NULL indicates the
' end of the array
dim operations(20) as operation = _
{ @Halve, @Triple, 0 }

dim i as integer = 280

' apply all of the operations to a variable by iterating through the array
' with a pointer to procedure pointer
dim op as operation ptr = @operations(0)
while (0 <> *op)
	' call the procedure that is pointed to, note the extra parenthesis
	(*op)(i)
	op += 1
wend

print "Value of 'i' after all operations performed: " & i
%%

{{fbdoc item="see"}}
	- ##[[KeyPgSub Sub]]##
	- ##[[KeyPgFunction Function]]##
	- ##[[KeyPgPointer Pointer]]##
	- ##[[KeyPgOpAt Opérateur * (Adresse de)]]##
	- ##[[KeyPgOpProcptr ProcPtr operator]]##

{{fbdoc item="back" value="CatPgProgrammer|Programmer's Guide"}}
   

   
