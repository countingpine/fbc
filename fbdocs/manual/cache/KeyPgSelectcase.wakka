{{fbdoc item="title" value="SELECT CASE"}}----
Bloc d'instructions conditionnelles

{{fbdoc item="syntax"}}##
	**Select Case** //expression//
	[ **Case** //expressionlist//] 
		[//statements//]
	[ **Case Else** ]
		[//statements//]
	**End Select**
//ou//
	**Select Case** As Const //integer_expression//
	[ **Case** //constant// | //enumeration// ]
		[ //statements// ]
	[ **Case Else** ]
		[ //statements// ]
	**End Select**
##
{{fbdoc item="desc"}}

	##**Select Case**## exécute le code spécifique en fonction de la valeur d'une expression. L'expression est évaluée une fois et comparée ensuite à chaque ##**Case**##, dans l'ordre, jusqu'à ce qu'une expression qui correspond soit trouvée. Le code à l'intérieur de la branche ##**Case**## correspondant est exécuté et le programme saute vers le bas à la fin du bloc ##**Select Case**##. ##**Case Else**## sera choisi si aucune autre ##**Case**## ne correspond, donc si il y a un ##**Case Else**##, au moins un ##**Case**## est assuré d'être exécuté. Si aucun ##**Case**## ne correspond, le bloc ##**Select Case**## entier sera sauté.
	
	##**End Select**## est utilisé pour terminer le bloc ##**Select Case...End Select**##.

	Note pour les utilisateurs du langage C: En ""FreeBASIC"", ##**Select Case**## fonctionne comme un bloc ##switch## où tous les ##**Case**## ont un ##break## à la fin. Comme il n'y a pas d'échec, des options multiples doivent être placées dans une liste d'expressions dans un unique ##**Case**##.

	Outre les types entiers, des expressions en virgule flottante et chaîne sont également prises en charge avec la première syntaxe.  

	Syntaxe d'une liste d'expressions:
	##{ //expression// | //expression// **To** //expression// | **Is** //relational operator// //expression// }[, ...]##

	- ##//expr//##: évalue ##//expr//## et la compare pour voir si elle est égale à l'expression d'origine.  Si elles sont égales, alors une correspondance a été trouvée.  Cela pourrait être considéré comme un raccourci pour "##**Is** = //expr//##" (voir plus loin).
	- ##//expr1// **To** //expr2//##: évalue ##//expr1//## et détermine si elle est inférieure ou égale à l'expression originale.  Si c'est le cas, elle évalue ##//expr2//## et détermine si elle est supérieure ou égale à l'expression originale.  Si c'est le cas, alors une correspondance a été trouvée.
	- ##**Is** //relational_operator// //expr//##: évalue ##//expr//## et compare l'opération d'origine sur elle, en utilisant le ##//relational_operator//## (##=##, ##>##, ##<##, ##<>##, ##<=##, ##>=##).  Si la comparaison est vraie, alors une correspondance a été trouvée.

	Des vérifications multiples peuvent être faites dans chaque ##**Case**##, en les séparant par une virgule (##,##).  Une fois qu'une correspondance est trouvée, le programme termine ses contrôles et continue d'exécuter les instructions de code pour ce bloc ##**Case**##.  Aucune autre expression n'est évaluée ou vérifiée.

	Exemples de listes d'expressions:
	{{table columns="2" cellpadding="1" cells="Case 1 ;constante;Case 5.4 To 10.1;plage: de ... à ...;Case Is &gt 3;plus grand que - plus petit que;Case 1, 3, 5, 7 to 9;correspondance dans un ensemble de valeurs;Case x ;valeur d'une variable"}}

	Si ##**As Const**## est utilisé, seules des constantes ##[[KeyPgInteger Integer]]## peuvent être évaluées et la liste expressions ne prend en charge que les constantes et les énumérations. Les plages "##**To**##" sont prises en charge, mais les opérateurs relationnels "##**Is**##" ne le sont pas.

	Avec ##**As Const**##, une table de sauts est créée pour contenir l'ensemble des entiers ##**Case**## traîtés.  Cela rend ##**Select Case As Const**## plus rapide que ##**Select Case**##.  Toutefois, la taille de la plage de valeurs est limitée, et la plus grande valeur dans la gamme ne peut être plus élevée que la plus petite valeur + 4096.

{{fbdoc item="ex"}}
{{fbdoc item="filename" value="examples/manual/control/select.bas"}}%%(freebasic)
dim choice as integer

input "Choose a number between 1 and 10: "; choice

select case as const choice
case 1
	print "number is 1"
case 2
	print "number is 2"
case 3, 4
	print "number is 3 or 4"
case 5 to 10
	print "number is in the range of 5 to 10"
case else
	print "number is outside the 1-10 range"
end select
%%

{{fbdoc item="diff"}}
	- ##**Select Case As Const**## n'existait pas dans QB
	- Dans le cas "##//expr1// TO //expr2//##", QB voulait toujours évaluer les deux expressions, même si ##//expr1//## était supérieure à l'exression d'origine.

{{fbdoc item="see"}}
	- ##[[KeyPgIfthen If...Then]]##

{{fbdoc item="back" value="CatPgControlFlow|Control Flow"}}

