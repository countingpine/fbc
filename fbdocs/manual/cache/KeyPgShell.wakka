{{fbdoc item="title" value="SHELL"}}----
Envoie une commande à l'interpréteur de commandes du système

{{fbdoc item="syntax"}}##
	[[KeyPgDeclare declare]] [[KeyPgFunction function]] **Shell** ( [[KeyPgByref byref]] //command// [[KeyPgAs as]] [[KeyPgConstQualifier const]] [[KeyPgString string]] ) [[KeyPgAs as]] [[KeyPgInteger integer]]
##
{{fbdoc item="usage"}}##
	//result// = **Shell**( //command// )
##
{{fbdoc item="param"}}
	##//command//##
		Une chaîne spécifiant la commande à envoyer à l'interpréteur de commandes.

{{fbdoc item="ret"}}
	Si ##//command// = ""##, ou encore la commande n'a pas pu être exécutée, -1 est renvoyé. Sinon, la commande est exécutée et son code de sortie est renvoyé.

{{fbdoc item="desc"}}
	L'exécution du programme sera suspendu jusqu'à ce que l'interpréteur de commandes s'arrête.

{{fbdoc item="ex"}}
{{fbdoc item="filename" value="examples/manual/system/shell.bas"}}%%(freebasic)
'e.g. for windows:
shell "dir c:*.*"

'e.g. for linux:
shell "ls"
%%

{{fbdoc item="target"}}
	- Linux nécessite que la casse de ##//command//## corresponde au nom réel de la commande. Windows et DOS ne sont pas sensibles à la casse. Le programme exécuté dans le "shell" peut être sensible à la casse pour ses paramètres de ligne de commande.
	- Les séparateurs de chemin de Linux sont des barres obliques ##/##. Windows utilise des barres obliques vers l'arrière ##\## mais il admet des barres obliques .  DOS utilise des barres obliques en arrière ##\##. 


{{fbdoc item="diff"}} 
	- QB permet SHELL de sa propre initiative, sans un argument "commande" qui démarre une commande "shell", par défaut.  L'exécution dans le programme principal sera suspendue jusqu'à la sortie de l'interpréteur de commandes.

{{fbdoc item="see"}}
	- ##[[KeyPgExec Exec]]##
	- ##[[KeyPgRun Run]]##

{{fbdoc item="back" value="CatPgOpsys|Operating System Functions"}}