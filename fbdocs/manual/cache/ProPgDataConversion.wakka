{{fbdoc item="title" value="Promotion et Conversion"}}----
Promotion de types de données numériques dans des expressions.

Lorsque deux types de données différents sont utilisés dans une opération binaire, comme ##//+//## (Addition) ou ##//=//## (Affectation), le type de données le plus faible est automatiquement promu vers le type de données le plus fort quel que soit l'ordre dans lequel arguments sont donnés.  

Les promotions sont comme suit:
	- si les deux arguments sont de type byte, ubyte, short, ushort ou integer: plus petit argument (en type de taille) est promu pour avoir la même taille (en type de taille) que le plus grand argument (en type de taille).
	- si un des arguments est de type longint ou ulongint, et l'autre argument est d'un type entier (integer), plus petit argument (en type de taille) est promu pour avoir la même taille (en type de taille) que le plus grand argument (en type de taille).
	- si un des arguments est de type single ou double, les deux arguments sont convertis et/ou promus vers double

Tous les types entiers non signés sont manipulés comme des types entiers signés aux fins de promotion et bit le plus significatif est étendu (extension de signe).

==Conversion de types de données numériques==

Une conversion de type se produit implicitement lorsqu'une expression ou une variable est affectée, passée comme paramètre d'une procédure ou returnée comme résultat d'une procédure. Les conversions peuvent aussi être explicites lorsque vous utilisez CAST ou l'une des fonctions intégrées de conversion.

__Integer (entier) vers Integer (entier), n'importe quelle combinaison de nombres signés et non-signés__
	- Tout type d'entier vers un type d'entier plus faible: les bits les moins significatifs sont conservés
	- Tout type d'entier vers un type d'entier plus fort: extension de signe pour remplir bits les plus significatifs

__Integer vers Single ou Double__
	- Perte possible de précision

__Double vers Single__
	- Perte possible de précision
	- Si la valeur du Double dépasse le champ d'un Single le résultat est +/- INF

__Double ou Single vers Integer__
	- Perte possible de précision
	- Si la valeur du nombre à virgule flottante dépasse la plage du type de la cible les résultats sont indéfinis. Pas d'erreur d'exécution d'affichée.

{{fbdoc item="see"}}
	- [[CatPgStdDataTypes Types de données standard]]
	- [[TblVarTypes Types de variables]]
	- [[CatPgCasting Conversion entre types de données]]

{{fbdoc item="back" value="CatPgProgrammer|Programmer's Guide"}}

