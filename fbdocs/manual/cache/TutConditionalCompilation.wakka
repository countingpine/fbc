{{fbdoc item="title" value="Conditional Compilation And You"}}----

//Ecrit par aetherFox pour [[http://petesqbsite.com/sections/express/issue9/index.html#compilation">QB Express Issue #9]]//

La compilation conditionnelle est une de ces parties de la programmation qui sont oubli&eacute;es dans les coins poussi&eacute;reux des banques de connaissances des programmeurs du monde fini, mais c'est encore l'un des ajouts les plus ing&eacute;nieux pour n'importe quelle langage. Habituellement r&eacute;serv&eacute;e aux programmeurs C, avec la puissance du nouveau pr&eacute;processeur FreeBASIC, vous pouvez maintenant utiliser la compilation conditionnelle pour am&eacute;liorer votre programme.

Le pr&eacute;processeur permet de la flexibilit&eacute; en changeant la fa&ccedil;on dont le code est g&eacute;n&eacute;r&eacute; par l'utilisation de la compilation conditionnelle. Prenez ce sc&eacute;nario: vous d&eacute;bogguez du code dans votre programme et vous voulez ajouter du code suppl&eacute;mentaire pour afficher quelques variables, mais celles-ci seront supprim&eacute;es dans la version finale. Le code ressemblerait &agrave; ceci:

##%%(freebasic)
	#define DEBUG
	
	#ifdef DEBUG
		Print "Debug Value"
	#endif 'DEBUG
%%

##

**Notez** que le commentaire apr&egrave;s ##[[KeyPgEndif #endif]]## n'est pas obligatoire, mais c'est une bonne habitude.

Fondamentalement, le code ci-dessus v&eacute;rifie si ##DEBUG## a &eacute;t&eacute; d&eacute;fini, et si c'est le cas, alors le code entre les ##[[KeyPgPpifdef #ifdef]]...[[KeyPgPpendif #endif]]## sera ex&eacute;cut&eacute;. M&ecirc;me si cela peut sembler idiot, les utilisations de ceci sont &eacute;tonnantes. Si vous enlevez simplement une ligne en haut de votre programme (##[[KeyPgPpdefine #define]] DEBUG##), alors tout le code de d&eacute;boggage que vous avez ajout&eacute; ne sera pas envoy&eacute; au compilateur -- le pr&eacute;processeur le supprimera --, r&eacute;duisant ainsi l'expansion exag&eacute;r&eacute;e de l'ex&eacute;cutable final.
	##%%(freebasic)
	'Turn on debugging
	
	#define DEBUG
	'Turn off debugging 
#undef DEBUG

%%

##
	La directive ##[[KeyPgPpundef #undef]]## est une fa&ccedil;on de "d&eacute;-d&eacute;finir" quelque chose, dans ce cas, DEBUG. Alors qu'elle est strictement inutile (il suffit de commenter la ligne ##[[KeyPgPpdefine #define]] DEBUG##), elle rend le code plus clair, et a d'autres usages:
		##%%(freebasic)
	#ifndef DEBUG
Print "Production Version"

#endif 'DEBUG

%%

##
	Bien que n'&eacute;tant pas l'exemple le plus utile, ceci d&eacute;montre l'utilisation d'une autre directive: ##[[KeyPgPpifndef #ifndef]]##. Cette directive va provoquer la compilation du code si le symbole n'est pas d&eacute;fini.
		Tout comme dans un langage de programmation normale, le sens du conditionnel peut &ecirc;tre invers&eacute; en utilisant une variante de "else", ##[[KeyPgElse #else]]##:
	##%%(freebasic)
		#ifdef DEBUG
	Print "Test Version"
#else

Print "Production Version"

#endif 'DEBUG 
	%%
	
	##
		Bien s&ucirc;r, il existe de nombreuses applications &agrave; cela. Qui a dit que vous avez besoin pour ce faire sur le code de d&eacute;bogage uniquement? Vous pouvez effectivement v&eacute;rifier l'effet d'un nouveau morceau de code ou de quelques routines de test en d&eacute;finissant simplement un nom comme ##TESTCODE## et l'utilisation des directives du pr&eacute;processeur pour inclure votre code pour la compilation conditionnelle:
		##%%(freebasic)
	#define TESTCODE
#ifdef TESTCODE

BulletRoutine()

TestFireRoutine()
#endif 
%%