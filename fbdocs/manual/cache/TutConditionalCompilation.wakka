{{fbdoc item="title" value="La compilation conditionnelle et vous"}}----

//Ecrit par aetherFox pour [[http://petesqbsite.com/sections/express/issue9/index.html#compilation QB Express Issue #9]]//

La compilation conditionnelle est une de ces parties de la programmation qui sont oubliées dans les coins poussiéreux des banques de connaissances des programmeurs du monde fini, mais c'est encore l'un des ajouts les plus ingénieux pour n'importe quelle langage. Habituellement réservée aux programmeurs C, avec la puissance du nouveau préprocesseur FreeBASIC, vous pouvez maintenant utiliser la compilation conditionnelle pour améliorer votre programme. 

Le préprocesseur permet de la flexibilité en changeant la façon dont le code est généré par l'utilisation de la compilation conditionnelle. Prenez ce scénario: vous débogguez du code dans votre programme et vous voulez ajouter du code supplémentaire pour afficher quelques variables, mais celles-ci seront supprimées dans la version finale. Le code ressemblerait à ceci: 

##%%(freebasic)
	#define DEBUG
	
	#ifdef DEBUG
		Print "Debug Value"
	#endif 'DEBUG
%%##

**Notez** que le commentaire après ##[[KeyPgEndif #endif]]## n'est pas obligatoire, mais c'est une bonne habitude.

Fondamentalement, le code ci-dessus vérifie si ##DEBUG## a été défini, et si c'est le cas, alors le code entre les ##[[KeyPgPpifdef #ifdef]]...[[KeyPgPpendif #endif]]## sera exécuté. Même si cela peut sembler idiot, les utilisations de ceci sont étonnantes. Si vous enlevez simplement une ligne en haut de votre programme (##[[KeyPgPpdefine #define]] DEBUG##), alors tout le code de déboggage que vous avez ajouté ne sera pas envoyé au compilateur -- le préprocesseur le supprimera --, réduisant ainsi l'expansion exagérée de l'exécutable final.

##%%(freebasic)
	'Turn on debugging
	#define DEBUG
	
	'Turn off debugging 
	#undef DEBUG
%%##

La directive ##[[KeyPgPpundef #undef]]## est une façon de "dé-définir" quelque chose, dans ce cas, DEBUG. Alors qu'elle est strictement inutile (il suffit de commenter la ligne ##[[KeyPgPpdefine #define]] DEBUG##), elle rend le code plus clair, et a d'autres usages:

##%%(freebasic)
	#ifndef DEBUG
		Print "Production Version"
	#endif 'DEBUG
%%##

Bien que n'étant pas l'exemple le plus utile, ceci démontre l'utilisation d'une autre directive: ##[[KeyPgPpifndef #ifndef]]##. Cette directive va provoquer la compilation du code si le symbole n'est pas défini. 

Tout comme dans un langage de programmation normale, le sens du conditionnel peut être inversé en utilisant une variante de "else", ##[[KeyPgElse #else]]##:

##%%(freebasic)
	#ifdef DEBUG
		Print "Test Version"
	#else
		Print "Production Version"
	#endif 'DEBUG 
%%##

Bien sûr, il existe de nombreuses applications à cela. Qui a dit que vous avez besoin pour ce faire sur le code de débogage uniquement? Vous pouvez effectivement vérifier l'effet d'un nouveau morceau de code ou de quelques routines de test en définissant simplement un nom comme ##TESTCODE## et l'utilisation des directives du préprocesseur pour inclure votre code pour la compilation conditionnelle:

##%%(freebasic)
	#define TESTCODE
	
	#ifdef TESTCODE
		BulletRoutine()
		TestFireRoutine()
	#endif 
%%##

La portée de ce tutoriel est limitée, mais cette méthode est utilisée par les professionnels. Elle rend la vie plus facile lors de la programmation. J'ai utilisé cette méthode dans mon propre code. Pour voir ce code en action, afficher la source [[http://avinash.apeshell.net/stuff/ship/flyaround.bas ici]].

Avinash 'aetherFox' Vora 
**avinashvora** [at] **gmail** [dot] **com**.
http://avinash.apeshell.net

