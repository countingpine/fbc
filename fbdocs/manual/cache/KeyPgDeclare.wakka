{{fbdoc item="title" value="DECLARE"}}----
Déclare une procédure au niveau module ou un membre de procédure

{{fbdoc item="syntax"}}##
	**Declare** [[KeyPgSub Sub]] //name// [ //param_list// ] [ [[KeyPgModuleConstructor Constructor]] | [[KeyPgModuleDestructor Destructor]] ]
	**Declare** [[KeyPgFunction Function]] //name// [ //param_list// ] [[KeyPgAs As]] //return_type//
	**Declare** [[KeyPgOperator Operator]] //op_symbol// //param_list// [ [[KeyPgAs As]] //return_type// ]
	
	Type //T//
		**Declare** [[KeyPgConstructor Constructor]] [ //param_list// ]
		**Declare** [[KeyPgDestructor Destructor]]
		**Declare** [[KeyPgSub Sub]] //name// [ //param_list// ]
		**Declare** [[KeyPgFunction Function]] //name// [ //param_list// ] [[KeyPgAs As]] //return_type//
		**Declare** [[KeyPgOperator Operator]] //name// [ //param_list// ] [ [[KeyPgAs As]] //return_type// ]
		**Declare** [[KeyPgProperty Property]] //name// [ ( [ //param_list// ] ) ] [ [[KeyPgAs As]] //return_type// ]
	End Type
##
{{fbdoc item="param"}}
	##//param_list//##
		Liste entre parenthèses de paramètres séparés par des virgules.
	##//return_type//##
		Le type de retour d'une procédure ##[[KeyPgFunction Function]]##, ##[[KeyPgOperator Operator]]##, ou ##[[KeyPgProperty Property]]##.
	##//name//##
		Le nom ou le symbole de la routine.
	##//op_symbol//##
		Le nom ou le symbole d'un opérateur.
	##//T//##
		Le nom d'un nouveau type défini par l'utilisateur.

{{fbdoc item="desc"}}
	L'instruction ##**Declare**## déclare un(e) ##[[KeyPgSub Sub]]##, ##[[KeyPgFunction Function]]##, ##[[KeyPgOperator Operator]]##, ##[[KeyPgConstructor Constructor]]##, ou ##[[KeyPgDestructor Destructor]]##. Nous ferons référence à l'un d'entre eux comme une routine. 
	La routine peut être mentionnée dans le code sans voir sa définition, cependant elle doit être définie quelque part. Essentiellement, l'instruction ##**Declare**## introduit une routine, et déclare que sa définition est ailleurs. Par exemple, une fonction peut être déclarée en haut d'un module source, appelée, puis définie à la fin du fichier source, comme le montre l'exemple ci-dessous.

	Une déclaration de routine est presque identique à la première ligne de sa définition, sauf que la déclaration est précédée par le mot-clé ##**Declare**## et n'a pas de corps. De plus, des attributs tels que ##[[KeyPgExport Export]]## sont laissés hors de la déclaration.

	""FreeBASIC"", comme QB, n'exige pas la déclaration des fonctions à moins qu'elles soient définies dans un fichier source différent ou dans le même fichier après le point où elles sont appelées. Ce n'est pas vrai pour les routines déclarées à l'intérieur d'un corps de ##[[KeyPgType Type]]##, qui doivent **toujours** être déclarées en premier dans le corps du [[KeyPgType Type]] avant de les utiliser. Si vous ne déclarez pas les routines ##[[KeyPgType Type]]## vous recevrez un message d'erreur.

	 Comme chaque fichier utilisant une fonction doit avoir sa déclaration, les déclarations sont habituellement groupée dans un ou plusieurs //fichiers include// pour permettre l'utilisation de la fonction par un module quelconque qui en a besoin en utilisant l'instruction ##[[KeyPgInclude #include]]##. 

{{fbdoc item="ex"}}
Fonction niveau module:
{{fbdoc item="filename" value="examples/manual/procs/declare.bas"}}%%(freebasic)
'' declare the function sum which takes two integers and returns an integer
declare function sum( as integer, as integer ) as integer

   print "the sum of 420 and 69 is: " & sum( 420, 69 )    '' call the function sum

'' define the function sum which takes two integers and returns an integer
function sum( a as integer, b as integer ) as integer
   return a + b
end function
%%

Niveau type Sub:
{{fbdoc item="filename" value="examples/manual/procs/declare2.bas"}}%%(freebasic)
type my_type
	my_data as integer
	declare sub increment_data( )
end type

sub my_type.increment_data( )
	my_data += 1
end sub

dim as my_type an_instance

an_instance.my_data = 68

an_instance.increment_data( )

Print an_instance.my_data
%%
{{fbdoc item="lang"}}
	- Dans le dialecte //[[CompilerOptlang -lang fb]]//, ##**ByVal**## est la convention par défaut de passage de paramètre.
	- Dans les dialectes //[[CompilerOptlang -lang qb]]// et //[[CompilerOptlang -lang deprecated]]//, ##**ByRef**## est la convention par défaut de passage de paramètre.
	- Niveaux type ##[[KeyPgSub Sub]]##/##[[KeyPgFunction Function]]##/##[[KeyPgOperator Operator]]##/##[[KeyPgConstructor Constructor]]##/##[[KeyPgDestructor Destructor]]## ne sont permis qu'en //[[CompilerOptlang -lang fb]]//

{{fbdoc item="diff"}}
	- Dans ""FreeBASIC"", les noms de paramètres sont facultatifs.

{{fbdoc item="see"}}
	- ##[[KeyPgSub Sub]]##
	- ##[[KeyPgFunction Function]]##
	- ##[[KeyPgOperator Operator]]##
	- ##[[KeyPgProperty Property]]##
	- ##[[KeyPgConstructor Constructor]]##
	- ##[[KeyPgDestructor Destructor]]##
	- ##[[KeyPgModuleConstructor Constructor (module)]]##
	- ##[[KeyPgModuleDestructor Destructor (module)]]##
	- ##[[KeyPgType Type]]##
	- ##[[KeyPgDim Dim]]##
	- ##[[KeyPgAlias Alias]]##

{{fbdoc item="back" value="CatPgProcedures|Procedures"}}
   
   

