{{fbdoc item="title" value="DECLARE"}}----
D&eacute;clare une proc&eacute;dure au niveau module ou un membre de proc&eacute;dure

{{fbdoc item="syntax"}}##
	**Declare** [[KeyPgSub Sub]] //name// [ //param_list// ] [ [[KeyPgModuleConstructor Constructor]] | [[KeyPgModuleDestructor Destructor]] ]
	**Declare** [[KeyPgFunction Function]] //name// [ //param_list// ] [[KeyPgAs As]] //return_type//
	**Declare** [[KeyPgOperator Operator]] //op_symbol// //param_list// [ [[KeyPgAs As]] //return_type// ]
	
	Type //T//
		**Declare** [[KeyPgConstructor Constructor]] [ //param_list// ]
		**Declare** [[KeyPgDestructor Destructor]]
		**Declare** [[KeyPgSub Sub]] //name// [ //param_list// ]
		**Declare** [[KeyPgFunction Function]] //name// [ //param_list// ] [[KeyPgAs As]] //return_type//
		**Declare** [[KeyPgOperator Operator]] //name// [ //param_list// ] [ [[KeyPgAs As]] //return_type// ]
		**Declare** [[KeyPgProperty Property]] //name// [ ( [ //param_list// ] ) ] [ [[KeyPgAs As]] //return_type// ]
	End Type
##
{{fbdoc item="param"}}
	##//param_list//##
		Liste entre parenth&egrave;ses de param&egrave;tres s&eacute;par&eacute;s par des virgules.
	##//return_type//##
		Le type de retour d'une proc&eacute;dure ##[[KeyPgFunction Function]]##, ##[[KeyPgOperator Operator]]##, ou ##[[KeyPgProperty Property]]##.
	##//name//##
		Le nom ou le symbole de la routine.
	##//op_symbol//##
		Le nom ou le symbole d'un op&eacute;rateur.
	##//T//##
		Le nom d'un nouveau type d&eacute;fini par l'utilisateur.

{{fbdoc item="desc"}}
	L'instruction ##**Declare**## d&eacute;clare un(e) ##[[KeyPgSub Sub]]##, ##[[KeyPgFunction Function]]##, ##[[KeyPgOperator Operator]]##, ##[[KeyPgConstructor Constructor]]##, ou ##[[KeyPgDestructor Destructor]]##. Nous ferons r&eacute;f&eacute;rence &agrave; l'un d'entre eux comme une routine.
	La routine peut &ecirc;tre mentionn&eacute;e dans le code sans voir sa d&eacute;finition, cependant elle doit &ecirc;tre d&eacute;finie quelque part. Essentiellement, l'instruction ##**Declare**## introduit une routine, et d&eacute;clare que sa d&eacute;finition est ailleurs. Par exemple, une fonction peut &ecirc;tre d&eacute;clar&eacute;e en haut d'un module source, appel&eacute;e, puis d&eacute;finie &agrave; la fin du fichier source, comme le montre l'exemple ci-dessous.

	Une d&eacute;claration de routine est presque identique &agrave; la premi&egrave;re ligne de sa d&eacute;finition, sauf que la d&eacute;claration est pr&eacute;c&eacute;d&eacute;e par le mot-cl&eacute; ##**Declare**## et n'a pas de corps. De plus, des attributs tels que [[KeyPgExport Export]] sont laiss&eacute;s hors de la d&eacute;claration.

	FreeBASIC, comme QB, n'exige pas la d&eacute;claration des fonctions &agrave; moins qu'elles soient d&eacute;finies dans un fichier source diff&eacute;rent ou dans le m&ecirc;me fichier apr&egrave;s le point o&ugrave; elles sont appel&eacute;es. Ce n'est pas vrai pour les routines d&eacute;clar&eacute;es &agrave; l'int&eacute;rieur d'un corps de [[KeyPgType Type]], qui doivent **toujours** &ecirc;tre d&eacute;clar&eacute;es en premier dans le corps du [[KeyPgType Type]] avant de les utiliser. Si vous ne d&eacute;clarez pas les routines [[KeyPgType Type]] vous recevrez un message d'erreur.

	 Comme chaque fichier utilisant une fonction doit avoir sa d&eacute;claration, les d&eacute;clarations sont habituellement group&eacute;e dans un ou plusieurs //fichiers include// pour permettre l'utilisation de la fonction par un module quelconque qui en a besoin en utilisant l'instruction ##[[KeyPgInclude #include]]##.

{{fbdoc item="ex"}}
Fonction niveau module:
{{fbdoc item="filename" value="examples/manual/procs/declare.bas"}}%%(freebasic)
'' declare the function sum which takes two integers and returns an integer
declare function sum( as integer, as integer ) as integer

   print "the sum of 420 and 69 is: " & sum( 420, 69 )    '' call the function sum

'' define the function sum which takes two integers and returns an integer
function sum( a as integer, b as integer ) as integer
   return a + b
end function
%%

Niveau type Sub:
{{fbdoc item="filename" value="examples/manual/procs/declare2.bas"}}%%(freebasic)
type my_type
	my_data as integer
	declare sub increment_data( )
end type

sub my_type.increment_data( )
	my_data += 1
end sub

dim as my_type an_instance

an_instance.my_data = 68

an_instance.increment_data( )

Print an_instance.my_data
%%
{{fbdoc item="lang"}}
	- Dans le dialecte //[[CompilerOptlang -lang fb]]//, ##**ByVal**## est la convention par d&eacute;faut de passage de param&egrave;tre.
	- Dans les dialectes //[[CompilerOptlang -lang qb]]// et //[[CompilerOptlang -lang deprecated]]//, ##**ByRef**## est la convention par d&eacute;faut de passage de param&egrave;tre.
	- Niveaux type ##[[KeyPgSub Sub]]##/##[[KeyPgFunction Function]]##/##[[KeyPgOperator Operator]]##/##[[KeyPgConstructor Constructor]]##/##[[KeyPgDestructor Destructor]]## ne sont permis qu'en //[[CompilerOptlang -lang fb]]//

{{fbdoc item="diff"}}
	- Dans FreeBASIC, les noms de param&egrave;tres sont facultatifs.

{{fbdoc item="see"}}
	- ##[[KeyPgSub Sub]]##
	- ##[[KeyPgFunction Function]]##
	- ##[[KeyPgOperator Operator]]##
	- ##[[KeyPgProperty Property]]##
	- ##[[KeyPgConstructor Constructor]]##
	- ##[[KeyPgDestructor Destructor]]##
	- ##[[KeyPgModuleConstructor Constructor (module)]]##
	- ##[[KeyPgModuleDestructor Destructor (module)]]##
	- ##[[KeyPgType Type]]##
	- ##[[KeyPgDim Dim]]##
	- ##[[KeyPgAlias Alias]]##

{{fbdoc item="back" value="CatPgProcedures|Procedures"}}
   