{{fbdoc item="title" value="Operator Mod (Modulus)"}}----
Trouve le reste d'une opération de division

{{fbdoc item="syntax"}}##
	[[KeyPgDeclare declare]] [[KeyPgOperator operator]] **Mod** ( [[KeyPgByref byref]] //lhs// [[KeyPgAs as]] [[KeyPgInteger integer]], [[KeyPgByref byref]] //rhs// [[KeyPgAs as]] [[KeyPgInteger integer]] ) [[KeyPgAs as]] [[KeyPgInteger integer]]
##
{{fbdoc item="usage"}}##
	//result// = //lhs// **Mod** //rhs//
##
{{fbdoc item="param"}}
	##//lhs//##
		Argument de gauche, le dividende.
	##//rhs//##
		Argument de droite, le diviseur.

{{fbdoc item="ret"}}
	Retourne le reste d'une opération de division.

{{fbdoc item="desc"}}
	L'**##Operator Mod## (Modulo)** divise deux nombres ##[[KeyPgInteger Integer (entier)]]## et retourne le reste. Les valeurs numériques sont converties en ##[[KeyPgInteger Integer (entier)]]## en arrondissant par excès ou par défaut.

	Dans tous les cas, aucun opérande n'est modifié.

	Cet opérateur peut être surchargé pour accepter les types définis par l'utilisateur.

{{fbdoc item="ex"}}
{{fbdoc item="filename" value="examples/manual/operator/mod.bas"}}%%(freebasic)
PRINT 47 MOD 7
PRINT 5.6 MOD 2.1
PRINT 5.1 MOD 2.8
%%
Affiche:
%%
5
0
2
%%

On obtient ces résultats parce que: 
	- 47 divisé par 7 donne le reste 5
	- 5.6 est arrondi à 6 alors que 2.1 est arrondi à 2. Cela donne le problème 6 MOD 2 ce qui signifie que 6 divisé par 2 donne le reste 0
	- 5.1 est arrondi à 5 alors que 2.8 est arrondi à 3. Cela donne le problème 5 MOD 3 ce qui signifie que 5 divisé par 3 donne le reste 2

{{fbdoc item="lang"}}
	- Dans le dialecte //[[CompilerOptlang -lang qb]]//, cet opérateur ne peut pas être surchargé.

{{fbdoc item="diff"}}
	- Aucune

{{fbdoc item="see"}}
	- [[CatPgMath Fonctions mathématiques]]

{{fbdoc item="back" value="CatPgOpArithmetic|Arithmetic Operators"}}{{fbdoc item="back" value="CatPgOperators|Operators"}}