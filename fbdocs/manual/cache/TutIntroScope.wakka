{{fbdoc item="title" value="Introduction to Variable Scope"}}----
//Ecrit par [[WikiRick rdc]]//

=== Variable Scope ===

##**Scope = portée**## fait référence à la visibilité d'une variable, où vous pouvez accéder à une variable dans un programme. Avant de pouvoir comprendre les différents niveaux de portée, vous devez comprendre la structure d'un programme en FreeBASIC.

== Structure d'un programme ==

Un programme complet est composé d'un ou plusieurs fichiers **.bas**, appelés modules. Chaque module peut contenir, à la fois, du code de niveau module et du code contenu dans les sous-routines et fonctions. Du code de niveau module est du code qui //**n'est pas**// contenu dans une sous-routine ou une fonction. L'extrait suivant illustre les différentes parties d'un module.

%%(freebasic)
Dim aInt As Integer 'Variable déclarée au niveau module

Sub DoSomething
	Dim aInt As Integer 'Variable déclarée au niveau sous-routine
	
	... 'Ce code est local à Sub
End Sub

Function DoSomethingElse() as Integer
	Dim aInt As Integer 'Variable déclarée au niveau fonction
	
	... 'Ce code est local à Function
End Function

'Code niveau module
aInt = 5
DoSomething
aInt = DoSomethingElse()
%%

== Variables locales ==

Si vous définissez une variable au niveau du module (et n'utilisez pas ##**Shared**##), la variable est dite avoir une portée au niveau du module local. Elle est visible par le code au niveau du module, mais pas des sous-routines ou fonctions au sein du module. Dans l'exemple ci-dessus la variable du module ##**aInt**## est visible uniquement pour le code de niveau module. 

Les variables définies dans une sous-routine ou une fonction sont locales à la sous-routine ou fonction et ne sont pas visibles du code de niveau module ou de toute autre sous-programme ou fonction.

== Variables définies au sein de structures de contrôle ==

Les variables qui sont définies dans des constructions ##**If**##, ##**For-Next**##, ##**While-Wend**## et ##**Do-Loop**## sont locales au code de la structure du bloc de contrôle. Autrement dit, ils ne sont pas visibles à l'extérieur des limites du début et de fin du bloc de contrôle, tout comme une variable déclarée dans une sous-routine ou une fonction. 

== Les variables partagées (Shared) ==

Dans l'exemple, si vous voulez que ##**aInt**## soit visible au sein de la sous-routine ou de la fonction, vous devez déclarer la variable comme étant ##**Shared**## et ensuite ne pas déclarer une variable avec le même nom dans des sous-routine, fonction ou bloc de contrôle. Les variables ##**Shared**## sont visibles par le code de niveau module, celui de niveau sous-routines ou fonctions et au sein des structures de contrôle.

== Les conflits de portée==

Dans l'extrait de code ci-dessus, si ##**aInt**## est déclarée ##**Shared**## et que chaque sous-routine et fonction déclare ##**aInt**##, il y aurait un conflit une portée, car il y aurait même un nom de variable utilisé pour différents niveaux de portée.

Le compilateur résout cela en prenant la portée courante en compte et planifie la variable avec cette portée. Comme les sous-routines et fonctions ont un niveau de portée inférieur à celui d'un module, ##**aInt**## fait référence soit à la variable déclarée dans la sous-routine ou la fonction, et non pas à celle qui a été déclarée au niveau d'un module, même si elle a été déclarée comme une variable partagée.

== Plusieurs modules ==

La portée est limitée à un seul module, c'est à dire un unique fichier ##**.bas**##. Cependant, il est parfois nécessaire d'étendre la portée d'un module à un autre. Vous devez utiliser la déclaration ##**Common**## lorsque vous déclarez une variable qui doit être partagée entre plusieurs modules.

Chaque d'un module doit avoir la même déclaration ##**Common**## pour que le compilateur de fasse correspondre les variables communes. Si vous déclarez une variable ##**Common aInt as Integer**## dans module1 alors le module2 doit aussi avoir ##**Common aInt as Integer**##. Sans cette déclaration commune ##**aInt**## ne serait pas visible dans le module2.

Vous pouvez ajouter l'attribut ##**Shared**## à ##**Common**##, c'est à dire ##**Common Shared**## non seulement pour étendre la portée à plusieurs modules, mais pour étendre la portée au sein d'un module. ##**Common Shared**## fonctionne comme ##**Shared**## dans un seul module. Comme avec ##**Common**##, vous avez besoin d'apparier les déclarations dans chaque module qui doit avoir accès à la variable.

=== Scope...End Scope ===

Vous pouvez créer un bloc de portée temporaire en utilisant les mots-clés ##**Scope**## et ##**End Scope**##. Le bloc de portée est très utile lors de la création de macros multi-ligne où vous pouvez avoir besoin de créer des variables de travail temporaires mais en évitant de créer des conflits de nom dans le programme. L'extrait suivant montre comment créer un bloc de portée.

%%(freebasic)
Scope
	Dim tmp as Integer
	... 'Du code
End Scope
%%

La portée d'une variable créée dans un bloc de portée est limitée au bloc lui-même. Cependant, le bloc de portée hérite de la visibilité de la portée environnante, afin que les variables créées avec la même portée que le bloc de portée soient visibles dans le bloc.

Par exemple, si vous avez ##**aInt**## qui est de portée niveau module et le bloc de portée qui est de portée niveau module, alors ##**aInt**##serait visible à l'intérieur du bloc de portée. À moins bien sûr qu'il n'y ait un conflit de portée, auquel cas la variable à l'intérieur du bloc de portée aurait préséance sur la variable avec le même nom mais en dehors du bloc portée.

=== Durée de vie d'une variable ===

La portée ne définit pas seulement la visibilité d'une variable, elle détermine également sa durée de vie. Une variable passe par plusieurs étapes dans sa vie; création, initialisation, accès et destruction. La portée d'une variable dépend du moment où cela se produit, c'est à dire, où la variable a été définie dans le programme.

== Variables de niveau module ==

Les variables au niveau du module existent pour la durée de vie d'un programme, puisqu'elles sont déclarées dans le corps principal du programme. Le code de niveau module est le code d'exécution principal du programme et se termine lorsque le programme se termine..

== Les variables de niveau sous-routine et fonction ==

Les variables déclarées dans un sous-programme ou une fonction existent aussi longtemps que le programme est dans le corps du sous-programme ou de la fonction. A l'entrée dans la ##**Sub/Function**##, la variable est créée, initialisée et est accessible dans ##**Sub/Function**##. Dès la sortie de ##**Sub/Function**##, la variable est détruite.

== Les variables statiques  ==

Une exception aux variables déclarées dans ##**Sub/Function**## c'est la variable ##**Static**##. Les variables ##Static## conservent leur valeur entre les appels à ##**Sub/Function**## et ont donc une durée de vie niveau module. 

== Les variables de blocs de contrôle ==

Les variables déclarées dans un bloc de contrôle, comme un ##**For-Next**## existent tant que le bloc de contrôle est exécuté. Au moment de quitter le bloc de contrôle, les variables soient détruites.

== Variables Scope...End Scope ==

Les variables déclarées dans un bloc ##**Scope...End Scope**## existent aussi longtemps que le bloc existe. Dès que le programme quitte le bloc toutes les variables créées dans le bloc sont détruites.