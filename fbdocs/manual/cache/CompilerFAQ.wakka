{{fbdoc item="title" value="Foire aux questions (FAQ)"}}----
{{anchor name="item0"}}

**Questions sur ""FreeBASIC"":**

	==- {{anchor name="item1|Qu'est-ce que FreeBASIC?"}}==
	==- {{anchor name="item2|Qui est responsable de FreeBASIC?"}}==
	==- {{anchor name="item3|Pourquoi devrais-je utiliser FreeBASIC plutôt que QBasic?"}}==
	==- {{anchor name="item4|Pourquoi devrais-je utiliser FreeBASIC plutôt que certains autres nouveaux BASIC?"}}==
	==- {{anchor name="item5|FreeBASIC est-il rapide?"}}==
	==- {{anchor name="item6|FreeBASIC est-il compatible avec QuickBasic?"}}==
	==- {{anchor name="item7|FreeBASIC est-il compatible avec Windows? DOS? Linux?"}}==
	==- {{anchor name="item8|La programmation orientée objet est elle supportée par FreeBASIC?"}}==
	==- {{anchor name="item9|Quels sont les plans futurs avec FB / ToDo list?"}}==
	==- {{anchor name="item10|Puis-je programmer des applications GUI avec FB"}}==
	==- {{anchor name="item11|FB est-il approprié pour des applications grosses/complexes?"}}==
	==- {{anchor name="item12|Puis-je utiliser un encodage (jeu de caractères) non-latin dans mes applications FreeBASIC?"}}==
	==- {{anchor name="item13|Puis-je utiliser les ports Serial/COM et Hardware/CPU dans FB?"}}==

{{fbdoc item="subsect" value="Questions de débutants sur ""FreeBASIC"""}}
	
	==- {{anchor name="item20|Où puis-je trouver plus d'informations sur FreeBASIC?"}}==
	==- {{anchor name="item21|Pourquoi le GUI de QB ne s'ouvre-t-il pas quand je lance FreeBASIC?"}}==
	==- {{anchor name="item22|Puis-je avoir une version hors ligne de la documentation?"}}==
	==- {{anchor name="item23|Quelle est l'idée derrière les dialectes FB?"}}==
	==- {{anchor name="item24|Pourquoi mon programme se plante-t-il quand je définis un tableau plus grand que xx?"}}==

{{fbdoc item="subsect" value="""FreeBASIC"" avancé"}}

	==- {{anchor name="item31|Comment puis-je lier à des bibliothèques C?"}}==
	==- {{anchor name="item32|Puis-je utiliser un débogueur?"}}==
	==- {{anchor name="item33|Quel est le but des fichiers AR.EXE, AS.EXE et LD.EXE fournis avec FB?"}}==
	==- {{anchor name="item34|Y a-t-il une limitation l'ampleur de mes fichiers source?"}}==
	==- {{anchor name="item35|Puis-je écrire un OS avec FreeBASIC?"}}==
	==- {{anchor name="item36|Je développe un système d'exploitation, FreeBASIC peut-il être porté sur mon OS?"}}==
	==- {{anchor name="item37|FreeBASIC permet-il le retour de références à partir de fonctions, comme en C++?"}}==

{{anchor name="item999|See also"}}

{{fbdoc item="back" value="DocToc|Table of Contents"}}

----

@@**Questions sur ""FreeBASIC""**@@

{{anchor name="item1"}}==Qu'est-ce que ""FreeBASIC""?==
	""FreeBASIC"" est un compilateur BASIC 32-bit libre et gratuit, pour Windows (32-bit), DOS 32 bits en mode protégé (exécutables COFF, comme DJGPP), et Linux (x86). Il a commencé comme une tentative de créer un code compatible, une alternative libre et gratuite à Microsoft ""QuickBASIC"", mais cela s'est rapidement transformé en un puissant outil de développement, incluant déjà le support de bibliothèques, comme Allegro, SDL, ""OpenGL"" et beaucoup d'autres dans son installation par défaut.

	En plus d'avoir une syntaxe compatible la plupart du temps avec ""QuickBASIC"", ""FreeBASIC"" introduit plusieurs nouvelles fonctionnalités à ce langage vieillissant, y compris des pointeurs vers les variables et fonctions et les types de données non signées.

	Le compilateur ""FreeBASIC"" est "auto-hébergement" - écrit en ""FreeBASIC"", les bibliothèques sont cependant écrites en C.

{{anchor name="item0|Retour en haut de la page"}}

{{anchor name="item2"}}==Qui est responsable de ""FreeBASIC""?==
	Les premières versions de FreeBASIC ont été développées exclusivement par V1ctor. Les versions ultérieures ont vu les contributions de nombreuses personnes, dont Lillo, qui a développé le portage Linux et la bibliothèque graphique, et DRV, qui a développé le portage DOS.br \ 

	Voir la page [[CompilerCredits FreeBASIC Credits]].

{{anchor name="item0|Retour en haut de la page"}}

{{anchor name="item3"}}==Pourquoi devrais-je utiliser ""FreeBASIC"" plutôt que ""QBasic""?==
	""FreeBASIC"" a des avantages innombrables par rapport à ""QBasic"", ""QuickBASIC"", PDS et Visual Basic pour DOS. 
		- Il supporte les processeurs 32-bit, alors que ""QBasic"" est conçu pour les CPU 16-bit.
		- Il supporte les OS modernes. Il est doté de portages pour Windows, Linux et DOS 32 bits.
		- Il supporte les API modernes telles que SDL, ""DirectX"", ""Win32"" et ""OpenGL"".
		- Il est distribué sous licence GPL, ce qui signifie qu'il est gratuit et légal de l'utiliser librement, contrairement à la plupart des copies de ""QuickBASIC"" et autres BASIC.
		- La bibliothèque est distribuée sous licence LGPL avec une exception supplémentaire, ce qui signifie que vous pouvez faire ce que vous voulez avec vos programmes compilés, y compris les vendre (note: problème possible avec bibliothèque graphique).
		- ""FreeBASIC"" est, la plupart du temps, beaucoup plus rapide que ""QuickBASIC"" et autres BASIC.
		- ""FreeBASIC"" supporte de nombreuses fonctionnalités, telles que les pointeurs et l'assemblage en ligne (in line), qui ne sont pas disponibles dans ""QuickBASIC"" et autres BASIC.
		- ""QuickBASIC"" ne supporte que le DOS. Le support de Windows pour l'émulation DOS (et donc ""QuickBASIC"") est de plus en plus fine avec chaque nouvelle version. Vista ne prend pas en charge les graphiques ou le texte en plein écran pour les applications DOS.

{{anchor name="item0|Retour en haut de la page"}}

{{anchor name="item4"}}==Pourquoi devrais-je utiliser ""FreeBASIC"" plutôt que certains autres nouveaux BASIC?==
	""FreeBASIC"" a de nombreux traits qui le rendent préférable à la plupart des autres implémentations du langage BASIC:
		- ""FreeBASIC"" adhère étroitement à la syntaxe BASIC standard, ce qui rend plus facile à utiliser.
		- ""FreeBASIC"" est compilé en programmes réels (exécutables), et non du "bytecode".
		- ""FreeBASIC"" a une importante communauté dédiée qui a activement participé à l'élaboration de ""FreeBASIC"".
		- ""FreeBASIC"" utilise des méthodes standard d'accès aux bibliothèques communes du langage C. SDL, par exemple, est standard C SDL, et non pas un nouvel ensemble de commandes intrinsèque
		- ""FreeBASIC"" a des portages vers Windows, Linux et DOS 32-bit. Il conserve une syntaxe cohérente entre les trois portages.

{{anchor name="item0|Retour en haut de la page"}}

{{anchor name="item5"}}==""FreeBASIC"" est-il rapide?==
	La plupart des tests effectués par la communauté ont montré que FreeBASIC est significativement plus rapide que QuickBasic, plus rapide que la plupart des autres BASIC commerciaux et souvent proche de CCG en termes de vitesse.
	[[http://shootout.alioth.debian.org/gp4/benchmark.php?test=all&lang=all Computer Languages Benchmark Game]], une équipe de test indépendante, donne ""FreeBASIC"" pour Linux une vitesse 1,8 fois plus lent que ""GNU g++"". Les tests portent sur â€‹â€‹les calculs, la mémoire et la vitesse du disque dans les programmes de la console, aucune capacité graphique n'a été testée. Ce n'est pas un mauvais résultat compte tenu que ""FreeBASIC"" n'est pas encore un compilateur optimisant.
	Un domaine où il y a une carence notable est la vitesse dans les modes console 32-bit. Bien que FreeBASIC soit constamment sur un pied d'égalité avec les autres-applications 32 bits en mode console, les opérations sur 32 bits en mode console sont nettement plus lentes que les opérations en console 16-bit, comme dans QuickBasic. Dans la version DOS, certaines opérations d'Entrée/Sortie peuvent devenir plus lentes après le portage depuis un BASIC 16-bit vers FB - l'optimisation du code récupère de la vitesse.

{{anchor name="item0|Retour en haut de la page"}}

{{anchor name="item6"}}==FreeBASIC est-il compatible avec QuickBasic?==
	La bibliothèque graphique de ""FreeBASIC"" émule les modes graphiques les plus utilisés de QB (modes 7,12,13) et implémente toutes les primitives de dessin proposées dans QB. 
	La plupart des problèmes de compatibilité résultent de l'utilisation des techniques bas niveau spécifiques au matériel-8086-DOS dans les aciens programmes de QB. Programmation du port VGA, interruptions DOS, commutation des segments de mémoire, écriture dans la mémoire d'écran ou jouer de la musique en utilisant le haut-parleur PC ne sont pas directement pris en charge, même si cela peut être supporté/émulé par des bibliothèques externes. 
	D'autres problèmes dans le portage d'anciens programmes QB, comme les noms de variables en conflit avec des mots nouveaux de FB, variables avec le nom d'un mot-clé QB plus un suffixe de type, la taille par défaut des entiers étant de 32 bits dans FB, sont traitées en exécutant ""FreeBASIC"" avec sur la ligne de commande l'option ##-lang qb## .

	Voir [[LangQB Différences entre FreeBASIC et QuickBasic]].

{{anchor name="item0|Retour en haut de la page"}}

{{anchor name="item7"}}==""FreeBASIC"" est-il compatible avec Windows? DOS? Linux? ==
	""FreeBASIC"" est totalement compatible avec Windows, MS-DOS, Free-DOS et Linux. Lors de la planification pour créer un programme pour les trois plates-formes, cependant, gardez à l'esprit la disponibilité d'API -- le code utilisant ""OpenGL"" fonctionne sous Windows et Linux, par exemple, mais pas sous DOS, car ""OpenGL"" n'est pas disponible pour MS-DOS.

{{anchor name="item0|Retour en haut de la page"}}

{{anchor name="item8"}}==La programmation orientée objet est elle supportée par ""FreeBASIC""?==
	Certaines fonctionnalités POO sont à la disposition des utilisateurs de FB depuis la version 0.17. La fonctionnalité POO complète est attendue pour le futur. A l'heure actuelle (version 0.22) il existe des méthodes à l'intérieur des types définis par l'utilisateur et la surcharge d'opérateur, mais l'héritage et le polymorphisme ne sont pas encore mis en oeuvre. Pour plus d' information voir: [[http://www.freebasic.net/wiki/wikka.php?wakka=TutBeginnersGuideToTypesAsObjects Un guide pour débutants sur les Types comme Objets]].

{{anchor name="item0|Retour en haut de la page"}}

{{anchor name="item9"}}==Quels sont les plans futurs avec FB / ""ToDo"" list?==

	Vous pouvez découvrir ce qui est prévu pour les versions futures en consultant directement [[http://fbc.svn.sourceforge.net/svnroot/fbc/trunk/FreeBASIC/src/compiler/TODO.txt?view=markup le fichier TODO]] pour le compilateur, qui est actuellement dans le SVN.

{{anchor name="item0|Retour en haut de la page"}}

{{anchor name="item10"}}==Puis-je programmer des applications GUI avec FB==
	Oui, vous le pouvez. Les fichier en-têtes qui vous permettent d'appeler l'API graphique de Windows ou Linux sont fournies avec les versions respectives, mais les programmes fabriqués de cette façon ne sont pas portables.
	Il y a quelques protocoles API et applications RAD expérimentales qui créent du code non portable GUI pour Windows.
	Pour une programmation portable une bibliothèque GUI telle que GTK ou "wx-Widgets" doit être utilisée. Les fichier en-têtes GTK sont fournis avec FB, mais la fonctionnalité POO actuellement disponible en FB empêche l'utilisation de wx-Widgets. Les programmes créés avec ces bibliothèques peuvent obliger l'utilisateur à installer les bibliothèques encapsulatrices (wrapper) dans leurs systèmes.
	Pour les jeux et les petites applications graphiques il y a quelques bibliothèques spécifiques-FB qui dessinent et gérent des commandes simples comme des boutons et des boîtes à l'intérieur de l'écran graphique, les programmes réalisés avec ces bibliothèques sont entièrement portables 

{{anchor name="item0|Retour en haut de la page"}}

{{anchor name="item11"}}==FB est-il approprié pour des applications grosses/complexes?==
	Le compilateur FB est "auto-hébergement", il est lui-même programmé dans FB. Cela signifie plus de 120 000 lignes de code pour le moment, une application assez complexe.

{{anchor name="item0|Retour en haut de la page"}}

{{anchor name="item12"}}==Puis-je utiliser un encodage (jeu de caractères) non-latin dans mes applications ""FreeBASIC""?==

	""FreeBASIC"" supporte Unicode qui est fourni par la bibliothèque d'exécution C pour la plate-forme donnée. Cela signifie que FB DOS ne sera pas gêné par Unicode. Sur d'autres plateformes, vous pouvez utiliser [[KeyPgWstring Wstrings]] pour supporter tout jeu de caractères dont vous avez besoin. Le mot-clé OPEN a un paramètre additionnel [[KeyPgEncoding Encoding]] permettant différents encodages. Comme ""FreeBASIC"" est lui-même codé dans FB, cela signifie que vous pouvez coder votre source dans un éditeur Unicode donc les commentaires et les chaînes littérales peuvent être dans n'importe quel jeu de caractères (mots-clés, étiquettes, noms de variables et de procédures doivent être conservés à l'intérieur du jeu ASCII..).
	Pour la sortie à l'écran le support est différent de la console aux graphiques. En mode console l'affichage de "wstring" en caractères non latins est supporté si la police de caractères de la console le permet. Le mode graphique utilise une police avec un jeu de caractères interne CP437 (l'ancien jeu de caractères du DOS) donc les affichages non latins une police personnalisée et l'utilisation du mot-clef [[KeyPgDrawString DRAW STRING]] keyword. Des outils tiers existent pour introduire une police externe et la convertir au format DRAW STRING.

{{anchor name="item0|Retour en haut de la page"}}

{{anchor name="item13"}}==Puis-je utiliser les ports Serial/COM et Hardware/CPU dans FB?==
	 Oui, FB a des fonctions intégrées pour accéder aux ports serial/COM port et hardware/CPU sans avoir besoin de bibliothèques externes. Voir {{anchor name="item999|FAQ des spécificités des OS"}} pour des détails pour votre OS ainsi que [[KeyPgOpenCom Open Com]], [[KeyPgInp INP]] et [[KeyPgOut OUT]] .

{{anchor name="item0|Retour en haut de la page"}}
----

@@**Questions de débutants sur ""FreeBASIC""**@@

{{anchor name="item20"}}==Où puis-je trouver plus d'informations sur ""FreeBASIC""?==
	Le [[http://www.freebasic.net/wiki/ Wiki ""FreeBASIC""]] est le manuel le-plus-à-jour pour l'utilisation de ""FreeBASIC"".

	Des forums actifs sur ""FreeBASIC"", outre le [[http://www.freebasic.net/forum forum officiel]], peuvent être trouvés à [[http://www.qbasicnews.com/ qbasicnews]], [[http://www.petesqbsite.com/forum/ Pete's QB Site]] , [[http://games.freebasic.net/forum/index.php the FB Games directory]]  ou  [[http://www.freebasic-portal.de freebasic-portal.de (en allemand)]]. 

	Des magazines actifs qui ont régulièrement des articles liés ""FreeBASIC"" [[http://www.petesqbsite.com/sections/express/express.shtml QB Express]] and [[http://www.qbxl.net/ QBXL Magazine]]. Ces magazines sont toujours à la recherche de nouveaux articles, donc si vous pensez que vous avez une bonne idée pour un article sur ""FreeBASIC"", soumettez-le!

{{anchor name="item0|Retour en haut de la page"}}

{{anchor name="item21"}}==Pourquoi le GUI de QB ne s'ouvre-t-il pas quand je lance ""FreeBASIC""?==
	QB avait un Environnement de Développement Intégré ou en anglais: Integrated Development Environment (IDE).  ""FreeBASIC"" n'en a pas.
	""FreeBASIC"" est seulement un compilateur, non pas un "clone" complet de ""QuickBASIC"". Il s'agit d'une application en mode console. Il acceptera un fichier BAS sur la ligne de commande et renverra un fichier EXE.
	Vous pouvez créer le fichier BAS avec l'éditeur simple, plein texte de votre OS (Notepad, EDIT, nano,...), puis lancez le compilateur. 
	Si vous ne pouvez vivre sans la coloration syntaxique, le soulignement d'erreur, la gestion de fichiers multiples, un débogueur intégré, l'aide contextuelle ou d'autres fonctionnalités, vous avez besoin d'un IDE. Voyez {{anchor name="item999|FAQ des spécificités des OS"}} pour les IDE et éditeurs disponibles.
 
{{anchor name="item0|Retour en haut de la page"}}

{{anchor name="item22"}}==Puis-je avoir une version hors ligne de la documentation?==
	La documentation officielle pour FB est ce Wiki, habituellement la version courante contient les dernières améliorations du SVN.
	De temps en temps ce Wiki est converti en plusieurs formats lisibles hors-ligne. [[http://sourceforge.net/project/showfiles.php?group_id=122342&package_id=159165 CHM]] pour les utilisateurs de Windows, et [[http://www.execulink.com/~coder/freebasic/docs.html d'autres formats]].

{{anchor name="item0|Retour en haut de la page"}}

{{anchor name="item23"}}==Quelle est l'idée derrière les dialectes FB?==
	L'idée est de permettre des améliorations dans le langage tout en conservant une compatibilité ascendante avec le code QB. Les bizarreries de la syntaxe QB ne sont pas compatibles avec le style plus rigide requis par la POO. Les nouveaux mots-clés FB sont souvent en conflit avec les noms de variables dans les anciens programmes de QB. QB permettait d'utiliser librement des points dans les noms de variables et n'étaient pas des procédures d'UDT.
	Les trois dialectes (fb-lang, lang-qb,-lang fblite) permettent de combiner le meilleur de deux mondes. 
	-##lang fb## fournit le cadre nécessaire pour la programmation orientée objet. Les autres dialectes ne donnent pas accès à la POO.
	-##lang qb## permettra aux développeurs de conserver la compatibilité ascendante avec les programmes QB. Les nouveaux mots-clés dans FB peuvent être utilisés par les précédant avec deux caractères de soulignement. Par exemple, ##Getmouse## peut être appelé en utilisant ##_####_Getmouse##
	-##lang fblite## offre une compatibilité linguistique ""FreeBASIC"", avec un style de codage plus compatible QBASIC.

	Voir [[CompilerDialects Les dialectes du compilateurs]] pour plus de détails.

{{anchor name="item0|Retour en haut de la page"}}

{{anchor name="item24"}}==Pourquoi mon programme se plante-t-il quand je définis un tableau plus grand que xx?==

	Cela arrive généralement parce que vous avez fait un tableau //[[ProPgStorageClasses automatic]]// de longueur fixe trop large et il y a eu un débordement de la pile du programme. Vous avez plusieurs options:

	- si c'est possible, de réduisez la taille du tableau //automatic//
	- créez un tableau de longueur variable, en
		- définissant le tableau avec  une liste vide d'indices (en utilisant ##[[KeyPgDim Dim]]##), ou
		- définissant le tableau avec des indices variables au lieu de littéraux numériques, [[KeyPgConst constants]] ou [[KeyPgEnum enums]] (en utilisant ##[[KeyPgDim Dim]]##), ou en
		- définissant le tableau avec  ##[[KeyPgRedim Redim]]##
	- réservez plus de mémoire pour la pile du programme en utilisant l'option ##-t## de la  [[CompilerCmdLine commande en ligne]] lors de la compilation. la valeur par défaut est ##-t 1024## (kilo-octets). Note: c'est une mauvaise idée d'utiliser, ici, de très grandes valeurs.
	- créez un tableau //static// en définissant le tableau avec ##[[KeyPgStatic Static]]## plutôt que ##[[KeyPgDim Dim]]## (visible seulement localement, mais globalement préservé)
	- définissez le tableau avec un accès ##[[KeyPgShared Shared]]## en utilisant ##[[KeyPgDim Dim]]## (ce qui rend le tableau parfaitement global)
	- utilisez des [[ProPgPointers Pointeurs]] et [[CatPgMemory des fonctions mémoire]] telles que ##[[KeyPgAllocate Allocate]]## et ##[[KeyPgDeallocate Deallocate]]## pour gérer vous-même la mémoire - c'est le moyen privilégié pour le stockage des grands tampons, mais pas pour les débutants.

	Les tableaux //Static// et //variable-length// n'utilisent pas la pile du programme pour leurs éléments de données, nous n'avons donc pas le problème associé des tableaux //automatic// à longueur fixe. Voir les [[ProPgStorageClasses Classes de stockage]] pour plus d'informations. Notez que le stockage d'énormes tampons définis comme //static// ou l'augmentation de la taille de la pile au-dessus de la valeur par défaut n'est pas une très bonne idée, car elle augmente la quantité fixe de mémoire nécessaire pour charger et démarrer votre programme, même si la plupart de celle-ci n'est pas utilisée plus tard, et cela peut entraîner une dégradation des performances, ou même de provoquer un refus de chargement votre programme.    

{{anchor name="item0|Retour en haut de la page"}}

----

@@**""FreeBASIC"" avancé**@@

{{anchor name="item31"}}==Comment puis-je lier à des bibliothèques C?==
	Les bibliothèques C sont mises en place de la même manière dans ""FreeBASIC"" qu'elles le sont en C. Chaque bibliothèque fournie avec ""FreeBASIC"" a un fichier de base "include" nommé "//nom-de-la-bibliothèque.bi//" qui utilise la métacommande [[KeyPgInclib #INCLIB]] pour inclure la bibliothèque et l'instruction [[KeyPgDeclare Declare]] to déclarer les fonctions au sein de la bibliothèque. ""FreeBASIC"" inclut des centaines de fichiers BI, voir la [[ExtLibTOC liste complète des en-têtes de bibliothèque]].

{{anchor name="item0|Retour en haut de la page"}}

{{anchor name="item32"}}==Puis-je utiliser un débogueur?==
	""FreeBASIC"" peut utiliser de préférence un débogueur compatible avec GNU GDB. 
		- ""Win32"": Insight est un "wrapper" (conteneur) convivial pour GDB, voir la [[FaqPgWin32 FAQ Win32]]. 
		- DOS: Soyez averti que DOS a également produit nommé "Insight", mais c'est un débogueur en mode réel qui n'est pas utilisable avec ""FreeBASIC"", utilisez GDB ou au moins certains débogueur DPMI32.
		- Linux: utilisez GDB.

	Voir la {{anchor name="item999|FAQ des spécificités des OS"}} pour des détails sur votre OS.

{{anchor name="item0|Retour en haut de la page"}}

{{anchor name="item33"}}==Quel est le but des fichiers AR.EXE, AS.EXE et LD.EXE fournis avec FB?==
	AS.EXE c'est GAS, l'"assembleur GNU". Il est toujours impliqué dans la compilation. LD.EXE est le "linkeur GNU", impliqué dans la création d'exécutables. AR.EXE est l'"archiveur GNU", en fait, un fabricant de bibliothèques, crcréant des bibliothèques ##.A##. 

{{anchor name="item0|Retour en haut de la page"}}

{{anchor name="item34"}}==Y a-t-il une limitation l'ampleur de mes fichiers source?==
	Oui, comme ""FreeBASIC"" est un compilateur pleinement 32 bits, il peut fonctionner sur des fichiers source, théoriquement, jusqu'à 4GB ou 4294967296 octets, toutefois, votre capacité de mémoire vive (RAM) devra être nettement supérieure à la taille de votre source, sinon la compilation ne se terminera pas ou, au moins, sera très lente. 

{{anchor name="item0|Retour en haut de la page"}}

{{anchor name="item35"}}==Puis-je écrire un OS avec ""FreeBASIC""?==

	OUI et NON. Si vous insistez pour écrire un OS et impliquer FB, la réponse est OUI. Si la question est de savoir si c'est une bonne idée que vous, encore plus si vous êtes un débutant, devrait commencer à coder maintenant un OS en utilisant FB, la réponse est NON. Plusieurs écueils sont applicables:
		- Le développement d'un OS est difficile, voir [[http://www.osdev.org/wiki/Getting_Started Getting Started]].
		- FB ne vous aidera pas à contourner la nécessité de s'occuper avec l'assembage, aussi C est peut être presque impossible à éviter.
		- Vous ne serez pas en mesure d'utiliser la plupart des fonctions éprouvées de FB, comme les graphiques, fichiers E/S, flux, gestion de la mémoire, même les E/S de la console ... contrôle de débit, les mathématiques et la logique. Si vous avez besoin de ces bibliothèque de fonctions, vous aurez à les ** réimplémenter **.
	""FreeBASIC"" s'appuie sur GCC et des informations disponibles sur l'élaboration d'un OS en C s'appliquent aussi à ""FreeBASIC"". FB ne vous aidera ni plus ni moins que GCC.

{{anchor name="item0|Retour en haut de la page"}}

{{anchor name="item36"}}==Je développe un système d'exploitation, ""FreeBASIC"" peut-il être porté sur mon OS?==

Cela dépend. Si votre OS atteint au moins les fonctionnalités du DOS avec DPMI32 (console I/O (recherche, plusieurs fichiers ouverts, ...), E/S fichier, gestion de la mémoire) **et** dispose d'un portage de GCC, alors la réponse est OUI. Si vous avez au moins un autre compilateur C compatible **avec** des bibliothèques, ce pourrait être possible. Vous ne pouvez pas raisonnablement porter FB par exemple vers un OS permettant de charger ou enregistrer un fichier dans un seul bloc, ou un OS 16-bit.   

{{anchor name="item0|Retour en haut de la page"}}

{{anchor name="item37"}}==""FreeBASIC"" permet-il le retour de références à partir de fonctions, comme en ""C++""?==

Depuis la version 0.20.0b, non. Il y a quelques mots-clés, tels que ##[[KeyPgPeek Peek]]## et les [[CatPgOpIndexing opérateurs d'indexation]], par exemple, qui se comportent comme s'ils étaient des procédures ##[[KeyPgFunction Function]]##qui retourne une référence, comme en ""C++"". Autrement dit, ils évaluent à quelque chose qui peut être utilisé à la place d'un objet, un peu comme des [[ProPgPassingArguments références de paramètres]].

Par exemple, si  ##//mystring//## est de type ##[[KeyPgString String]]## de longueur non nulle, alors ##//mystring[0]//## correspond à une référence au premier caractère (un ##[[KeyPgUbyte UByte]]##), qui peut être assignée et modifiée, transmise à des procédures, etc.

##[[KeyPgPeek Peek]]## et les [[CatPgOpIndexing opérateurs d'indexation]] sont documentés comme des procédures ##[[KeyPgFunction Function]]## ou des opérateurs qui retourne une valeur, puisque ""FreeBASIC"" ne supporte pas encore le retour de références. Lorsque le retour de références sera pris en charge, la documentation sera changée pour refléter cela.

{{anchor name="item0|Retour en haut de la page"}}

{{anchor name="item999"}}{{fbdoc item="see"}}
	- [[FaqPgWin32 FAQ relative à Win32]]
	- [[FaqDOS FAQ relative au DOS]]
	- [[FaqPgLinux FAQ relative à Linux]]
et
	- [[FaqPgrtlib FAQ de la bibliothèque d'exécution de FB]]
	- [[FaqPggfxlib2 Questions Fréquemment Posées sur la bibliothèque graphique de FreeBASIC]]

{{fbdoc item="back" value="DocToc|Table of Contents"}}

