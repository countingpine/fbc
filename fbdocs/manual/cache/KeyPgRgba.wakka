{{fbdoc item="title" value="RGBA"}}----
Calcule une valeur de couleur valide incluant la transparence (alpha) pour les modes "hi/truecolor"

{{fbdoc item="syntax"}}##
	[[KeyPgPpdefine #define]] **RGBA**(//r//,//g//,//b//,//a//) (([[KeyPgCuint cuint]](r) [[KeyPgOpShiftLeft shl]] 16) [[KeyPgOpOr or]] ([[KeyPgCuint cuint]](g) [[KeyPgOpShiftLeft shl]] 8) [[KeyPgOpOr or]] [[KeyPgCuint cuint]](b) [[KeyPgOpOr or]] ([[KeyPgCuint cuint]](a) [[KeyPgOpShiftLeft shl]] 24))
##
{{fbdoc item="usage"}}##
	//result// = **RGBA**(//red//, //green//, //blue//, //alpha//)
##
{{fbdoc item="param"}}
	##//red//##
		valeur de la composante de couleur rouge
	##//green//##
		valeur de la composante de couleur vert
	##//blue//##
		valeur de la composante de couleur bleu
	##//alpha//##
		valeur de la composante alpha

{{fbdoc item="ret"}}
	La couleur correspondant à la combinaison.

{{fbdoc item="desc"}}
	##//red//##, ##//green//##, ##//blue//## et ##//alpha//## sont les composantes - valeurs de ##0## à ##255##.

	La fonction ##**RGBA**## est utilisée pour calculer une valeur de couleur valide incluant la transparence (canal alpha) pour une utilisation avec les modes "hi/truecolor". Elle renvoie un entier non signé du format ##&hAARRVVBB##, où ##RR##, ##VV##, ##BB##, ##AA##  correspondent aux valeurs passées à la fonction, dans le format hexadécimal.
	Il est possible de retrouver les valeurs rouge, vert, bleu et alpha à partir d'un valeur de couleur, en utilisant une combinaison de ##[[KeyPgOpAnd And]]## et ##[[KeyPgOpShiftRight Shr]]##.  Le second exemple ci-dessous comment utiliser ##[[KeyPgPpdefine #Define]]## et des macros pour ce faire.

{{fbdoc item="ex"}}
{{fbdoc item="filename" value="examples/manual/gfx/rgba.bas"}}%%(freebasic)
'ouvre ecran graphique (320 * 240, 32-bit)
ScreenRes 320, 240, 32

Dim As Any Ptr img
Dim As Integer x, y

'fabriquemake image en variant transparence et couleur
img = ImageCreate(64, 64)
For x = 0 To 63
  For y = 0 To 63
	PSet img, (x, y), RGBA(x * 4, 0, y * 4, (x + y) * 2)
  Next y
Next x
Circle img, (31, 31), 25,      RGBA(0, 127, 192, 192), ,,, F 'cercle bleu semi-transparent
Line   img, (26, 20)-(38, 44), RGBA(255, 255, 255, 0),    BF 'rectangle blanc transparent

'dessine arriere-plan (lignes diagonales blanches)
For x = -240 To 319 Step 10
  Line (x, 0)-Step(240, 240), RGB(255, 255, 255)
Next

Line (10,  10)-(310,  37), RGB(127, 0, 0), BF 'boite rouge pour texte
Line (10, 146)-(310, 229), RGB(0, 127, 0), BF 'boite verte pour Putting dessus

'dessine image et texte avec PSET
Draw String(64, 20), "PSet"
Put(48,  48), img, PSet
Put(48, 156), img, PSet

'dessine image et texte avec ALPHA
Draw String (220, 20), "Alpha"
Put(208,  48), img, Alpha
Put(208, 156), img, Alpha



'Libere memoire image
ImageDestroy img

'Attend touche appuyee
Sleep
%%
{{image class="center" title="RGBA example output" url="/images/rgba.png"}}

{{fbdoc item="filename" value="examples/manual/gfx/rgba_get.bas"}}%%(freebasic)
'' valide et recupere Rouge, Vert, Bleu et Alpha/span

#define RGBA_R( c ) ( CUInt( c ) Shr 16 And 255 )
#define RGBA_G( c ) ( CUInt( c ) Shr  8 And 255 )
#define RGBA_B( c ) ( CUInt( c )        And 255 )
#define RGBA_A( c ) ( CUInt( c ) Shr 24         )

Dim As UInteger r, g, b, a

Dim As UInteger col = RGBA(255, 192, 64, 128)

Print Using "Color: _&H\      \"; Hex(col, 8)

r = RGBA_R( col )
g = RGBA_G( col )
b = RGBA_B( col )
a = RGBA_A( col )

Print
Print Using "Red:         _&H\\ = ###"; Hex(r, 2); r
Print Using "Green:       _&H\\ = ###"; Hex(g, 2); g
Print Using "Blue:        _&H\\ = ###"; Hex(b, 2); b
Print Using "Alpha:       _&H\\ = ###"; Hex(a, 2); a
%%

{{fbdoc item="lang"}}
	- Non disponible dans le dialecte //[[CompilerOptlang -lang qb]]//.

{{fbdoc item="diff"}}
	- Nouveau pour ""FreeBASIC""

{{fbdoc item="see"}}
	- ##[[KeyPgRgb RGB]]##
	- ##[[KeyPgColor Color]]##
	- ##[[KeyPgPpdefine #Define]]##

{{fbdoc item="back" value="CatPgGfx2D|2D Drawing Functions"}}

