{{fbdoc item="title" value="Procedures Overview"}}----
Vue d'ensemble des diff&eacute;rents types de proc&eacute;dures FB.

	Les proc&eacute;dures sont des blocs de code qui peuvent &ecirc;tre ex&eacute;cut&eacute;s ou appel&eacute;s, un certain nombre de fois, depuis n'importe quel endroit d'un programme. Le code qui est ex&eacute;cut&eacute; est appel&eacute; le corps de la proc&eacute;dure. Il existe deux types de proc&eacute;dures sous FreeBASIC: des proc&eacute;dures qui ne retournent pas de valeur et des proc&eacute;dures qui en retournent une.

{{fbdoc item="section" value="Les proc&eacute;dures Sub
	Les //Sub// sont des procedures qui ne retournent aucune valeur. Eles sont d&eacute;clar&eacute;es en utilisant le mot-clef ##[[KeyPgDeclare Declare]]## et d&eacute;finies en utilisant le mot-clef ##[[KeyPgSub Sub]]##. D&eacute;clarer une de proc&eacute;dures introduit son nom afin qu'elle puisse &ecirc;tre appel&eacute;e et la d&eacute;finition de la proc&eacute;dure liste les instructions de code qui seront ex&eacute;cut&eacute;es lorsqu'elle sera appel&eacute;e. Une //sub// est  appel&eacute;e simplement en utilisant son nom queque part dans le programme.

{{fbdoc item="filename" value="examples/manual/proguide/procs/subs.bas"}}%%(freebasic)
' introduces the sub 'MyProcedure'
declare sub MyProcedure

' calls the procedure 'MyProcedure'
MyProcedure

' defines the procedure body for 'MyProcedure'
sub MyProcedure
	print "the body of MyProcedure"
end sub
%%
	produira l'affichage:

%%
the body of MyProcedure
%%

	Notez que seule la d&eacute;claration est n&eacute;cessaire pour appeler la proc&eacute;dure. La proc&eacute;dure peut &ecirc;tre d&eacute;finie ult&eacute;rieurement dans le code ou m&ecirc;me dans un fichier source tout &agrave; fait diff&eacute;rent.

{{fbdoc item="section" value="Les fonctions
	Les //fonctions// sont des proc&eacute;dures qui retournent une valeur au point du code depuis lequel elles ont &eacute;t&eacute; appel&eacute;es. Vous pouvez penser qu'un appel de //fonction// est comme l'&eacute;valuation d'une expression, tout comme une variable ou un objet. Elles sont d&eacute;clar&eacute;es en utilisant le mot-clef ##[[KeyPgDeclare Declare]]## et d&eacute;finies en utilisant le mot-clef ##[[KeyPgFunction Function]]##. Le type de valeur que la //fonction// retourne est sp&eacute;cifi&eacute; &agrave; la fin de la d&eacute;claration.

{{fbdoc item="filename" value="examples/manual/proguide/procs/functions.bas"}}%%(freebasic)
' introduces and defines a procedure that returns an integer value
function MyProcedure as integer
	return 10
end function

' calls the procedure, and stores its return value in a variable
dim i as integer = MyProcedure
print i
%%
	produira l'affichage:

%%10%%Comme la d&eacute;finition est une d&eacute;claration, ainsi la proc&eacute;dure peut &ecirc;tre appel&eacute;e apr&egrave;s qu'elle a &eacute;t&eacute; d&eacute;finie.
Il s'agit d'une convention commune, lors de l'appel d'une proc&eacute;dure de placer des parenth&egrave;ses ##'()'## apr&egrave;s le nom de la proc&eacute;dure, pour signifier un appel de proc&eacute;dure. Cependant, FreeBASIC ne l'exige pas.
{{fbdoc item="see"}}
	- [[ProPgPassingArguments Passage d'arguments aux proc&eacute;dures]]

	- [[ProPgReturnValue Retourner une valeur]]

- ##[[KeyPgDeclare Declare]]##
	- ##[[KeyPgSub Sub]]##
	- ##[[KeyPgFunction Function]]##
	- ##[[KeyPgDeclare Declare]]##
	- ##[[KeyPgSub Sub]]##
	- ##[[KeyPgFunction Function]]##

{{fbdoc item="back" value="CatPgProgrammer|Programmer's Guide"}}