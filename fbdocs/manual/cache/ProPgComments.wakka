{{fbdoc item="title" value="Commentaires"}}----
Les commentaires sont des régions de texte dont le compilateur ne tiendra pas compte, mais qui peuvent contenir des informations qui sont utiles pour le programmeur.  Une exception sont les métacommandes qui peuvent apparaître dans certains types de commentaires.

{{fbdoc item="section" value="Commentaires sur une seule ligne"}}
	Un caractère apostrophe (##**'**##) peut être utilisé pour indiquer un commentaire et peut apparaître après les mots-clés sur une ligne de source.  Le reste de déclaration sera traitée comme un commentaire.
	{{fbdoc item="filename" value="examples/manual/proguide/comments/comment1.bas"}}%%(freebasic)
'texte de commentaire
%%

{{fbdoc item="section" value="L'instruction de commentaire: Rem"}}
	Une instruction de code source commençant avec ##[[KeyPgRem Rem]]## indique que le reste de la ligne est un commentaire et ne sera pas compilé.  Le comportement de ##[[KeyPgRem Rem]]## est le même que ci-dessus, sauf qu'il doit être le premier mot de la la ligne d'instruction.
	{{fbdoc item="filename" value="examples/manual/proguide/comments/comment2.bas"}}%%(freebasic)
Rem commentaire
%%

{{fbdoc item="section" value="Commentaires sur plusieurs lignes"}}
	Les commentaires sur plusieurs lignes sont marquées avec ##**/'**## et ##**'/**##.  Tout le texte entre les deux marqueurs est considéré comme le texte du commentaire et n'est pas compilé.

	Les commentaires sur plusieurs lignes peuvent s'étendre sur plusieurs lignes et peuvent également être utilisés au milieu de déclarations.  Après la fin du commentaire, l'instruction sera analysée comme d'habitude (même si le commentaire rencontre des sauts de ligne).
	{{fbdoc item="filename" value="examples/manual/proguide/comments/comment3.bas"}}%%(freebasic)
/'Commentaire
   multi-line '/

Print "Hello" /' commentaire intercalé'/ " world"
%%
	Note: Si ""FreeBASIC"" rencontre un marqueur de fin de commentaire alors qu'il n'est pas dans un commentaire multi-ligne, il sera traité comme un commentaire sur une ligne normale à cause de l'apostrophe.

{{fbdoc item="section" value="Commentaires imbriqués"}}
	Une commentaire multi-ligne peut contenir d'autres commentaires sur plusieurs lignes.  Chaque commentaire interne aura ses propres marqueurs d'ouverture et fermeture de commentaire.

	{{fbdoc item="filename" value="examples/manual/proguide/comments/comment4.bas"}}%%(freebasic)
/'
	Ceci est un commentaire.
	/'
	 Ceci est un commentaire dans un commentaire
	'/
	This Is a comment.
'/
%%
	Une commentaire sur plusieurs lignes peut contenir des niveaux illimités de commentaires imbriqués.  ""FreeBASIC"" continuera d'analyser les marqueurs de commentaires multi-ligne tant que le nombre de marqueurs d'ouverture sera identique à celui des marqueurs de fermeture, c'est à dire quand il aura fermé tous les commentaires qu'il a ouverts.

{{fbdoc item="section" value="Commentaires après continuation de ligne"}}
	Un commentaire sur une seule ligne peut apparaître après caractère de continuation de ligne ( ##**_**## ) dans une instruction sur plusieurs lignes.  ""FreeBASIC"" n'analysera pas le texte après le caractère de continuation de ligne, de sorte que vous ne pouvez pas ouvrir des commentaires sur plusieurs lignes après.

	{{fbdoc item="filename" value="examples/manual/proguide/comments/comment5.bas"}}%%(freebasic)
Print _ ' line
	"Ceci fait partie de la ligne precedente"
%%

{{fbdoc item="section" value="Métacommandes"}}
	Des métacommandes, telles que ##[[KeyPgMetaStatic $static]]## et ##[[KeyPgMetaInclude $include]]##, peuvent être placées sur une seule ligne de commentaires.  Le signe ##**$**## et le mot-clé doivent être les deux premières choses dans l'instruction, ne comprenant pas d'espace blanc.

	{{fbdoc item="filename" value="examples/manual/proguide/comments/comment6.bas"}}%%(freebasic)
Rem compile With -lang fblite Or qb

#lang "fblite"

Rem $Static
' $include: 'vbcompat.bi'
%%

{{fbdoc item="section" value="Analyse de commentaire sur une seule ligne"}}
	Lorsque vous faites un commentaire sur une seule ligne, ""FreeBASIC"" va analyser le commentaire, pour rechercher une métacommande.  S'il trouve un commentaire multi-ligne, il sera traité comme d'habitude, puis il poursuivra l'analyse du commentaire sur une seule ligne après le marqueur de fermeture.

	Si vous voulez éviter que ""FreeBASIC"" analyse les commentaires sur une seule ligne, mettez une autre l'apostrophe (##**'**##), au début du commentaire.  ""FreeBASIC"" traitera le reste de la ligne, y compris les marqueurs de commentaires multi-ligne et les métacommandes, comme du texte ordinaire et donc l'ignorera.  D'autres mots rencontrés dans un commentaire arrêteront également l'analyse syntaxique.
	~&//Note: Depuis la version 0.21.0, ce ne sera plus applicable dans le dialecte //[[CompilerOptlang -lang fb]]// et les marqueurs de commentaire multi-lignes seront complètement ignorés à l'intérieur de commentaires sur une ligne.//

	{{fbdoc item="filename" value="examples/manual/proguide/comments/comment7.bas"}}%%(freebasic)
'' $static <-- ne sera pas analyse
'' ce marqueur de commentaire multi-lignes ("/'") sera ignore
Print "Cette ligne nest pas un commentaire."
%%

{{fbdoc item="ex"}}
	{{fbdoc item="filename" value="examples/manual/proguide/comments/comment8.bas"}}%%(freebasic)
/' ceci est un commentaire 
multi-lignes comme une en-tete
de cet exemple '/

Rem This Is a Single Line comment

'ceci est un commentaire une ligne

Dim a As Integer   'commentaire apres une instruction

Dim b As /' commentaire possible ici aussi '/    Integer


#if 0
	Avant version 0.16, Ceci etait la
	seule possibilite de commenter hors sections
	avec multiple lignes de code.
#endif

%%

{{fbdoc item="see"}}
	- ##[[KeyPgRem Rem]]##

{{fbdoc item="back" value="CatPgProgrammer|Programmer's Guide"}}
   
   

