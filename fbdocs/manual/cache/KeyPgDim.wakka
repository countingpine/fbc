{{fbdoc item="title" value="DIM"}}----
D&eacute;clare une variable

{{fbdoc item="syntax"}}
	D&eacute;claration d'une variable unique:
		##**Dim** [[[KeyPgShared Shared]]] //symbolname// [As [[DataType DataType]]] [, ...]##
		##**Dim** [[[KeyPgShared Shared]]] As [[DataType DataType]] //symbolname// [, ...]##

	D&eacute;claration de tableaux:
		##**Dim** [[[KeyPgShared Shared]]] //symbolname// ( [//lbound// To] //ubound// [, ...] ) [As [[DataType DataType]]] [,...]##
		##**Dim** [[[KeyPgShared Shared]]] As [[DataType DataType]] //symbolname// ( [//lbound// To] //ubound// [, ...] ) [,...]##
	
	Initialisation de variables:
		##**Dim** //scalar_symbol// As [[DataType DataType]]] = //expression// | [[KeyPgAny Any]]##
		##**Dim** //array_symbol// ([//lbound// To] //ubound//) [AS [[DataType DataType]]] => { //expression// [, ...] } | [[KeyPgAny Any]]##
		##**Dim** //udt_symbol// As [[DataType DataType]] = ( //expression// [, ...] ) | [[KeyPgAny Any]]##

{{fbdoc item="desc"}}
	D&eacute;clare une variable par son nom et r&eacute;serve de la m&eacute;moire pour la stocker.

	Les variables doivent &ecirc;tre d&eacute;clar&eacute;es avant leur utilisation dans le dialecte //[[CompilerOptlang -lang fb]]// ou lors de leur utilisation si vous utilisez l'##[[KeyPgOptionexplicit Option Explicit]]## des autres dialectes.  Seuls les dialectes //[[CompilerOptlang -lang qb]]// et //[[CompilerOptlang -lang fblite]]// acceptent que les variables soient utilis&eacute;es sans d&eacute;claration pr&eacute;alable, dans ce cas elles sont appel&eacute;es en tant que variables implicites.

	##**Dim**## peut &ecirc;tre utilis&eacute; pour d&eacute;clarer et affecter des variables de l'un des types de donn&eacute;es pris en charge, types d&eacute;finis par l'utilisateur ou &eacute;num&eacute;rations.

	Selon l'endroit, o&ugrave; et comment une variable ou un tableau est d&eacute;clar&eacute; peut changer la fa&ccedil;on dont il(elle) est allou&eacute;(e) dans la m&eacute;moire.  Voir //[[ProPgStorageClasses Classes de stockage]]//.

{{fbdoc item="section" value="Variables explicites avec des donn&eacute;es de type explicite
	Dans le dialecte par d&eacute;faut //[[CompilerOptlang -lang fb]]//, chaque variable doit &ecirc;tre explicitement d&eacute;clar&eacute;e avec le type de donn&eacute;es d&eacute;sir&eacute;. Les suffixes de type ne sont pas permis.

	Plus d'une variable peut &ecirc;tre d&eacute;clar&eacute;e dans un seul ##**Dim**## en s&eacute;parant les d&eacute;clarations de variable par des virgules.

{{fbdoc item="filename" value="examples/manual/check/KeyPgDim_1.bas"}}%%(freebasic)
'' Variable declaration examples

'' One variable per DIM statement
dim text as string
dim x as double

'' More than one variable declared, different data types
dim k as single, factor as double, s as string

'' More than one variable declared, all same data types
dim as integer mx, my, mz ,mb

'' Variable having an initializer
dim px as double ptr = @x
%%

{{fbdoc item="section" value="Variables explicites avec des types de donn&eacute;es implicites
	Dans les dialectes //[[CompilerOptlang -lang qb]]// et //[[CompilerOptlang -lang fblite]]//, m&ecirc;me si la variable est d&eacute;clar&eacute;e explicitement, un type sera automatiquement attribu&eacute; si le type de donn&eacute;es n'est pas explicitement donn&eacute;, soit par le nom, soit par le suffixe.  Le type de donn&eacute;es par defaut est ##[[KeyPgSingle Single]]## dans le dialecte //[[CompilerOptlang -lang qb]]// et ##[[KeyPgInteger Integer]]## dans le dialecte //[[CompilerOptlang -lang fblite]]//.  Le type de donn&eacute;es par d&eacute;faut peut &ecirc;tre chang&eacute; au cours du listing du code source par l'utilisation des d&eacute;clarations du style ##**Def###**##. (par exemple, ##[[KeyPgDefint DefInt]]##, ##[[KeyPgDefstr DefStr]]##, ##[[KeyPgDefsng DefSng]]##)

{{fbdoc item="filename" value="examples/manual/check/KeyPgDim_2.bas"}}%%(freebasic)
'' Compile with -lang qb

'$lang: "qb"

'' All variables beginning with A through N default to the INTEGER data type
'' All other variables will default to the SINGLE data type
DefInt I-N

'' I and J are INTEGERs
'' X and Y are SINGLEs
'' T$ is STRING
'' D is DOUBLE

Dim I, J, X, Y, T$, D As Double
%%

{{fbdoc item="section" value="Tableaux
	Comme avec la plupart des dialectes BASIC, FreeBasic supporte les tableaux avec des indices allant d'une limite inf&eacute;rieure &agrave; une limite sup&eacute;rieure.  Dans les diff&eacute;rentes syntaxes ci-dessus, ##//lbound//## se r&eacute;f&egrave;re &agrave; la limite inf&eacute;rieure, ou au plus petit indice.  Et ##//Ubound//## se r&eacute;f&egrave;re &agrave; la limite sup&eacute;rieure, ou au plus grand indice.  Si la limite inf&eacute;rieure n'est pas sp&eacute;cifi&eacute;e, elle sera z&eacute;ro par d&eacute;faut, &agrave; moins que ##[[KeyPgOptionbase Option Base]]## ne soit utilis&eacute;e.

{{fbdoc item="filename" value="examples/manual/check/KeyPgDim_3.bas"}}%%(freebasic)
Const upperbound = 10

'' Declare an array with indexes ranging from 0 to upperbound, 
'' for a total of (upperbound + 1) indexes.
Dim array(upperbound) As Single
%%

	Les tableaux multi-dimensionnels peuvent &ecirc;tre d&eacute;clar&eacute;s ainsi et sont stock&eacute;s dans l'ordre des lignes: les valeurs avec le m&ecirc;me dernier indice sont contigu&euml;s. (Ceci est diff&eacute;rent de QB par d&eacute;faut.  Le nombre maximum de dimensions d'un tableau multi-dimensionnel est de 8. 

{{fbdoc item="filename" value="examples/manual/check/KeyPgDim_4.bas"}}%%(freebasic)
'' declare a three-dimensional array of single 
'' precision floating-point numbers.
Dim array(1 To 2, 6, 3 To 5) As Single

'' The first dimension of the declared array 
'' has indices from 1 to 2, the second, 0 to 6, 
'' and the third, 3 to 5.
%%

	Pour plus d'informations sur les tableaux voir [[ProPgArrays Vue d'ensemble sur les tableaux ]].

	Si les valeurs utilis&eacute;es avec ##**Dim**## pour d&eacute;clarer les dimensions d'un tableau sont toutes des constantes, le tableau sera cr&eacute;&eacute; ##[[KeyPgOptionstatic Static]]## (sauf si l'##[[KeyPgOptiondynamic Option Dynamic]]## est sp&eacute;cifi&eacute;e), bien qu'en utilisant une ou plusieurs variables pour d&eacute;clarer les dimensions d'un tableau cela le rende de longueur variable, m&ecirc;me si l'##[[KeyPgOptionstatic Option Static]]## est effective.

	Les tableaux peuvent &ecirc;tre d&eacute;clar&eacute;s de longueur variable de plusieurs fa&ccedil;ons: en utilisant ##**Dim**## avec un ensemble vide d'indices (##**Dim** x()##), en utilisant ##**Dim**## avec des indices qui sont des variables ou en utilisant le mot-clef ##[[KeyPgRedim ReDim]]##, ou le en d&eacute;clarant par la m&eacute;ta-commande ##[[KeyPgMetaDynamic $Dynamic]]##. les tableaux de longueur variable ne peuvent pas utiliser des initialiseurs.

	Les tableaux d&eacute;clar&eacute;s avec ##**Dim**## ayant des indices constants et non pr&eacute;c&eacute;d&eacute;s par ##[[KeyPgOptiondynamic Option Dynamic]]## sont de longueur fixe (non redimensionnables pendant l'ex&eacute;cution) et peuvent utiliser des initialiseurs.

	La limite sup&eacute;rieure peut &ecirc;tre sugg&eacute;r&eacute;e (##[[KeyPgDots ...]]##, 3 points).  Ainsi la limite sup&eacute;rieure sera r&eacute;gl&eacute;e automatiquement en fonction du nombre d'&eacute;l&eacute;ments pr&eacute;sents lors de l'initialisation.  Lorsque l'ellipse est utilis&eacute;e de cette mani&egrave;re, un initialiseur doit &ecirc;tre utilis&eacute;, et il ne peut pas &ecirc;tre ##**Any**##.  Voir la page [[KeyPgDots Ellipse - suggestion]] pour un court exemple.

	Voir aussi //[[ProPgFixLenArrays Tableaux de longueur fixe]]// et //[[ProPgVarLenArrays Tableaux de longueur variable]]//.

{{fbdoc item="section" value="Initialiseurs
	Tableaux, variables, cha&icirc;nes et types d&eacute;finis par l'utilisateur sont initialis&eacute;s &agrave; z&eacute;ro ou avec des cha&icirc;nes nulles par d&eacute;faut lors de leur cr&eacute;ation.

	Pour &eacute;viter la surcharge des variables &agrave; l'initialisation, l'initialiseur ##**Any**## peut &ecirc;tre utilis&eacute; avec ##**Dim**## pour dire au compilateur de seulement r&eacute;server de la place en m&eacute;moire pour la variable, mais qu'elle ne doit pas &ecirc;tre initialis&eacute;e, de sorte que la variable contiendra n'importe quoi. Dans ce cas, le programmeur ne doit pas tenir compte des valeurs initiales.

	Les tableaux &agrave; longueur fixe, les variables, les zstrings et les types d&eacute;finis par l'utilisateur peuvent recevoir une valeur au moment de leur d&eacute;claration, en faisantsuivre la d&eacute;claration de la variable par un initialiseur.  Notez la diff&eacute;rence entre les diff&eacute;rents types d'initialisation. Les tableaux, les variables et les types d&eacute;finis par l'utilisateur sont initialis&eacute;s comme dans une affectation normale, en utilisant un signe d'&eacute;galit&eacute; ( ##=## ).  Le signe ##=>## peut &ecirc;tre utilis&eacute; avec des cha&icirc;nes de longueur fixe, pour &eacute;viter que la d&eacute;claration ne ressemble &agrave; une expression.

	 Les valeurs d'un tableau sont donn&eacute;es par des valeurs s&eacute;par&eacute;es par des virgules, l'ensemble d&eacute;limit&eacute; par des accolades, et les valeurs des types utilisateur sont donn&eacute;es par des valeurs s&eacute;par&eacute;es par des virgules, le tout d&eacute;limit&eacute; par des parenth&egrave;ses.  Ces m&eacute;thodes d'initialisation des variables peuvent &ecirc;tre imbriqu&eacute;es les unes dans les autres pour des t&acirc;ches complexes. L'imbrication permet l'initialisation de tableaux de n'importe quelle dimension.

{{fbdoc item="filename" value="examples/manual/check/KeyPgDim_5.bas"}}%%(freebasic)
'' Declare an array of 2 by 5 elements
'' and initialize
Dim array(1 To 2, 1 To 5) As Integer => {{1, 2, 3, 4, 5}, {1, 2, 3, 4, 5}}
%%

	%%(freebasic)
'' declare a simple UDT
Type mytype
	var1 As Double
	var2 As Integer
End Type

'' declare a 3 element array and initialize the first
'' 2 mytype elements
Dim myvar(0 To 2) As mytype => {(1.0, 1), (2.0, 2)}
%%
	Au niveau module, de longueur fixe ou variables globales, les valeurs d'initialisation doivent &ecirc;tre des expressions constantes.  FreeBasic signalera autrement une erreur de compilation.

	Note: L'initialisation de types de donn&eacute;es utilisateur avec des cha&icirc;nes n'est pas support&eacute;e pour le moment.

{{fbdoc item="section" value="Variables explicites avec type suffixes
	Dans les dialectes //[[CompilerOptlang -lang qb]]// et //[[CompilerOptlang -lang fblite]]//, le type de donn&eacute;es d'une variable peut &ecirc;tre indiqu&eacute;e par un suffixe de type ( ##$## ##%## ##### ##!## ##&## ).

{{fbdoc item="filename" value="examples/manual/check/KeyPgDim_7.bas"}}%%(freebasic)
'' Compile with -lang qb or fblite

'$lang: "qb"

'' A string variable using the $ type suffix
Dim strVariable$

'' An integer variable using the % type suffix
Dim intVariable%

'' A long variable using the & type suffix
Dim lngVariable&

'' A single precision floating point variable using the ! type suffix
Dim sngVariable!

'' A double precision floating point variable using the # type suffix
Dim dblVariable#
%%

{{fbdoc item="ex"}}
{{fbdoc item="filename" value="examples/manual/variable/dim.bas"}}%%(freebasic)
Dim a As Byte
Dim b As Short
Dim c As Integer
Dim d As LongInt
Dim au As UByte
Dim bu As UShort
Dim cu As UInteger
Dim du As ULongInt
Dim e As Single
Dim f As Double
Dim g As Integer Ptr
Dim h As Byte Ptr
Dim s1 As String * 10   '' fixed length string
Dim s2 As String        '' variable length string
Dim s3 As ZString Ptr   '' zstring

s1 = "Hello World!"
s2 = "Hello World from FreeBasic!"
s3 = Allocate( Len( s2 ) + 1 )
*s3 = s2

Print "Byte: "; Len(a)
Print "Short: "; Len(b)
Print "Integer: "; Len(c)
Print "Longint: "; Len(d)
Print "UByte: "; Len(au)
Print "UShort: "; Len(bu)
Print "UInteger: "; Len(cu)
Print "ULongint: "; Len(du)
Print "Single: "; Len(e)
Print "Double: "; Len(f)
Print "Integer Pointer: "; Len(g)
Print "Byte Pointer: "; Len(h)
Print "Fixed String: "; Len(s1)
Print "Variable String: "; Len(s2)
Print "ZString: "; Len(*s3)

Deallocate(s3)
%%

{{fbdoc item="section" value="Differences de dialectes
	- Dans les dialectes //[[CompilerOptlang -lang qb]]// et //[[CompilerOptlang -lang fblite]]//, les variables ont une port&eacute;e proc&eacute;dure si elles sont d&eacute;finies dans une proc&eacute;dure, et pour l'ensemble du module si elles sont d&eacute;finies avec ##**Dim Shared**##.
	- Dans les dialectes //[[CompilerOptlang -lang fb]]// et //[[CompilerOptlang -lang deprecated]]//, les variables d&eacute;finies &agrave; l'int&eacute;rieur de blocs compos&eacute;s (##[[KeyPgFornext For..Next]]##, ##[[KeyPgWhilewend While..Wend]]##, ##[[KeyPgDoloop Do..Loop]]##, ##[[KeyPgScope Scope..End Scope]]##) ont une [[ProPgVariableScope port&eacute;e]] locale, et ne sont visibles que dans ces blocs.
	- Dans le dialecte //[[CompilerOptlang -lang fb]]//, la d&eacute;claration ##**Option**## (par exemple ##[[KeyPgOptionbase Option Base]]##, ##[[KeyPgOptiondynamic Option Dynamic]]##), les m&eacute;tacommandes (par exemple ##[[KeyPgMetaStatic $Static]]##) et les ##**Def###**## (par exemple ##[[KeyPgDefint DefInt]]##) ne sont pas permises.

{{fbdoc item="diff"}}
	- Les initialiseurs de variables sont nouveaux pour FreeBASIC
	- La syntaxe alternative ##Dim As DataType //symbolname//, [...]## est nouvelle pour FreeBASIC
	- Les tableaux multidimensionnels sont stock&eacute;s dans l'ordre ligne-prioritaire dans FreeBASIC, ils sont stock&eacute;s dans l'ordre des colonnes-prioritaire dans QB par d&eacute;faut. Ordre ligne-prioritaire: les valeurs avec le m&ecirc;me indice de fin sont contigu&euml;s. Ordre colonne-prioritaire: les valeurs avec le m&ecirc;me indice de d&eacute;but sont contigu&euml;s.
	- Des tableaux de longueur variable jusqu'&agrave; 2 Go de taille sont possibles dans FreeBASIC. Dans QB, ##$STATIC## les tableaux sont limit&eacute;s &agrave; 64 KiB , ou &agrave; la m&eacute;moire DOS libre (quelques 100 KiB, au mieux) si ##$DYNAMIC## et ///AH// sont utilis&eacute;s.
	- La forme elliptique pour les limites sup&eacute;rieures est nouvelle pour FreeBASIC.

{{fbdoc item="see"}}
	- ##[[KeyPgVar Var]]##
	- ##[[KeyPgCommon Common]]##
	- ##[[KeyPgExtern Extern]]##
	- ##[[KeyPgRedim Redim]]##
	- ##[[KeyPgPreserve Preserve]]##
	- ##[[KeyPgShared Shared]]##
	- ##[[KeyPgStatic Static]]##
	- ##[[KeyPgErase Erase]]##
	- ##[[KeyPgLbound LBound]]##
	- ##[[KeyPgUbound UBound]]##
	- ##[[KeyPgDots ... (Ellipsis)]]##
{{fbdoc item="back" value="CatPgVariables|Variable Declarations"}}
