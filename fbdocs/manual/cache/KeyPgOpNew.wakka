{{fbdoc item="title" value="Operator New"}}----
Opérateur qui alloue dynamiquement de la mémoire et construit une donnée du type spécifié

{{fbdoc item="syntax"}}##
	[[KeyPgDeclare declare]] [[KeyPgOperator operator]] **new** ( //size// [[KeyPgAs as]] [[KeyPgUinteger uinteger]] ) [[KeyPgAs as]] [[KeyPgAny any]] [[KeyPgPtr ptr]]
	[[KeyPgDeclare declare]] [[KeyPgOperator operator]] **new[]** ( //size// [[KeyPgAs as]] [[KeyPgUinteger uinteger]] ) [[KeyPgAs as]] [[KeyPgAny any]] [[KeyPgPtr ptr]]
##
{{fbdoc item="usage"}}##
	//result// = **New** //[[DataType datatype]]//
		//ou//
	//result// = **New** //[[DataType datatype]]// ( //initializers//, ... )
		//ou//
	//result// = **New** //[[DataType datatype]]//**[** //count// **]**
##
{{fbdoc item="param"}}
	##//size//## 
		Nombre d'octets à allouer.
	##//initializers//##
		Valeur(s) pour initialiser la variable.
	##//datatype//##
		Nom du type de donnée à créer.
	##//count//##
		Nombre exact d'éléments à allouer.

{{fbdoc item="ret"}}
	Un pointeur du type [[DataType datatype]] vers la nouvelle donnée allouée.

{{fbdoc item="desc"}}
	L'opérateur ##**New**## alloue dynamiquement de la mémoire et construit une donnée du type spécifié. Pour des types simples, comme les entiers, une valeur initiale peut être attribuée. Pour des types sans constructeur(s), des valeurs initiales peuvent être spécifiées pour chaque champ. Les types qui ont des constructeurs, ceux-ci peuvent être appelés par ##**New**##. Si aucun initialiseur n'est fourni, les valeurs par défaut seront attribuées pour ces types.

	##**New[]**## est la version pour les tableaux de l'opérateur ##**New**## et alloue suffisamment de mémoire pour le nombre d'objets spécifié.  Le constructeur par défaut pour le type sera utilisé pour initialiser chacun des éléments.

	Les objects créés avec ##**New**## doivent être libérés avec ##[[KeyPgOpDelete Delete]]##. La mémoire allouée avec ##**New[]**## doit être libérée avec ##**Delete[]**##, la version pour les tableaux de ##[[KeyPgOpDelete Delete]]##. Vous ne pouvez pas mélanger les deux versions de l'opérateur.

	Spécifier une valeur initiale ##[[KeyPgAny Any]]##, comme dans ##new datatype(any)## allouera de la mémoire pour le type, mais n'initialisera pas les données.  Ceci n'est valide que pour les types qui n'ont pas de constructeur.

	Spécifier une valeur initiale ##[[KeyPgAny Any]]##, comme dans ##new datatype[count]{any}## allouera de la mémoire pour le tableau, mais n'initialisera pas les données.  Ceci n'est valide que pour les types qui n'ont pas de constructeur.

{{fbdoc item="ex"}}
{{fbdoc item="filename" value="examples/manual/operator/new.bas"}}%%(freebasic)
type Rational
	as integer	numerator, denominator
end type

scope

	' Create and initialize a Rational, and store it's address.
	dim p as Rational ptr = new Rational(3, 4)

	print p->numerator & "/" & p->denominator

	' Destroy the rational and give its memory back to the system. 
	delete p

end scope

scope

	' Allocate memory for 100 integers, store the address of the first one.
	dim p as integer ptr = new integer[100]

	' Assign some values to the integers in the array.
	for i as integer = 0 to 99
		p[i] = i
	next

	' Free the entire integer array.
	delete[] p

end scope
%%
{{fbdoc item="lang"}}
	- Utilisable seulement dans le dialecte //[[CompilerOptlang -lang fb]]//.

{{fbdoc item="diff"}}
	- Nouveau pour ""FreeBASIC""

{{fbdoc item="see"}}
	- ##[[KeyPgOpDelete Delete]]##
	- ##[[KeyPgOpPlacementNew Placement New]]##

{{fbdoc item="back" value="CatPgOpMemory|Memory Operators"}}{{fbdoc item="back" value="CatPgOperators|Operators"}}