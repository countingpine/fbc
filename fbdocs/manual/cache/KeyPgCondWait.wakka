{{fbdoc item="title" value="CONDWAIT"}}----
Arrête l'exécution du "thread" courant jusqu'à ce qu'une condition devienne vraie

{{fbdoc item="syntax"}}##
	[[KeyPgDeclare declare]] [[KeyPgSub sub]] **Condwait** ( [[KeyPgByval byval]] //handle// [[KeyPgAs as]] [[KeyPgAny any]] [[KeyPgPtr ptr]], [[KeyPgByval byval]] //mutex// [[KeyPgAs as]] [[KeyPgAny any]] [[KeyPgPtr ptr]] )
##
{{fbdoc item="usage"}}##
	**Condwait** ( //handle//, //mutex// )
##
{{fbdoc item="param"}}
	##//handle//##
		Le "handle" d'une variable conditionnelle, ou le pointeur nul (0) en cas d'échec.
	##//mutex//##
		Le "mutex" associé à cette variable conditionnelle, qui doit être verrouillé lors de la vérification de la condition et l'appel à ##**CondWait**##

{{fbdoc item="desc"}}
	Fonction qui arrête le "thread" où elle est appelée jusqu'à ce qu'un autre thread ou ##[[KeyPgCondSignal Condsignal]]##s ou ##[[KeyPgCondBroadcast Condbroadcast]]## le "handle".

	Une fois que le conditionnel est ##[[KeyPgCondCreate Condcreate]]## et les "threads" démarrés, l'un (ou plusieurs) d'entre eux peut être fixé à ##**CondWait**## pour le conditionnel, ils seront arrêtés jusqu'à un autre "thread" ##[[KeyPgCondSignal Condsignal]]## que le "thread" en attente puisse redémarrer. ##[[KeyPgCondBroadcast Condbroadcast]]## peut être utilisé pour redémarrer tous les "threads" qui attendent le conditionnel. A la fin du programme ##[[KeyPgCondDestroy Conddestroy]]## doit être utilisé pour éviter les fuites de ressources dans le système d'exploitation.

	A l'appel de ##**CondWait**##, ##//mutex//## doit toujours être verrouillé.  Un déblocage "atomique" des mutex et une veille sur la variable conditionnelle auront lieu. Lorsque la variable de condition est signalée, ##//mutex//## est verrouillé à nouveau, puis l'exécution retournera au "thread" après l'appel de ##**CondWait**##.

{{fbdoc item="ex"}}
	Voir ##[[KeyPgCondCreate Condcreate]]##

{{fbdoc item="target"}}
	- **Condwait** n'est pas utilisable avec la version/cible DOS de FreeBASIC, parce que le "multithreading" n'est pas supporté par le noyau DOS, ni l'extension utilisée.
	- Sous Linux les "threads" sont toujours démarrés dans l'ordre de leur création, ceci n'est pas vrai sous Win32. C'est une question d'OS, pas de FreeBASIC. 

{{fbdoc item="lang"}}
	- "Threading" n'est pas utilisable dans le dialecte //[[CompilerOptlang -lang qb]]//

{{fbdoc item="diff"}}
	- Nouveau pour ""FreeBASIC""

{{fbdoc item="see"}}
	- ##[[KeyPgCondCreate Condcreate]]##
	- ##[[KeyPgCondDestroy Conddestroy]]##
	- ##[[KeyPgCondBroadcast Condbroadcast]]##
	- ##[[KeyPgCondSignal Condsignal]]##
	- ##[[KeyPgMutexCreate Mutexcreate]]##
	- ##[[KeyPgMutexLock Mutexlock]]##
	- ##[[KeyPgMutexUnlock Mutexunlock]]##
	- ##[[KeyPgThreadCreate Threadcreate]]##

{{fbdoc item="back" value="CatPgThreading|Threading Support Functions"}}

