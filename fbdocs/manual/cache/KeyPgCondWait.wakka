{{fbdoc item="title" value="CONDWAIT"}}----
Arr&ecirc;te l'ex&eacute;cution du "thread" courant jusqu'&agrave; ce qu'une condition devienne vraie

{{fbdoc item="syntax"}}##
	[[KeyPgDeclare declare]] [[KeyPgSub sub]] **Condwait** ( [[KeyPgByval byval]] //handle// [[KeyPgAs as]] [[KeyPgAny any]] [[KeyPgPtr ptr]], [[KeyPgByval byval]] //mutex// [[KeyPgAs as]] [[KeyPgAny any]] [[KeyPgPtr ptr]] )
##
{{fbdoc item="usage"}}##
	**Condwait** ( //handle//, //mutex// )
##
{{fbdoc item="param"}}
	##//handle//##
		Le "handle" d'une variable conditionnelle, ou le pointeur nul (0) en cas d'&eacute;chec.
	##//mutex//##
		Le "mutex" associ&eacute; &agrave; cette variable conditionnelle, qui doit &ecirc;tre verrouill&eacute; lors de la v&eacute;rification de la condition et l'appel &agrave; ##**CondWait**##

{{fbdoc item="desc"}}
	Fonction qui arr&ecirc;te le "thread" o&ugrave; elle est appel&eacute;e jusqu'&agrave; ce qu'un autre thread ou ##[[KeyPgCondSignal CondSignal]]##s ou ##[[KeyPgCondBroadcast CondBroadcast]]## le "handle".

	Une fois que le conditionnel est ##[[KeyPgCondCreate CondCreate]]## et les "threads" d&eacute;marr&eacute;s, l'un (ou plusieurs) d'entre eux peut &ecirc;tre fix&eacute; &agrave; ##**CondWait**## pour le conditionnel, ils seront arr&ecirc;t&eacute;s jusqu'&agrave; un autre "thread" ##[[KeyPgCondSignal CondSignal]]## que le "thread" en attente puisse red&eacute;marrer. ##[[KeyPgCondBroadcast CondBroadcast]]## peut &ecirc;tre utilis&eacute; pour red&eacute;marrer tous les "threads" qui attendent le conditionnel. A la fin du programme ##[[KeyPgCondDestroy CondDestroy]]## doit &ecirc;tre utilis&eacute; pour &eacute;viter les fuites de ressources dans le syst&egrave;me d'exploitation.

	A l'appel de ##**CondWait**##, ##//mutex//## doit toujours &ecirc;tre verrouill&eacute;.  Un d&eacute;blocage "atomique" des mutex et une veille sur la variable conditionnelle auront lieu. Lorsque la variable de condition est signal&eacute;e, ##//mutex//## est verrouill&eacute; &agrave; nouveau, puis l'ex&eacute;cution retournera au "thread" apr&egrave;s l'appel de ##**CondWait**##.

{{fbdoc item="ex"}}
	Voir ##[[KeyPgCondCreate CondCreate]]##

{{fbdoc item="target"}}
	- **Condwait** n'est pas utilisable avec la version/cible DOS de FreeBASIC, parce que le "multithreading" n'est pas support&eacute; par le noyau DOS, ni l'extension utilis&eacute;e.
	- Sous Linux les "threads" sont toujours d&eacute;marr&eacute;s dans l'ordre de leur cr&eacute;ation, ceci n'est pas vrai sous Win32. C'est une question d'OS, pas de FreeBasic. 

{{fbdoc item="lang"}}
	- "Threading" n'est pas utilisable dans le dialecte //[[CompilerOptlang -lang qb]]//

{{fbdoc item="diff"}}
	- Nouveau pour FreeBASIC

{{fbdoc item="see"}}
	- ##[[KeyPgCondCreate Condcreate]]##
	- ##[[KeyPgCondDestroy Conddestroy]]##
	- ##[[KeyPgCondBroadcast Condbroadcast]]##
	- ##[[KeyPgCondSignal Condsignal]]##
	- ##[[KeyPgMutexCreate Mutexcreate]]##
	- ##[[KeyPgMutexLock Mutexlock]]##
	- ##[[KeyPgMutexUnlock Mutexunlock]]##
	- ##[[KeyPgThreadCreate Threadcreate]]##

{{fbdoc item="back" value="CatPgThreading|Threading Support Functions"}}