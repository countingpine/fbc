{{fbdoc item="title" value="C Standard Library Functions"}}----
Ceci est une liste des prototypes de fonction dans la bibliothèque standard C dans l'ordre alphabétique et une liste des prototypes groupés par fonctionnalité. 

	**{{anchor name="ALPHA|Liste alphabétique"}}**
	**{{anchor name="BUFFER|Manipulation de tampon"}}**
	**{{anchor name="CTYPE|Classification et conversion des caractères"}}**
	**{{anchor name="DATA|Conversion de données"}}**
	**{{anchor name="DIRS|Manipulation de répertoire"}}**
	**{{anchor name="FILES|Manipulation de fichiers"}}**
	**{{anchor name="STREAM|Flux E/S"}}**
	**{{anchor name="LOLEVIO|E/S bas niveau"}}**
	**{{anchor name="MATH|Mathématiques"}}**
	**{{anchor name="MEMORY|Allocation mémoire"}}**
	**{{anchor name="PROCESS|Contrôle de processus"}}**
	**{{anchor name="SORTING|Recherche et Tri"}}**
	**{{anchor name="STRING|Manipulation de chaînes"}}**
	**{{anchor name="TIME|Temps"}}**

{{fbdoc item="desc"}}
	La colonne Commentaires contient une brève description de l'utilisation de la fonction. La liste n'est pas complète, La liste n'est pas complète, mais elle fournit des informations sur les grandes fonctions de la bibliothèque d'exécution C. Il convient, à tout le moins, d'indiquer quelles fonctions sont disponibles dans la bibliothèque standard C vous permettant de faire une enquête plus approfondie sur celle en votre possession.  Certaines des fonctions de la bibliothèque C documentées ailleurs peuvent ne pas être disponibles en FreeBASIC.  Vérifiez le fichier d'inclusion approprié pour plus d'informations. 

	**Note:** Les prototypes suivants ne sont pas des prototypes officiels FreeBASIC (voir les fichiers include), toutefois, ils vous donneront suffisamment d'informations pour utiliser correctement les fonctions. 

	La colonne Fichier à inclure contient le nom du fichier que vous devez inclure, en utilisant la directive ##[[KeyPgInclude #include]]## au début de votre programme. Si vous n'incluez pas le fichier d'inclusion approprié, soit le programme ne sera pas compilé, soit il sera apparemment compilé correctement, mais donnera des résultats incorrects lors de son exécution.  Tous les en-têtes d'exécution C sont situés dans le répertoire ##crt##; Par exemple, si l'en-tête spécifiée est ##math.bi##, utilisez ##include "crt/math.bi"## ou ##include "crt\math.bi"##, juste ##include "crt.bi"## inclura tous les autres.

	La colonne prototype contient les informations suivantes: 
		- Le nom de la fonction; 
		- Les paramètres requis pour la fonction entre parenthèses, avec le type de données des paramètres; 
		- Le type de données de la valeur retournée par la fonction. 

	Par exemple **##atoi(a as zstring ptr) as integer##** signifie que la fonction **##atoi##** retourne une valeur de type **integer** et nécessite un caractère **zstring ptr** comme argument. 

{{anchor name="ALPHA"}}{{fbdoc item="section" value="Liste alphabétique"}}

	{{table columns="4" cellpadding="1" cells="Nom;Prototype (avec paramètres);Fichier Include;Commentaires;abs_abs_(n as integer) as integerstdlib.biRetourne la valeur absolue (c.a.d la valeur positive)acos_acos_(a as double) as doublemath.biRetourne le cosinus inverse (angle en radians)asin_asin_(a as double) as doublemath.biRetourne le sinus inverse (angle en radians)atan_atan_(a as double) as doublemath.biRetourne la tangente inverse (angle en radians)atan2_atan2_(y as double, x as double) as doublemath.biRetourne la tangente inverse (passe l'opposé en y et l'adjacent en x)atoiatoi(s as zstring ptr) as integerstdlib.biConvertit une chaîne zstring de chiffres en un nombre de type entier.atofatof(s as zstring ptr) as doublestdlib.biConvertit une chaîne zstring de chiffres en un nombre de type double.calloccalloc(NumElts as integer, EltSiz as integer) as any ptrstdlib.biAlloue de la mémoire. Retourne un pointeur vers un tampon pour un tableau ayant NumElts éléments, chacun de EltSiz octets.ceilceil(d as double) as doublemath.biRetourne l'entier le plus proche au-dessus de la valeur passée.clearerrclearerr(s as FILE ptr)stdio.biEfface les indicateurs d'erreur sur un flux fichier (lecture ou écriture).cos_cos_(ar as double) as doublemath.biRetourne le cosinus d'un angle mesuré en radians.coshcosh(x as double) as doublemath.biRetourne le cosinus hyperbolique d'un angle mesuré en radians.divdiv(num as integer, denom as integer) as div_tstdlib.biRetourne le quotient et le reste d'une division dans une structure de type div_t.ecvtecvt(x as double) as zstring ptrmath.biConvertit un numéro en une zstring.exit_exit_(status as integer)stdlib.biQuitte le programme. Vide les tampons des fichiers ouverts et ferme tous les fichiers ouverts, et exécuter toutes les fonctions appelées par atexit().exp_exp_(a as double) as doublemath.biRetourne la valeur de e élevée à la puissance de l'argument (inverse du logarithme naturel).fabsfabs(d as double) as doublemath.biRetourne la valeur absolue (c.a.d la valeur positive) d'un type double.fclosefclose(s as FILE ptr) as FILE ptrstdio.biFerme un fichier. Retourne 0 en cas de succès sinon EOF.feoffeof(s as FILE ptr) as integerstdio.biRetourne la valeur indicateur fin de fichier. (0 si pas EOF). L'indicateur s'effacera lui-même mais il peut être réinitialisée par clearerr ().ferrorferror(s as FILE ptr) as integerstdio.biRetourne l'indicateur d'erreur pour un flux (0 si aucune erreur). L'indicateur d'erreur est réinitialisé par clearerr () ou rewind ().fflushfflush(s as FILE ptr) as integerstdio.biVide (c.a.d supprime) un flux (utilisez stdin pour vider le flux à partir du clavier). Retourne 0 en cas de succès.fgetcfgetc(s as FILE ptr) as integerstdio.biSaisie d'un seul caractère (en ASCII) à partir d'un flux (stdin pour le clavier).fgetposfgetpos(s as FILE ptr, c as fpos_t ptr) as integerstdio.biEnregistre la position du pointeur de fichier sur flux s à l'endroit pointé par c.fgetsfgets(b as zstring ptr, n as integer, s as FILE ptr) as zstring ptrstdio.biA partir du flux s lit jusqu'à n-1 caractères dans le tampon b.floorfloor(d as double) as doublemath.biRetourne l'entier le plus proche en dessous de la valeur passée.fmodfmod(x as double, y as double) as doublemath.biCalcule le reste de x divisé par y.fopenfopen(file as zstring ptr, mode as zstring ptr) as FILE ptrstdio.biOuvre un fichier. Passe le nom DOS du fichier et un code pour indiquer soit pour lire, écrire, ou ajouter. Les codes sont r pour lire, w pour écrire, + pour lire et écrire, a pour ajouter et b pour binaire.fprintffprintf(s as FILE ptr, fmt as zstring ptr, ...) as integerstdio.biEcrit sur le flux s autant d'items qu'il y a des signes % simples dans fmt qui ont d'arguments correspondant dans la liste.fputcfputc(c as integer, s as FILE ptr) as integerstdio.biSortie d'un unique caractère c sur le flux sfputsfputs(b as zstring ptr, s as FILE ptr) as integerstdio.biEnvoie le flux de caractères dans b vers le flux s, retourne 0 si l'opération échoue.freadfread(buf as any ptr, b as size_t, c as size_t, s as FILE ptr) as integerstdio.biLit c items de données de b octets de taille à partir du fichier s vers le tampon buf. Retourne le nombre d'items réellement lus.freefree(p as any ptr)stdlib.biLibère la mémoire allouée pour un pointeur p pour activer cette mémoire et la rendre utilisable.freopenfreopen(file as zstring ptr, mode as zstring ptr, s as FILE ptr) as FILE ptrstdio.biOuvre un fichier pour rediriger un flux. par ex. freopen("myfile", "w", stdout) redirigera la sortie standard vers le fichier ouvert "myfile".frexpfrexp(x as double, p as integer ptr) as doublemath.biCalcule une valeur m de sorte que x est égal à m fois 2 à une certaine puissance. p est un pointeur sur m.fscanffscanf(s as FILE ptr, fmt as zstring ptr, ...) as integerstdio.biLit à partir d'un flux s autant d'éléments qu'il y a de signes % dans fmt avec des pointeurs correspondants répertoriés.fseekfseek(s as FILE ptr, offset as integer, origin as integer) as integerstdio.biLocalise un pointeur de fichier. Avec l'origine 0, 1 ou 2 pour le début, de offset octets à la fin du flux.fsetposfsetpos(s as FILE ptr, p as fpos_t ptr) as integerstdio.biDéfinit le pointeur de fichier pour le flux s à la valeur pointée par p.ftellftell(s as FILE ptr) as longstdio.biLocalise la position du pointeur de fichier pour le flux sfwritefwrite(buf as any ptr, b as integer, c as integer, s as FILE ptr) as integerstdio.biEcrit c éléments de données de b octets de taille à partir du tampon buf dans le fichier s. Retourne le nombre d'éléments de données réellement écrits.getcgetc(s as FILE ptr) as integerstdio.biMacro pour la saisie d'un unique caractère (ASCII) à partir du flux transmis. (stdin pour le clavier)getchargetchar() as integerstdio.biSaisie d'un unique caractère à partir de l'entrée standardgetsgets(b as zstring ptr) as zstring ptrstdio.biLit un flux de caractères sur l'entrée standard jusqu'à ce qu'il rencontre \n ou EOF.hypothypot(x as double, y as double) as doublemath.biCalcule l'hypoténuse à partir des côtés x et y.isalnumisalnum(c as integer) as integerctype.biRetourne une valeur différente de zéro si c est alphabétique ou un chiffre.isalphaisalpha(c as integer) as integerctype.biRetourne une valeur différente de zéro si c est alphabétique.iscntrliscntrl(c as integer) as integerctype.biRetourne une valeur différente de zéro si c est un caractère de contrôle.isdigitisdigit(c as integer) as integerctype.biRetourne une valeur différente de zéro si c est un chiffre.isgraphisgraph(c as integer) as integerctype.biRetourne une valeur différente de zéro si c est alphabétique.islowerislower(c as integer) as integerctype.biRetourne une valeur différente de zéro si c est un caractère minuscule.isprintisprint(c as integer) as integerctype.biRetourne une valeur différente de zéro si c est affichable.ispunctispunct(c as integer) as integerctype.biRetourne une valeur différente de zéro si c est un caractère de ponctuation.isspaceisspace(c as integer) as integerctype.biRetourne une valeur différente de zéro si c est un espace.isupperisupper(c as integer) as integerctype.biRetourne une valeur différente de zéro si c est un caractère majuscule.isxdigitisxdigit(c as integer) as integerctype.biRetourne une valeur différente de zéro si c est un chiffre hexadécimal (0 à F ou f).ldexpldexp(x as double, n as integer) as doublemath.biRetourne le produit de x et 2 à la puissance n.ldivldiv(num as long, denom as long) as ldiv_tstdlib.biRetourne le quotient et le reste d'une division sous forme de structure de type ldiv_t.log_log_(a as double) as doublemath.biRetourne le logarithme naturel de l'argument.log10log10(a as double) as doublemath.biRetourne le logarithme à base 10 de l'argument.mallocmalloc(bytes as integer) as any ptrstdlib.biAlloue de la mémoire. Retourne un pointeur sur un tampon permettant le stockage pour la taille spécifiée.modfmodf(d as double, p as double ptr) as doublemath.biRetourne la partie décimale d'un nombre à virgule flottante d. p pointe vers la partie intégrale exprimée comme un nombre à virgule flottante.perrorperror(mess as zstring ptr)stdio.biAffiche sur le flux stderr un message transmis comme argument.powpow(x as double, y as double) as doublemath.biRetourne x à la puissance y.pow10pow10(x as double) as doublemath.biRetourne 10 à la puissance x (inverse de la fonction log10()).printfprintf(fmt as zstring ptr, ...) as integerstdio.biAffiche sur la sortie standard autant d'éléments que il y a de signes simples % dans fmt correspondant avec des arguments de la liste.putcputc(c as integer, s as FILE ptr) as integerstdio.biMacro pour la sortie du caractère unique c sur le flux s.putcharputchar(c as integer) as integerstdio.biMacro pour la sortie du caractère unique c sur la sortie standard.putsputs(b as zstring ptr) as integerstdio.biEnvoie le flux de caractères dans b sur la sortie standard, renvoie 0 si l'opération échoue.randrand() as integerstdlib.biRetourne un nombre pseudo-aléatoire. Une semence est nécessaire. Elle est fixée avec srand.reallocrealloc(p as any ptr, newsize as size_t) as any ptrstdlib.biAlloue de la mémoire. Retourne un pointeur vers un tampon pour un changement de taille de l'objet pointé par p.rewindrewind(s as FILE ptr)stdio.biEfface les indicateurs d'erreur sur un flux fichier (lecture ou écriture). Nécessaire avant de lire un fichier modifié.scanfscanf(fmt as zstring ptr,...) as integerstdio.biLit sur l'entrée standard autant d'éléments qu'il y a de signes % dans fmt correspondants avec les pointeurs répertoriés.sin_sin_(ar as double) as doublemath.biRetourne le sinus d'un angle mesuré en radians.sinhsinh(x as double) as doublemath.biRetourne le sinus hyperbolique d'un angle mesuré en radians.sprintfsprintf(p as zstring ptr, fmt as zstring ptr, ...) as integerstdio.biAffiche sur la zstring p autant d'éléments qu'il y a de signes % unique dans fmt correspondant aux arguments dans la liste.sqrtsqrt(a as double) as doublemath.biRetourne la racine carrée de la valeur passée. Erreur de domaine si la valeur est négative.srandsrand(seed as uinteger)stdlib.biDéfinit la semence pour un nombre aléatoire. Une semence possible est l'heure courante.sscanfsscanf(b as zstring ptr, fmt as zstring ptr, ...) as integerstdio.biLit à partir du tampon b autant d'éléments qu'il y a de signes % dans fmt correspondants aux pointeurs répertoriés.strcatstrcat(s1 as zstring ptr, s2 as zstring ptr) as zstring ptrstring.biConcatènation (ajoute à la fin) de la zstring s2 à s1.strchrstrchr(s as zstring ptr, c as integer) as zstring ptrstring.biRetourne un pointeur sur la première occurrence de c dans s ou NULL si elle échoue à en trouver une.strcmpstrcmp(s1 as zstring ptr, s2 as zstring ptr) as integerstring.biCompare la zstring s2 à s1. Retourne 0 ou la différence signée dans les valeurs ASCII du premier caractère qui ne correspond pas.strcpystrcpy(s1 as zstring ptr, s2 as zstring ptr) as zstring ptrstring.biCopie s2 dans s1.strcspnstrcspn(s1 as zstring ptr, s2 as zstring ptr) as integerstring.biRetourne le nombre de caractères rencontrés dans s1 avant de rencontrer l'un des caractères de s2.strerrorstrerror(n as integer) as zstring ptrstring.biRetourne un pointeur vers un message d'erreur système correspondant au numéro de l'erreur passée.strlenstrlen(s as zstring ptr) as integerstring.biRetourne le nombre d'octets dans la chaîne terminée par "nul" (zstring) pointée par s (ne compte pas terminateur nul).strncatstrncat(s1 as zstring ptr, s2 as zstring ptr, n as integer) as zstring ptrstring.biConcaténation (ajoute à la fin) de n octets de la zstring s2 à s1.strncmpstrncmp(s1 as zstring ptr, s2 as any ptr, n as integer) as integerstring.biCompare n octets de la zstring s2 aux octets correspondants de s1. Retourne 0 ou la différence signée dans les valeurs ASCII du premier caractère qui ne correspond pas.strncpystrncpy(s1 as zstring ptr, s2 as zstring ptr, n as integer) as zstring ptrstring.biCopie n octets de s2 dans s1.strpbrkstrpbrk(s1 as zstring ptr, s2 as zstring ptr) as zstring ptrstring.biRetourne un pointeur vers le premier caractère rencontré dans S1 qui est aussi dans S2.strrchrstrrchr(s as zstring ptr, c as integer) as zstring ptrstring.biRetourne un pointeur sur la dernière occurrence de c dans s ou NULL si elle échoue à en trouver un.strspnstrspn(s1 as zstring ptr, s2 as zstring ptr) as integerstring.biRetourne le nombre de caractères dans s1 rencontrés avant de rencontrer un caractère qui n'est pas dans S2.strstrstrstr(s1 as zstring ptr, s2 as zstring ptr) as zstring ptrstring.biTrouve l'emplacement de la zstring s2 dans s1 et renvoie un pointeur vers son premier caractère.strtodstrtod(s as zstring ptr, p as zstring ptr) as doublestdlib.biConvertit une zstring en double, à condition que la zstring soit écrite sous la forme d'un nombre.strtokstrtok(s1 as zstring ptr, s2 as zstring ptr) as zstring ptrstring.biRetourne des pointeurs vers des symboles (tokens) successifs en utilisant la zstring s1. Les symboles considérés comme des séparateurs sont énumérés dans S2.systemsystem(command as zstring ptr) as integerstdlib.biExécute, à partir d'un programme, une commande adressée au système d'exploitation écrit dans une zstring (par exemple DIR sur Windows et DOS et LS sous Linux).tan_tan_(ar as double) as doublemath.biRetourne la tangente d'un angle mesuré en radians.tanhtanh(x as double) as doublemath.biRetourne la tangente hyperbolique d'un angle mesuré en radians.tolowertolower(c as integer) as integerctype.biConvertit un caractère majuscule en une écriture minuscule (utilise le code ASCII).touppertoupper(c as integer) as integerctype.biConvertit un caractère minuscule en une écriture majnuscule (utilise le code ASCII).ungetcungetc(c as integer, s as FILE ptr) as integerstdio.biEnvoie à nouveau un caractère c dans le flux s, retourne EOF en cas d'échec. Ne renoie pas plus d'un caractère.

{{anchor name="BUFFER"}}{{fbdoc item="section" value="Manipulation de tampon"}}

	##**#include "crt/string.bi"**##

	{{table columns="2" cellpadding="1" cells="Prototype (avec paramètres);Commentaires;memchr(s as any ptr, c as integer, n as size_t) as any ptr;Recherche d'un caractère dans un tampon.;memcmp(s1 as any ptr, s2 as any ptr, n as size_t) as integer;Comparer deux tampons.;memcpy(dest as any ptr, src as any ptr, n as size_t) as any ptr;Copier un tampon dans un autre.;memmove(dest as any ptr, src as any ptr, n as size_t) as any ptr;Déplacer un certain nombre d'octets d'un tampon à un autre.;memset(s as any ptr, c as integer, n as size_t) as any ptr;Définir tous les octets d'un tampon à un caractère donné."}}

{{anchor name="CTYPE"}}{{fbdoc item="section" value="Classification et conversion des caractères"}}

	##**#include "crt/ctype.bi"**##

	{{table columns="2" cellpadding="1" cells="Prototype (avec paramètres);Commentaires;isalnum(c as integer) as integer;Vrai si c est alphanumérique.;isalpha(c as integer) as integer;Vrai si c est une lettre.;isascii(c as integer) as integer;Vrai si  c est ASCII .;iscntrl(c as integer) as integer;Vrai si c est un caractère de contrôle.;isdigit(c as integer) as integer;Vrai si c est un chiffre décimal.;isgraph(c as integer) as integer;Vrai si c est un caractère graphique.;islower(c as integer) as integer;Vrai si c est une lettre minuscule.;isprint(c as integer) as integer;Vrai si c est un caractère imprimable.;ispunct(c as integer) as integer;Vrai si c est un caractère de ponctuation.;isspace(c as integer) as integer;Vrai si c est un caractère d'espace.;isupper(c as integer) as integer;Vrai si c est une lettre majuscule.;isxdigit(c as integer) as integer;Vrai si c est un chiffre hexadécimal.;toascii(c as integer) as integer;Convertir c en ASCII.;tolower(c as integer) as integer;Convertir c en minuscules.;toupper(c as integer) as integer;Convertir c en majuscules."}}

{{anchor name="DATA"}}{{fbdoc item="section" value="Conversion de données"}}

	##**#include "crt/stdlib.bi"**##

	{{table columns="2" cellpadding="1" cells="Prototype (avec paramètres);Commentaires;atof(string1 as zstring ptr) as double;Convertir zstring en valeur à virgule flottante.;atoi(string1 as zstring ptr) as integer;Convertir zstring en entier.;atol(string1 as zstring ptr) as integer;Convertir zstring en entier long.;itoa(value as integer, zstring as zstring ptr, radix as integer) as zstring ptr;Convertir un entier en zstring en utilisant la base (radix).;ltoa(value as long, zstring as zstring ptr, radix as integer) as zstring ptr;Convertir entier long en zstring dans la base (radix).;strtod(string1 as zstring ptr, endptr as zstring ptr) as double;Convertir zstring en valeur à virgule flottante.;strtol(string1 as zstring ptr, endptr as zstring ptr, radix as integer) as long;Convertir zstring en entier long en utilisant la base (radix).;strtoul(string1 as zstring ptr, endptr as zstring ptr, radix as integer) as ulong;Convertir zstring en long non-signé."}}

{{anchor name="DIRS"}}{{fbdoc item="section" value="Manipulation de répertoire"}}

	##**#include "crt/io.bi"**##

	{{table columns="2" cellpadding="1" cells="Prototype (avec paramètres);Commentaires;_chdir(path as zstring ptr) as integer;Changer le répertoire courant vers chemin donné.;_getcwd(path as zstring ptr, numchars as integer) as zstring ptr;Retourne le nom du répertoire de travail courant.;_mkdir(path as zstring ptr) as integer;Créer un répertoire en utilisant le nom de chemin d'accès donné.;_rmdir(path as zstring ptr) as integer;Supprimer un répertoire spécifié."}}

{{anchor name="FILES"}}{{fbdoc item="section" value="Manipulation de fichiers"}}

	##**#include "crt/sys/stat.bi"**##
	##**#include "crt/io.bi"**##

	{{table columns="2" cellpadding="1" cells="Prototype (avec paramètres);Commentaires;chmod(path as zstring ptr, pmode as integer) as integer;Modifie les paramètres de permissions d'un fichier.;fstat(handle as integer, buffer as type stat ptr) as integer;Obtient des informations d'état du fichier.;remove(path as zstring ptr) as integer;Supprimer un fichier nommé.;rename_(oldname as zstring ptr, newname as zstring ptr) as integer;Renommer un fichier.;stat(path as zstring ptr, buffer as type stat ptr) as integer;Obtenir des informations d'état du fichier nommé.;umask(pmode as uinteger) as uinteger;Définir le masque de permissions du fichier."}}

{{anchor name="STREAM"}}{{fbdoc item="section" value="Flux E/S"}}

	##**#include "crt/stdio.bi"**##

	{{table columns="2" cellpadding="1" cells="Prototype (avec paramètres);Commentaires;clearerr(file_pointer as FILE ptr);Efface l'indicateur d'erreur de flux,;fclose(file_pointer as FILE ptr) as integer;Fermer un fichier.;feof(file_pointer as FILE ptr) as integer;Check if end of file occurred on a stream.;ferror(file_pointer as FILE ptr) as integer;Vérifier si une erreur s'est produite lors d'une E/S fichier.;fflush(file_pointer as FILE ptr) as integer;Écrire (vider) un tampon vers le fichier.;fgetc(file_pointer as FILE ptr) as integer;Obtenir un caractère à partir d'un flux.;fgetpos(file_pointer as FILE ptr, fpos_t current_pos) as integer;Obtenir la position courante dans un flux.;fgets(string1 as zstring ptr, maxchar as integer, file_pointer as FILE ptr) as zstring ptr;Lire une zstring à partir d'un fichier.;fopen(filename as zstring ptr, access_mode as zstring ptr) as FILE ptr;Ouvrir un fichier pour tampon E/S.;fprintf(file_pointer as FILE ptr, format_string as zstring ptr, args) as integer;Écrire la sortie formatée dans un fichier.;fputc(c as integer, file_pointer as FILE ptr) as integer;Écrire un caractère vers un flux.;fputchar(c as integer) as integer;Écrire un caractère vers stdout.;fputs(string1 as zstring ptr, file_pointer as FILE ptr) as integer;Ecrire une zstring vers un flux.;fread(buffer as zstring ptr, size as size_t count as size_t, file_pointer as FILE ptr) as size_t;Lire des données non formatées d'un flux dans un un tampon.;freopen(filename as zstring ptr, access as zstring ptr mode, file_pointer as FILE ptr) as FILE ptr;Réaffecter un pointeur fichier vers un autre fichier.;fscanf(file_pointer as FILE ptr, format as zstring ptr zstring, args) as integer;Lire une entrée formatée à partir d'un flux.;fseek(file_pointer as FILE ptr, offset as long, origin as integer) as integer;Définir la position courante dans fichier vers un nouvel emplacement.;fsetpos(file_pointer as FILE ptr, current_pos as fpos_t) as integer;Définir la position courante dans le fichier vers un nouvel emplacement.;ftell(file_pointer as FILE ptr) as long;Obtenir l'emplacement courant dans le dossier.;fwrite(buffer as zstring ptr, size as size_t, count as size_t file_pointer as FILE ptr) as size_t;Écrire des données non formatées à partir d'un tampon vers un flux.;getc(file_pointer as FILE ptr) as integer;Lire un caractère à partir d'un flux.;getchar() as integer;Lire un caractère à partir de stdin.;gets(buffer as zstring ptr) as zstring ptr;Lire une ligne depuis stdin vers un tampon.;printf(format as zstring ptr _string, args) as integer;Écrire une sortie formatée vers stdout.;putc(c as integer, file_pointer as FILE ptr) as integer;Écrire un caractère vers un flux.;putchar(c as integer) as integer;Écrire un caractère vers stdout.;puts(string1 as zstring ptr) as integer;Ecrire une zstring vers stdout.;rewind(file_pointer as FILE ptr);Rembobiner un fichier.;scanf(format_string as zstring ptr, args) as integer;Lire une entrée formatée de stdin.;setbuf(file_pointer as FILE ptr, buffer as zstring ptr);Mettre en place un nouveau tampon pour le flux.;setvbuf(file_pointer as FILE ptr, buffer as zstring ptr, buf_type as integer, buf as size_t size) as integer;Mettre en place un nouveau tampon et contrôler le niveau de mise en mémoire tampon sur un flux.;sprintf(string1 as zstring ptr, format_string as zstring ptr, args) as integer;Écrire une sortie formatée vers une zstring.;sscanf(buffer as zstring ptr, format_string as zstring ptr, args) as integer;Lire une zstring à partir d'une entrée formatée.;tmpfile() as FILE ptr;Ouvrir un fichier temporaire.;tmpnam(file_name as zstring ptr) as zstring ptr;Obtenir le nom d'un fichier temporaire.;ungetc(c as integer, file_pointer as FILE ptr) as integer;Repousser un caractère dans un tampon de flux"}}

{{anchor name="LOLEVIO"}}{{fbdoc item="section" value="E/S bas niveau"}}

	##**#include "crt/io.bi"**##

	Jusqu'à présent, Win32 seulement, se connecte à MSVCRT.DLL (en-têtes manquantes pour d'autres plates-formes)

	{{table columns="2" cellpadding="1" cells="Prototype (avec paramètres);Commentaires;_close(handle as integer) as integer;Fermer un fichier ouvert pour E/S non-tamponnée.;_creat(filename as zstring ptr, pmode as integer) as integer;Créer un nouveau fichier avec la permission spécifiée.;_eof(handle as integer) as integer;Vérifier la fin du fichier.;_lseek(handle as integer, offset as long, origin as integer) as long;Aller à une position spécifique dans un fichier.;_open(filename as zstring ptr, oflag as integer, pmode as uinteger) as integer;Ouvrir un fichier à faible niveau E/S.;_read(handle as integer, buffer as zstring ptr, length as uinteger) as integer;Lire des données binaires à partir d'un fichier dans un tampon.;_write(handle as integer, buffer as zstring ptr, count as uinteger) as integer;Écrire des données binaires à partir d'un tampon dans un fichier."}}

{{anchor name="MATH"}}{{fbdoc item="section" value="Mathématiques"}}

	##**#include "crt/math.bi"**##

	{{table columns="2" cellpadding="1" cells="Prototype (avec paramètres);Commentaires;abs_(n as integer) as integer;Récupère la valeur absolue d'un entier.;acos_(x as double) as double;Calcule arc cosinus de x.;asin_(x as double) as double;Calcule arc sinus de x.;atan_(x as double) as double;Calcule arc tangente de x.;atan2_(y as double, x as double) as double;Calcule arc tangente de y/x.;ceil(x as double) as double;Obtient plus petite valeur entière qui dépasse x.;cos_(x as double) as double;Calcule cosinus de l'angle en radians.;cosh(x as double) as double;Calcule le cosinus hyperbolique de x.;div(number as integer, denom as integer) as div_t;Diviser un entier par un autre.;exp_(x as double) as double;Calcule exponentielle de x.;fabs(x as double) as double;Calcule la valeur absolue de x.;floor(x as double) as double;Obtient plus grande valeur entière inférieure à x.;fmod(x as double, y as double) as double;Diviser x par y avec un quotient entier et retourne le reste.;frexp(x as double, expptr as integer ptr) as double;Décompose x en mantisse et exposant.;labs(n as long) as long;Trouver valeur absolue d'un nombre entier long n.;ldexp(x as double, exp as integer) as double;Reconstruit x à partir de la mantisse et d'un exposant de deux.;ldiv(number as long, denom as long) as ldiv_t;Diviser un entier long par un autre.;log_(x as double) as double;Calcule log(x).;log10(x as double) as double;Calcule log base 10 de x.;modf(x as double, intptr as double ptr) as double;Décompose x en partie entière et partie décimale.;pow(x as double, y as double) as double;Calcule x élevé à la puissance y.;rand() as integer;Obtient un entier aléatoire compris entre 0 et 32.;random(max_num as integer) as integer;Obtenir un entier aléatoire compris entre 0 et max_num.;randomize();Définir une "graine" aléatoire pour le générateur de nombres aléatoires.;sin_(x as double) as double;Calcule le sinus de l'angle en radians.;sinh(x as double) as double;Calcule le sinus hyperbolique de x.;sqrt(x as double) as double;Calcule la racine carrée de x.;srand(seed as uinteger);Définir une nouvelle graine pour le générateur de nombre aléatoire (rand).;tan_(x as double) as double;Calcule la tangente de l'angle en radians.;tanh(x as double) as double;Calcule la tangente hyperbolique de x."}}

{{anchor name="MEMORY"}}{{fbdoc item="section" value="Allocation mémoire"}}

	##**#include "crt/stdlib.bi"**##

	{{table columns="2" cellpadding="1" cells="Prototype (avec paramètres);Commentaires;calloc(num as size_t elems, elem_size as size_t) as any ptr;Allouer un tableau et initialiser tous ses éléments à zéro.;free(mem_address as any ptr);Libérer un bloc de mémoire.;malloc(num as size_t bytes) as any ptr;Allouer un bloc de mémoire.;realloc(mem_address as any ptr, newsize as size_t) as any ptr;Réaffecter (ajuster la taille) un bloc de mémoire."}}

{{anchor name="PROCESS"}}{{fbdoc item="section" value="Contrôle de processus"}}

	##**#include "crt/stdlib.bi"**##

	{{table columns="2" cellpadding="1" cells="Prototype (avec paramètres);Commentaires;abort();Abandonner un processus.;execl(path as zstring ptr, arg0 as zstring ptr, arg1 as zstring ptr,..., NULL) as integer;Lancer un processus fils (passe la ligne de commande).;execlp(path as zstring ptr, arg0 as zstring ptr, arg1 as zstring ptr,..., NULL) as integer;Lancer enfant (utilisation de PATH, passer la ligne de commande).;execv(path as zstring ptr, argv as zstring ptr) as integer;Lancer enfant (passe vecteur argument).;execvp(path as zstring ptr, argv as zstring ptr) as integer;Lancement enfant (utiliser PATH, passer vecteur d'argument).;exit_(status as integer);Terminer un processus après nettoyage de tous les tampons.;getenv(varname as zstring ptr) as zstring ptr;Récupère la définition de la variable d'environnement,;perror(string1 as zstring ptr);Affiche un message d'erreur correspondant à la dernière erreur système.;putenv(envstring as zstring ptr) as integer;Insérer une nouvelle définition dans la table d' environnement.;raise(signum as integer) as integer;Générer un signal C (exception).;system_(string1 as zstring ptr) as integer; Exécuter une commande du système d'exploitation résident."}}

{{anchor name="SORTING"}}{{fbdoc item="section" value="Recherche et Tri"}}

	##**#include "crt/stdlib.bi"**##
			    **Note:** La fonction de rappel //compare// requise par ##//bsearch//## et ##//qsort//## doit être déclarée comme ##[[KeyPgCdecl cdecl]]##. Elle doit retourner une valeur <0 si son premier argument doit être situé avant le second dans le tableau trié, >0 si le premier argument doit être placé après le deuxième, et à zéro si leurs positions relatives sont indifférents (valeurs égales).  
			
	{{table columns="2" cellpadding="1" cells="Prototype (avec paramètres);Commentaires;bsearch(key as any ptr, base as any ptr, num as size_t, width as size_t, compare as function(elem1 as any ptr, elem2 as any ptr) as integer) as any ptr;Effectuer une recherche binaire.;qsort(base as any ptr, num as size_t, width as size_t, compare as function(elem1 as any ptr, elem2 as any ptr) as integer);Utilisez l'algorithme de tri rapide pour trier un tableau."}}

{{anchor name="STRING"}}{{fbdoc item="section" value="Manipulation de chaînes"}}

	##**#include "crt/string.bi"**##

	{{table columns="2" cellpadding="1" cells="Prototype (avec paramètres);Commentaires;stpcpy(dest as zstring ptr, src as zstring ptr) as zstring ptr;Copier une zstring dans une autre.;strcmp(string1 as zstring ptr, string2 as zstring ptr) as integer;Comparer string1 et string2 pour déterminer l'ordre alphabétique.;strcpy(string1 as zstring ptr, string2 as zstring ptr) as zstring ptr;Copier string2 vers string1.;strerror(errnum as integer) as zstring ptr;Obtenir le message d'erreur correspondant au numéro d'erreur spécifié.;strlen(string1 as zstring ptr) as integer;Déterminer la longueur d'une zstring.;strncat(string1 as zstring ptr, string2 as zstring ptr, n as size_t) as zstring ptr;Ajoute (Append) n caractères de string2 vers string1.;strncmp(string1 as zstring ptr, string2 as zstring ptr, n as size_t) as integer;Comparer les n premiers caractères de deux chaînes.;strncpy(string1 as zstring ptr, string2 as zstring ptr, n as size_t) as zstring ptr;Copier les n premiers caractères de string2 vers string1.;strnset(string1 as zstring ptr, c as integer, size _t n) as zstring ptr;Mettre les n premiers caractères de zstring à c.;strrchr(string1 as zstring ptr, c as integer) as zstring ptr;Trouver la dernière occurrence du caractère c dans zstring."}}

{{anchor name="TIME"}}{{fbdoc item="section" value="Temps"}}

	##**#include "crt/time.bi"**##

	{{table columns="2" cellpadding="1" cells="Prototype (avec paramètres);Commentaires;asctime(time as type tm ptr) as zstring ptr;Convertir le temps de type tm en zstring.;clock() as clock_t;Obtenir le temps processeur écoulé en tops d'horloge.;ctime(time as time_t ptr) as zstring ptr;Convertir le temps binaire en zstring.;difftime(time_t time2, time_t time1) as double;Calculer la différence entre deux temps en secondes.;gmtime(time as time_t ptr) as type tm ptr;Obtenir Greenwich Mean Time (GMT) dans une structure tm.;localtime(time as time_t ptr) as type tm ptr;Obtenir l'heure locale dans une structure tm.;time_(timeptr as time_t ptr) as time_t;Retourne l'heure actuelle en secondes écoulées depuis 0 heures GMT 1/1/70."}}

{{fbdoc item="see"}}
	- ##[[KeyPgInclude #include]]##

{{fbdoc item="back" value="CatPgProgrammer|Programmer's Guide"}}{{fbdoc item="back" value="DocToc|Table of Contents"}}