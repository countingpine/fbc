{{fbdoc item="title" value="C Standard Library Functions"}}----
Ceci est une liste des prototypes de fonction dans la biblioth&egrave;que standard C dans l'ordre alphab&eacute;tique et une liste des prototypes group&eacute;s par fonctionnalit&eacute;. 

	**[[#ALPHA">Liste alphab&eacute;tique]]**
	**[[#BUFFER">Manipulation de tampon]]**
	**[[#CTYPE">Classification et conversion des caract&egrave;res]]**
	**[[#DATA">Conversion de donn&eacute;es]]**
	**[[#DIRS">Manipulation de r&eacute;pertoire]]**
	**[[#FILES">Manipulation de fichiers]]**
	**[[#STREAM">Flux E/S]]**
	**[[#LOLEVIO">E/S bas niveau]]**
	**[[#MATH">Math&eacute;matiques]]**
	**[[#MEMORY">Allocation m&eacute;moire]]**
	**[[#PROCESS">Contr&ocirc;le de processus]]**
	**[[#SORTING">Recherche et Tri]]**
	**[[#STRING">Manipulation de cha&icirc;nes]]**
	**[[#TIME">Temps]]**

{{fbdoc item="desc"}}
	La colonne Commentaires contient une br&egrave;ve description de l'utilisation de la fonction. La liste n'est pas compl&egrave;te, La liste n'est pas compl&egrave;te, mais elle fournit des informations sur les grandes fonctions de la biblioth&egrave;que d'ex&eacute;cution C. Il convient, &agrave; tout le moins, d'indiquer quelles fonctions sont disponibles dans la biblioth&egrave;que standard C vous permettant de faire une enqu&ecirc;te plus approfondie sur celle en votre possession.  Certaines des fonctions de la biblioth&egrave;que C document&eacute;es ailleurs peuvent ne pas &ecirc;tre disponibles en FreeBasic.  V&eacute;rifiez le fichier d'inclusion appropri&eacute; pour plus d'informations. 

	**Note:** Les prototypes suivants ne sont pas des prototypes officiels FreeBASIC (voir les fichiers include), toutefois, ils vous donneront suffisamment d'informations pour utiliser correctement les fonctions. 

	La colonne Fichier &agrave; inclure contient le nom du fichier que vous devez inclure, en utilisant la directive ##[[KeyPgInclude #include]]## au d&eacute;but de votre programme. Si vous n'incluez pas le fichier d'inclusion appropri&eacute;, soit le programme ne sera pas compil&eacute;, soit il sera apparemment compil&eacute; correctement, mais donnera des r&eacute;sultats incorrects lors de son ex&eacute;cution.  Tous les en-t&ecirc;tes d'ex&eacute;cution C sont situ&eacute;s dans le r&eacute;pertoire ##crt##; Par exemple, si l'en-t&ecirc;te sp&eacute;cifi&eacute;e est ##math.bi##, utilisez ##include "crt/math.bi"## ou ##include "crt\math.bi"##, juste ##include "crt.bi"## inclura tous les autres.

	La colonne prototype contient les informations suivantes: 
		- Le nom de la fonction; 
		- Les param&egrave;tres requis pour la fonction entre parenth&egrave;ses, avec le type de donn&eacute;es des param&egrave;tres; 
		- Le type de donn&eacute;es de la valeur retourn&eacute;e par la fonction. 

	Par exemple **##atoi(a as zstring ptr) as integer##** signifie que la fonction **##atoi##** retourne une valeur de type **integer** et n&eacute;cessite un caract&egrave;re **zstring ptr** comme argument. 

<a name="ALPHA"></a>

	{{fbdoc item="section" value="Liste alphab&eacute;tique

{{table columns="" cellpadding="2" cells="<table>Nom;Prototype (avec param&egravetres);Fichier Include;Commentaires;abs_;abs_(n as integer) as integer;stdlib.bi;Retourne la valeur absolue (c.a.d la valeur positive);acos_;acos_(a as double) as double;math.bi;Retourne le cosinus inverse (angle en radians);asin_;asin_(a as double) as double;math.bi;Retourne le sinus inverse (angle en radians);atan_;atan_(a as double) as double;math.bi;Retourne la tangente inverse (angle en radians);atan2_;atan2_(y as double, x as double) as double;math.bi;Retourne la tangente inverse (passe l'oppos&eacute; en y et l'adjacent en x);atoi;atoi(s as zstring ptr) as integer;stdlib.bi;Convertit une cha&icirc;ne zstring de chiffres en un nombre de type entier.;atof;atof(s as zstring ptr) as double;stdlib.bi;Convertit une cha&icirc;ne zstring de chiffres en un nombre de type double.;calloc;calloc(NumElts as integer, EltSiz as integer) as any ptr;stdlib.bi;Alloue de la m&eacute;moire. Retourne un pointeur vers un tampon pour un tableau ayant NumElts &eacute;l&eacute;ments, chacun de EltSiz octets.;ceil;ceil(d as double) as double;math.bi;Retourne l'entier le plus proche au-dessus de la valeur pass&eacute;e.;clearerr;clearerr(s as FILE ptr);stdio.bi;Efface les indicateurs d'erreur sur un flux fichier (lecture ou &eacute;criture).;cos_;cos_(ar as double) as double;math.bi;Retourne le cosinus d'un angle mesur&eacute; en radians.;cosh;cosh(x as double) as double;math.bi;Retourne le cosinus hyperbolique d'un angle mesur&eacute; en radians.;div;div(num as integer, denom as integer) as div_t;stdlib.bi;Retourne le quotient et le reste d'une division dans une structure de type div_t.;ecvt;ecvt(x as double) as zstring ptr;math.bi;Convertit un num&eacute;ro en une zstring.;exit_;exit_(status as integer);stdlib.bi;Quitte le programme. Vide les tampons des fichiers ouverts et ferme tous les fichiers ouverts, et ex&eacute;cuter toutes les fonctions appel&eacute;es par atexit().;exp_;exp_(a as double) as double;math.bi;Retourne la valeur de e &eacute;lev&eacute;e &agrave; la puissance de l'argument (inverse du logarithme naturel).;fabs;fabs(d as double) as double;math.bi;Retourne la valeur absolue (c.a.d la valeur positive) d'un type double.;fclose;fclose(s as FILE ptr) as FILE ptr;stdio.bi;Ferme un fichier. Retourne 0 en cas de succ&egrave;s sinon EOF.;feof;feof(s as FILE ptr) as integer;stdio.bi;Retourne la valeur indicateur fin de fichier. (0 si pas EOF). L'indicateur s'effacera lui-m&ecirc;me mais il peut &ecirc;tre r&eacute;initialis&eacute;e par clearerr ().;ferror;ferror(s as FILE ptr) as integer;stdio.bi;Retourne l'indicateur d'erreur pour un flux (0 si aucune erreur). L'indicateur d'erreur est r&eacute;initialis&eacute; par clearerr () ou rewind ().;fflush;fflush(s as FILE ptr) as integer;stdio.bi;Vide (c.a.d supprime) un flux (utilisez stdin pour vider le flux &agrave; partir du clavier). Retourne 0 en cas de succ&egrave;s.;fgetc;fgetc(s as FILE ptr) as integer;stdio.bi;Saisie d'un seul caract&egrave;re (en ASCII) &agrave; partir d'un flux (stdin pour le clavier).;fgetpos;fgetpos(s as FILE ptr, c as fpos_t ptr) as integer;stdio.bi;Enregistre la position du pointeur de fichier sur flux s &agrave; l'endroit point&eacute; par c.;fgets;fgets(b as zstring ptr, n as integer, s as FILE ptr) as zstring ptr;stdio.bi;A partir du flux s lit jusqu'&agrave; n-1 caract&egrave;res dans le tampon b.;floor;floor(d as double) as double;math.bi;Retourne l'entier le plus proche en dessous de la valeur pass&eacute;e.;fmod;fmod(x as double, y as double) as double;math.bi;Calcule le reste de x divis&eacute; par y.;fopen;fopen(file as zstring ptr, mode as zstring ptr) as FILE ptr;stdio.bi;Ouvre un fichier. Passe le nom DOS du fichier et un code pour indiquer soit pour lire, &eacute;crire, ou ajouter. Les codes sont r pour lire, w pour &eacute;crire, + pour lire et &eacute;crire, a pour ajouter et b pour binaire.;fprintf;fprintf(s as FILE ptr, fmt as zstring ptr, ...) as integer;stdio.bi;Ecrit sur le flux s autant d'items qu'il y a des signes % simples dans fmt qui ont d'arguments correspondant dans la liste.;fputc;fputc(c as integer, s as FILE ptr) as integer;stdio.bi;Sortie d'un unique caract&egrave;re c sur le flux s;fputs;fputs(b as zstring ptr, s as FILE ptr) as integer;stdio.bi;Envoie le flux de caract&egrave;res dans b vers le flux s, retourne 0 si l'op&eacute;ration &eacute;choue.;fread;fread(buf as any ptr, b as size_t, c as size_t, s as FILE ptr) as integer;stdio.bi;Lit c items de donn&eacute;es de b octets de taille &agrave; partir du fichier s vers le tampon buf. Retourne le nombre d'items r&eacute;ellement lus.;free;free(p as any ptr);stdlib.bi;Lib&egrave;re la m&eacute;moire allou&eacute;e pour un pointeur p pour activer cette m&eacute;moire et la rendre utilisable.;freopen;freopen(file as zstring ptr, mode as zstring ptr, s as FILE ptr) as FILE ptr;stdio.bi;Ouvre un fichier pour rediriger un flux. par ex. freopen("myfile", "w", stdout) redirigera la sortie standard vers le fichier ouvert "myfile".;frexp;frexp(x as double, p as integer ptr) as double;math.bi;Calcule une valeur m de sorte que x est &eacute;gal &agrave; m fois 2 &agrave; une certaine puissance. p est un pointeur sur m.;fscanf;fscanf(s as FILE ptr, fmt as zstring ptr, ...) as integer;stdio.bi;Lit &agrave; partir d'un flux s autant d'&eacute;l&eacute;ments qu'il y a de signes % dans fmt avec des pointeurs correspondants r&eacute;pertori&eacute;s.;fseek;fseek(s as FILE ptr, offset as integer, origin as integer) as integer;stdio.bi;Localise un pointeur de fichier. Avec l'origine 0, 1 ou 2 pour le d&eacute;but, de offset octets &agrave; la fin du flux.;fsetpos;fsetpos(s as FILE ptr, p as fpos_t ptr) as integer;stdio.bi;D&eacute;finit le pointeur de fichier pour le flux s &agrave; la valeur point&eacute;e par p.;ftell;ftell(s as FILE ptr) as long;stdio.bi;Localise la position du pointeur de fichier pour le flux s;fwrite;fwrite(buf as any ptr, b as integer, c as integer, s as FILE ptr) as integer;stdio.bi;Ecrit c &eacute;l&eacute;ments de donn&eacute;es de b octets de taille &agrave; partir du tampon buf dans le fichier s. Retourne le nombre d'&eacute;l&eacute;ments de donn&eacute;es r&eacute;ellement &eacute;crits.;getc;getc(s as FILE ptr) as integer;stdio.bi;Macro pour la saisie d'un unique caract&egrave;re (ASCII) &agrave; partir du flux transmis. (stdin pour le clavier);getchar;getchar() as integer;stdio.bi;Saisie d'un unique caract&egrave;re &agrave; partir de l'entr&eacute;e standard;gets;gets(b as zstring ptr) as zstring ptr;stdio.bi;Lit un flux de caract&egrave;res sur l'entr&eacute;e standard jusqu'&agrave; ce qu'il rencontre \n ou EOF.;hypot;hypot(x as double, y as double) as double;math.bi;Calcule l'hypot&eacute;nuse &agrave; partir des c&ocirc;t&eacute;s x et y.;isalnum;isalnum(c as integer) as integer;ctype.bi;Retourne une valeur diff&eacute;rente de z&eacute;ro si c est alphab&eacute;tique ou un chiffre.;isalpha;isalpha(c as integer) as integer;ctype.bi;Retourne une valeur diff&eacute;rente de z&eacute;ro si c est alphab&eacute;tique.;iscntrl;iscntrl(c as integer) as integer;ctype.bi;Retourne une valeur diff&eacute;rente de z&eacute;ro si c est un caract&egrave;re de contr&ocirc;le.;isdigit;isdigit(c as integer) as integer;ctype.bi;Retourne une valeur diff&eacute;rente de z&eacute;ro si c est un chiffre.;isgraph;isgraph(c as integer) as integer;ctype.bi;Retourne une valeur diff&eacute;rente de z&eacute;ro si c est alphab&eacute;tique.;islower;islower(c as integer) as integer;ctype.bi;Retourne une valeur diff&eacute;rente de z&eacute;ro si c est un caract&egrave;re minuscule.;isprint;isprint(c as integer) as integer;ctype.bi;Retourne une valeur diff&eacute;rente de z&eacute;ro si c est affichable.;ispunct;ispunct(c as integer) as integer;ctype.bi;Retourne une valeur diff&eacute;rente de z&eacute;ro si c est un caract&egrave;re de ponctuation.;isspace;isspace(c as integer) as integer;ctype.bi;Retourne une valeur diff&eacute;rente de z&eacute;ro si c est un espace.;isupper;isupper(c as integer) as integer;ctype.bi;Retourne une valeur diff&eacute;rente de z&eacute;ro si c est un caract&egrave;re majuscule.;isxdigit;isxdigit(c as integer) as integer;ctype.bi;Retourne une valeur diff&eacute;rente de z&eacute;ro si c est un chiffre hexad&eacute;cimal (0 &agrave; F ou f).;ldexp;ldexp(x as double, n as integer) as double;math.bi;Retourne le produit de x et 2 &agrave; la puissance n.;ldiv;ldiv(num as long, denom as long) as ldiv_t;stdlib.bi;Retourne le quotient et le reste d'une division sous forme de structure de type ldiv_t.;log_;log_(a as double) as double;math.bi;Retourne le logarithme naturel de l'argument.;log10;log10(a as double) as double;math.bi;Retourne le logarithme &agrave; base 10 de l'argument.;malloc;malloc(bytes as integer) as any ptr;stdlib.bi;Alloue de la m&eacute;moire. Retourne un pointeur sur un tampon permettant le stockage pour la taille sp&eacute;cifi&eacute;e.;modf;modf(d as double, p as double ptr) as double;math.bi;Retourne la partie d&eacute;cimale d'un nombre &agrave; virgule flottante d. p pointe vers la partie int&eacute;grale exprim&eacute;e comme un nombre &agrave; virgule flottante.;perror;perror(mess as zstring ptr);stdio.bi;Affiche sur le flux stderr un message transmis comme argument.;pow;pow(x as double, y as double) as double;math.bi;Retourne x &agrave; la puissance y.;pow10;pow10(x as double) as double;math.bi;Retourne 10 &agrave; la puissance x (inverse de la fonction log10()).;printf;printf(fmt as zstring ptr, ...) as integer;stdio.bi;Affiche sur la sortie standard autant d'&eacute;l&eacute;ments que il y a de signes simples % dans fmt correspondant avec des arguments de la liste.;putc;putc(c as integer, s as FILE ptr) as integer;stdio.bi;Macro pour la sortie du caract&egrave;re unique c sur le flux s.;putchar;putchar(c as integer) as integer;stdio.bi;Macro pour la sortie du caract&egrave;re unique c sur la sortie standard.;puts;puts(b as zstring ptr) as integer;stdio.bi;Envoie le flux de caract&egrave;res dans b sur la sortie standard, renvoie 0 si l'op&eacute;ration &eacute;choue.;rand;rand() as integer;stdlib.bi;Retourne un nombre pseudo-al&eacute;atoire. Une semence est n&eacute;cessaire. Elle est fix&eacute;e avec srand.;realloc;realloc(p as any ptr, newsize as size_t) as any ptr;stdlib.bi;Alloue de la m&eacute;moire. Retourne un pointeur vers un tampon pour un changement de taille de l'objet point&eacute; par p.;rewind;rewind(s as FILE ptr);stdio.bi;Efface les indicateurs d'erreur sur un flux fichier (lecture ou &eacute;criture). N&eacute;cessaire avant de lire un fichier modifi&eacute;.;scanf;scanf(fmt as zstring ptr,...) as integer;stdio.bi;Lit sur l'entr&eacute;e standard autant d'&eacute;l&eacute;ments qu'il y a de signes % dans fmt correspondants avec les pointeurs r&eacute;pertori&eacute;s.;sin_;sin_(ar as double) as double;math.bi;Retourne le sinus d'un angle mesur&eacute; en radians.;sinh;sinh(x as double) as double;math.bi;Retourne le sinus hyperbolique d'un angle mesur&eacute; en radians.;sprintf;sprintf(p as zstring ptr, fmt as zstring ptr, ...) as integer;stdio.bi;Affiche sur la zstring p autant d'&eacute;l&eacute;ments qu'il y a de signes % unique dans fmt correspondant aux arguments dans la liste.;sqrt;sqrt(a as double) as double;math.bi;Retourne la racine carr&eacute;e de la valeur pass&eacute;e. Erreur de domaine si la valeur est n&eacute;gative.;srand;srand(seed as uinteger);stdlib.bi;D&eacute;finit la semence pour un nombre al&eacute;atoire. Une semence possible est l'heure courante.;sscanf;sscanf(b as zstring ptr, fmt as zstring ptr, ...) as integer;stdio.bi;Lit &agrave; partir du tampon b autant d'&eacute;l&eacute;ments qu'il y a de signes % dans fmt correspondants aux pointeurs r&eacute;pertori&eacute;s.;strcat;strcat(s1 as zstring ptr, s2 as zstring ptr) as zstring ptr;string.bi;Concat&egrave;nation (ajoute &agrave; la fin) de la zstring s2 &agrave; s1.;strchr;strchr(s as zstring ptr, c as integer) as zstring ptr;string.bi;Retourne un pointeur sur la premi&egrave;re occurrence de c dans s ou NULL si elle &eacute;choue &agrave; en trouver une.;strcmp;strcmp(s1 as zstring ptr, s2 as zstring ptr) as integer;string.bi;Compare la zstring s2 &agrave; s1. Retourne 0 ou la diff&eacute;rence sign&eacute;e dans les valeurs ASCII du premier caract&egrave;re qui ne correspond pas.;strcpy;strcpy(s1 as zstring ptr, s2 as zstring ptr) as zstring ptr;string.bi;Copie s2 dans s1.;strcspn;strcspn(s1 as zstring ptr, s2 as zstring ptr) as integer;string.bi;Retourne le nombre de caract&egrave;res rencontr&eacute;s dans s1 avant de rencontrer l'un des caract&egrave;res de s2.;strerror;strerror(n as integer) as zstring ptr;string.bi;Retourne un pointeur vers un message d'erreur syst&egrave;me correspondant au num&eacute;ro de l'erreur pass&eacute;e.;strlen;strlen(s as zstring ptr) as integer;string.bi;Retourne le nombre d'octets dans la cha&icirc;ne termin&eacute;e par "nul" (zstring) point&eacute;e par s (ne compte pas terminateur nul).;strncat;strncat(s1 as zstring ptr, s2 as zstring ptr, n as integer) as zstring ptr;string.bi;Concat&eacute;nation (ajoute &agrave; la fin) de n octets de la zstring s2 &agrave; s1.;strncmp;strncmp(s1 as zstring ptr, s2 as any ptr, n as integer) as integer;string.bi;Compare n octets de la zstring s2 aux octets correspondants de s1. Retourne 0 ou la diff&eacute;rence sign&eacute;e dans les valeurs ASCII du premier caract&egrave;re qui ne correspond pas.;strncpy;strncpy(s1 as zstring ptr, s2 as zstring ptr, n as integer) as zstring ptr;string.bi;Copie n octets de s2 dans s1.;strpbrk;strpbrk(s1 as zstring ptr, s2 as zstring ptr) as zstring ptr;string.bi;Retourne un pointeur vers le premier caract&egrave;re rencontr&eacute; dans S1 qui est aussi dans S2.;strrchr;strrchr(s as zstring ptr, c as integer) as zstring ptr;string.bi;Retourne un pointeur sur la derni&egrave;re occurrence de c dans s ou NULL si elle &eacute;choue &agrave; en trouver un.;strspn;strspn(s1 as zstring ptr, s2 as zstring ptr) as integer;string.bi;Retourne le nombre de caract&egrave;res dans s1 rencontr&eacute;s avant de rencontrer un caract&egrave;re qui n'est pas dans S2.;strstr;strstr(s1 as zstring ptr, s2 as zstring ptr) as zstring ptr;string.bi;Trouve l'emplacement de la zstring s2 dans s1 et renvoie un pointeur vers son premier caract&egrave;re.;strtod;strtod(s as zstring ptr, p as zstring ptr) as double;stdlib.bi;Convertit une zstring en double, &agrave; condition que la zstring soit &eacute;crite sous la forme d'un nombre.;strtok;strtok(s1 as zstring ptr, s2 as zstring ptr) as zstring ptr;string.bi;Retourne des pointeurs vers des symboles (tokens) successifs en utilisant la zstring s1. Les symboles consid&eacute;r&eacute;s comme des s&eacute;parateurs sont &eacute;num&eacute;r&eacute;s dans S2.;system;system(command as zstring ptr) as integer;stdlib.bi;Ex&eacute;cute, &agrave; partir d'un programme, une commande adress&eacute;e au syst&egrave;me d'exploitation &eacute;crit dans une zstring (par exemple DIR sur Windows et DOS et LS sous Linux).;tan_;tan_(ar as double) as double;math.bi;Retourne la tangente d'un angle mesur&eacute; en radians.;tanh;tanh(x as double) as double;math.bi;Retourne la tangente hyperbolique d'un angle mesur&eacute; en radians.;tolower;tolower(c as integer) as integer;ctype.bi;Convertit un caract&egrave;re majuscule en une &eacute;criture minuscule (utilise le code ASCII).;toupper;toupper(c as integer) as integer;ctype.bi;Convertit un caract&egrave;re minuscule en une &eacute;criture majnuscule (utilise le code ASCII).;ungetc;ungetc(c as integer, s as FILE ptr) as integer;stdio.bi;Envoie &agrave; nouveau un caract&egrave;re c dans le flux s, retourne EOF en cas d'&eacute;chec. Ne renoie pas plus d'un caract&egrave;re.;</table>

	{{table columns="" cellpadding="2" cells="<table></table>

	<a name="BUFFER"></a>

{{fbdoc item="section" value="Manipulation de tampon

	##**#include "crt/string.bi"**##

	{{table columns="" cellpadding="2" cells="<table>Prototype (avec param&egravetres);Commentaires;memchr(s as any ptr, c as integer, n as size_t) as any ptr;Recherche d'un caract&egravere dans un tampon.;memcmp(s1 as any ptr, s2 as any ptr, n as size_t) as integer;Comparer deux tampons.;memcpy(dest as any ptr, src as any ptr, n as size_t) as any ptr;Copier un tampon dans un autre.;memmove(dest as any ptr, src as any ptr, n as size_t) as any ptr;D&eacuteplacer un certain nombre d'octets d'un tampon &agrave un autre.;memset(s as any ptr, c as integer, n as size_t) as any ptr;D&eacutefinir tous les octets d'un tampon &agrave un caract&egravere donn&eacute.;</table>

<a name="CTYPE"></a>

	{{fbdoc item="section" value="Classification et conversion des caract&egrave;res

	##**#include "crt/ctype.bi"**##

{{table columns="" cellpadding="2" cells="<table>Prototype (avec param&egravetres);Commentaires;isalnum(c as integer) as integer;Vrai si c est alphanum&eacuterique.;isalpha(c as integer) as integer;Vrai si c est une lettre.;isascii(c as integer) as integer;Vrai si  c est ASCII .;iscntrl(c as integer) as integer;Vrai si c est un caract&egravere de contr&ocircle.;isdigit(c as integer) as integer;Vrai si c est un chiffre d&eacutecimal.;isgraph(c as integer) as integer;Vrai si c est un caract&egravere graphique.;islower(c as integer) as integer;Vrai si c est une lettre minuscule.;isprint(c as integer) as integer;Vrai si c est un caract&egravere imprimable.;ispunct(c as integer) as integer;Vrai si c est un caract&egravere de ponctuation.;isspace(c as integer) as integer;Vrai si c est un caract&egravere d'espace.;isupper(c as integer) as integer;Vrai si c est une lettre majuscule.;isxdigit(c as integer) as integer;Vrai si c est un chiffre hexad&eacutecimal.;toascii(c as integer) as integer;Convertir c en ASCII.;tolower(c as integer) as integer;Convertir c en minuscules.;toupper(c as integer) as integer;Convertir c en majuscules.;</table>

	<a name="DATA"></a>

	{{fbdoc item="section" value="Conversion de donn&eacute;es

##**#include "crt/stdlib.bi"**##

	{{table columns="" cellpadding="2" cells="<table>Prototype (avec param&egravetres);Commentaires;atof(string1 as zstring ptr) as double;Convertir zstring en valeur &agrave virgule flottante.;atoi(string1 as zstring ptr) as integer;Convertir zstring en entier.;atol(string1 as zstring ptr) as integer;Convertir zstring en entier long.;itoa(value as integer, zstring as zstring ptr, radix as integer) as zstring ptr;Convertir un entier en zstring en utilisant la base (radix).;ltoa(value as long, zstring as zstring ptr, radix as integer) as zstring ptr;Convertir entier long en zstring dans la base (radix).;strtod(string1 as zstring ptr, endptr as zstring ptr) as double;Convertir zstring en valeur &agrave virgule flottante.;strtol(string1 as zstring ptr, endptr as zstring ptr, radix as integer) as long;Convertir zstring en entier long en utilisant la base (radix).;strtoul(string1 as zstring ptr, endptr as zstring ptr, radix as integer) as ulong;Convertir zstring en long non-sign&eacute.;</table>
	<a name="DIRS"></a>

	{{fbdoc item="section" value="Manipulation de r&eacute;pertoire

##**#include "crt/io.bi"**##

	{{table columns="" cellpadding="2" cells="<table>Prototype (avec param&egravetres);Commentaires;_chdir(path as zstring ptr) as integer;Changer le r&eacutepertoire courant vers chemin donn&eacute.;_getcwd(path as zstring ptr, numchars as integer) as zstring ptr;Retourne le nom du r&eacutepertoire de travail courant.;_mkdir(path as zstring ptr) as integer;Cr&eacuteer un r&eacutepertoire en utilisant le nom de chemin d'acc&egraves donn&eacute.;_rmdir(path as zstring ptr) as integer;Supprimer un r&eacutepertoire sp&eacutecifi&eacute.;</table>

	<a name="FILES"></a>

{{fbdoc item="section" value="Manipulation de fichiers

	##**#include "crt/sys/stat.bi"**##

	##**#include "crt/io.bi"**##

	{{table columns="" cellpadding="2" cells="<table>Prototype (avec param&egravetres);Commentaires;chmod(path as zstring ptr, pmode as integer) as integer;Modifie les param&egravetres de permissions d'un fichier.;fstat(handle as integer, buffer as type stat ptr) as integer;Obtient des informations d'&eacutetat du fichier.;remove(path as zstring ptr) as integer;Supprimer un fichier nomm&eacute.;rename_(oldname as zstring ptr, newname as zstring ptr) as integer;Renommer un fichier.;stat(path as zstring ptr, buffer as type stat ptr) as integer;Obtenir des informations d'&eacutetat du fichier nomm&eacute.;umask(pmode as uinteger) as uinteger;D&eacutefinir le masque de permissions du fichier.;</table>

<a name="STREAM"></a>

	{{fbdoc item="section" value="Flux E/S

	##**#include "crt/stdio.bi"**##

{{table columns="" cellpadding="2" cells="<table>Prototype (avec param&egravetres);Commentaires;clearerr(file_pointer as FILE ptr);Efface l'indicateur d'erreur de flux,;fclose(file_pointer as FILE ptr) as integer;Fermer un fichier.;feof(file_pointer as FILE ptr) as integer;Check if end of file occurred on a stream.;ferror(file_pointer as FILE ptr) as integer;V&eacuterifier si une erreur s'est produite lors d'une E/S fichier.;fflush(file_pointer as FILE ptr) as integer;&Eacutecrire (vider) un tampon vers le fichier.;fgetc(file_pointer as FILE ptr) as integer;Obtenir un caract&egravere &agrave partir d'un flux.;fgetpos(file_pointer as FILE ptr, fpos_t current_pos) as integer;Obtenir la position courante dans un flux.;fgets(string1 as zstring ptr, maxchar as integer, file_pointer as FILE ptr) as zstring ptr;Lire une zstring &agrave partir d'un fichier.;fopen(filename as zstring ptr, access_mode as zstring ptr) as FILE ptr;Ouvrir un fichier pour tampon E/S.;fprintf(file_pointer as FILE ptr, format_string as zstring ptr, args) as integer;&Eacutecrire la sortie format&eacutee dans un fichier.;fputc(c as integer, file_pointer as FILE ptr) as integer;&Eacutecrire un caract&egravere vers un flux.;fputchar(c as integer) as integer;&Eacutecrire un caract&egravere vers stdout.;fputs(string1 as zstring ptr, file_pointer as FILE ptr) as integer;Ecrire une zstring vers un flux.;fread(buffer as zstring ptr, size as size_t count as size_t, file_pointer as FILE ptr) as size_t;Lire des donn&eacutees non format&eacutees d'un flux dans un un tampon.;freopen(filename as zstring ptr, access as zstring ptr mode, file_pointer as FILE ptr) as FILE ptr;R&eacuteaffecter un pointeur fichier vers un autre fichier.;fscanf(file_pointer as FILE ptr, format as zstring ptr zstring, args) as integer;Lire une entr&eacutee format&eacutee &agrave partir d'un flux.;fseek(file_pointer as FILE ptr, offset as long, origin as integer) as integer;D&eacutefinir la position courante dans fichier vers un nouvel emplacement.;fsetpos(file_pointer as FILE ptr, current_pos as fpos_t) as integer;D&eacutefinir la position courante dans le fichier vers un nouvel emplacement.;ftell(file_pointer as FILE ptr) as long;Obtenir l'emplacement courant dans le dossier.;fwrite(buffer as zstring ptr, size as size_t, count as size_t file_pointer as FILE ptr) as size_t;&Eacutecrire des donn&eacutees non format&eacutees &agrave partir d'un tampon vers un flux.;getc(file_pointer as FILE ptr) as integer;Lire un caract&egravere &agrave partir d'un flux.;getchar() as integer;Lire un caract&egravere &agrave partir de stdin.;gets(buffer as zstring ptr) as zstring ptr;Lire une ligne depuis stdin vers un tampon.;printf(format as zstring ptr _string, args) as integer;&Eacutecrire une sortie format&eacutee vers stdout.;putc(c as integer, file_pointer as FILE ptr) as integer;&Eacutecrire un caract&egravere vers un flux.;putchar(c as integer) as integer;&Eacutecrire un caract&egravere vers stdout.;puts(string1 as zstring ptr) as integer;Ecrire une zstring vers stdout.;rewind(file_pointer as FILE ptr);Rembobiner un fichier.;scanf(format_string as zstring ptr, args) as integer;Lire une entr&eacutee format&eacutee de stdin.;setbuf(file_pointer as FILE ptr, buffer as zstring ptr);Mettre en place un nouveau tampon pour le flux.;setvbuf(file_pointer as FILE ptr, buffer as zstring ptr, buf_type as integer, buf as size_t size) as integer;Mettre en place un nouveau tampon et contr&ocircler le niveau de mise en m&eacutemoire tampon sur un flux.;sprintf(string1 as zstring ptr, format_string as zstring ptr, args) as integer;&Eacutecrire une sortie format&eacutee vers une zstring.;sscanf(buffer as zstring ptr, format_string as zstring ptr, args) as integer;Lire une zstring &agrave partir d'une entr&eacutee format&eacutee.;tmpfile() as FILE ptr;Ouvrir un fichier temporaire.;tmpnam(file_name as zstring ptr) as zstring ptr;Obtenir le nom d'un fichier temporaire.;ungetc(c as integer, file_pointer as FILE ptr) as integer;Repousser un caract&egravere dans un tampon de flux;</table>

	<a name="LOLEVIO"></a>

	{{fbdoc item="section" value="E/S bas niveau

##**#include "crt/io.bi"**##

	Jusqu'&agrave; pr&eacute;sent, Win32 seulement, se connecte &agrave; MSVCRT.DLL (en-t&ecirc;tes manquantes pour d'autres plates-formes)

	{{table columns="" cellpadding="2" cells="<table>Prototype (avec param&egravetres);Commentaires;_close(handle as integer) as integer;Fermer un fichier ouvert pour E/S non-tamponn&eacutee.;_creat(filename as zstring ptr, pmode as integer) as integer;Cr&eacuteer un nouveau fichier avec la permission sp&eacutecifi&eacutee.;_eof(handle as integer) as integer;V&eacuterifier la fin du fichier.;_lseek(handle as integer, offset as long, origin as integer) as long;Aller &agrave une position sp&eacutecifique dans un fichier.;_open(filename as zstring ptr, oflag as integer, pmode as uinteger) as integer;Ouvrir un fichier &agrave faible niveau E/S.;_read(handle as integer, buffer as zstring ptr, length as uinteger) as integer;Lire des donn&eacutees binaires &agrave partir d'un fichier dans un tampon.;_write(handle as integer, buffer as zstring ptr, count as uinteger) as integer;&Eacutecrire des donn&eacutees binaires &agrave partir d'un tampon dans un fichier.;</table>

<a name="MATH"></a>

	{{fbdoc item="section" value="Math&eacute;matiques
			    ##**#include "crt/math.bi"**##
			
	{{table columns="" cellpadding="2" cells="<table>Prototype (avec param&egravetres);Commentaires;abs_(n as integer) as integer;R&eacutecup&egravere la valeur absolue d'un entier.;acos_(x as double) as double;Calcule arc cosinus de x.;asin_(x as double) as double;Calcule arc sinus de x.;atan_(x as double) as double;Calcule arc tangente de x.;atan2_(y as double, x as double) as double;Calcule arc tangente de y/x.;ceil(x as double) as double;Obtient plus petite valeur enti&egravere qui d&eacutepasse x.;cos_(x as double) as double;Calcule cosinus de l'angle en radians.;cosh(x as double) as double;Calcule le cosinus hyperbolique de x.;div(number as integer, denom as integer) as div_t;Diviser un entier par un autre.;exp_(x as double) as double;Calcule exponentielle de x.;fabs(x as double) as double;Calcule la valeur absolue de x.;floor(x as double) as double;Obtient plus grande valeur enti&egravere inf&eacuterieure &agrave x.;fmod(x as double, y as double) as double;Diviser x par y avec un quotient entier et retourne le reste.;frexp(x as double, expptr as integer ptr) as double;D&eacutecompose x en mantisse et exposant.;labs(n as long) as long;Trouver valeur absolue d'un nombre entier long n.;ldexp(x as double, exp as integer) as double;Reconstruit x &agrave partir de la mantisse et d'un exposant de deux.;ldiv(number as long, denom as long) as ldiv_t;Diviser un entier long par un autre.;log_(x as double) as double;Calcule log(x).;log10(x as double) as double;Calcule log base 10 de x.;modf(x as double, intptr as double ptr) as double;D&eacutecompose x en partie enti&egravere et partie d&eacutecimale.;pow(x as double, y as double) as double;Calcule x &eacutelev&eacute &agrave la puissance y.;rand() as integer;Obtient un entier al&eacuteatoire compris entre 0 et 32.;random(max_num as integer) as integer;Obtenir un entier al&eacuteatoire compris entre 0 et max_num.;randomize();D&eacutefinir une "graine" al&eacuteatoire pour le g&eacuten&eacuterateur de nombres al&eacuteatoires.;sin_(x as double) as double;Calcule le sinus de l'angle en radians.;sinh(x as double) as double;Calcule le sinus hyperbolique de x.;sqrt(x as double) as double;Calcule la racine carr&eacutee de x.;srand(seed as uinteger);D&eacutefinir une nouvelle graine pour le g&eacuten&eacuterateur de nombre al&eacuteatoire (rand).;tan_(x as double) as double;Calcule la tangente de l'angle en radians.;tanh(x as double) as double;Calcule la tangente hyperbolique de x.;</table>

<a name="MEMORY"></a>

	{{fbdoc item="section" value="Allocation m&eacute;moire

	##**#include "crt/stdlib.bi"**##

{{table columns="" cellpadding="2" cells="<table>Prototype (avec param&egravetres);Commentaires;calloc(num as size_t elems, elem_size as size_t) as any ptr;Allouer un tableau et initialiser tous ses &eacutel&eacutements &agrave z&eacutero.;free(mem_address as any ptr);Lib&eacuterer un bloc de m&eacutemoire.;malloc(num as size_t bytes) as any ptr;Allouer un bloc de m&eacutemoire.;realloc(mem_address as any ptr, newsize as size_t) as any ptr;R&eacuteaffecter (ajuster la taille) un bloc de m&eacutemoire.;</table>

	<a name="PROCESS"></a>

	{{fbdoc item="section" value="Contr&ocirc;le de processus

##**#include "crt/stdlib.bi"**##
	{{table columns="" cellpadding="2" cells="<table>Prototype (avec param&egravetres);Commentaires;abort();Abandonner un processus.;execl(path as zstring ptr, arg0 as zstring ptr, arg1 as zstring ptr,..., NULL) as integer;Lancer un processus fils (passe la ligne de commande).;execlp(path as zstring ptr, arg0 as zstring ptr, arg1 as zstring ptr,..., NULL) as integer;Lancer enfant (utilisation de PATH, passer la ligne de commande).;execv(path as zstring ptr, argv as zstring ptr) as integer;Lancer enfant (passe vecteur argument).;execvp(path as zstring ptr, argv as zstring ptr) as integer;Lancement enfant (utiliser PATH, passer vecteur d'argument).;exit_(status as integer);Terminer un processus apr&egraves nettoyage de tous les tampons.;getenv(varname as zstring ptr) as zstring ptr;R&eacutecup&egravere la d&eacutefinition de la variable d'environnement,;perror(string1 as zstring ptr);Affiche un message d'erreur correspondant &agrave la derni&egravere erreur syst&egraveme.;putenv(envstring as zstring ptr) as integer;Ins&eacuterer une nouvelle d&eacutefinition dans la table d' environnement.;raise(signum as integer) as integer;G&eacuten&eacuterer un signal C (exception).;system_(string1 as zstring ptr) as integer; Ex&eacutecuter une commande du syst&egraveme d'exploitation r&eacutesident.;</table>

<a name="SORTING"></a>