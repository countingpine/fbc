{{fbdoc item="title" value="L'interfa&ccedil;age avec le langage C"}}----
REMARQUE! Faites quelques vérifications orthographique, de vérification du texte, du code et des noms de fichiers.

===Avant-propos===
Ceci est un mini tutoriel de base sur la façon d'écrire une simple bibliothèque en C et ensuite de l'utiliser dans FreeBASIC. Il devrait être possible de suivre le tutoriel sans pour autant avoir de grandes connaissances du C ou du FreeBASIC. Après avoir essayé ce tutoriel, vous devriez être en mesure de compiler une bibliothèque C statique ou dynamique. Traduire les fichiers d'entête nécessaires pour les fichiers d'entête FreeBASIC et de comprendre comment utiliser les bibliothèques dans un projet FreeBASIC.


===Qu'est-ce qu'une bibliothèque===

===Condition préalable===
Ce tutoriel a été écrit et testé avec FreeBASIC 0.16b et la dernière version actuelle de MinGW32 (à l'époque). Comme une note Dev-cpp utilise MinGW32 que c'est la chaîne d'outils du compilateur. Vous pouvez également obtenir Code::Blocks avec un paquet MinGW32.


===Description formelle de la tâche à accomplir===
Pour démontrer l'utilisation d'une bibliothèque C en FreeBASIC nous avons besoin pour créer la bibliothèque la plus simple possible avec peu de fonctions. Un fichier de test en C pour démontrer que notre bibliothèque fonctionne comme prévu. Ensuite, nous devons traduire le fichier en-tête bibliothèque vers un fichier d'en-tête FreeBASIC (*.bi) et enfin de créer un projet de test dans FreeBASIC utilisant la bibliothèque..

===Création des fichiers===
Donc, notre liste de fichiers devrait ressembler à ceci:
myClib.c: Fichier C mise en œuvre de notre bibliothèque.
myClib.h: Fichier d'entête C décrivant l'interface des bibliothèques.
myClibCTest.c: Mise en oeuvre notre fichier C programme d'essai de C.
myClib.bi: Fichier d'en-tête FreeBASIC. Une traduction de myClib.h.
myClibFBTest.bas:  Test FreeBASIC
make.cmd: Un script shell pour compiler la bibliothèque et les fichiers de test.


==Le fichier C pour fabriquer la bibliothèque statique. myClib.c ==
%%(C)
/* A function adding two integers and returning the result */
#include "myClib.h"
int SampleAddInt(int i1, int i2)
{
	return i1 + i2;
}

/* A function doing nothing ;) */
void SampleFunction1()
{
	/* insert code here */

}

/* A function always returning zero */
int SampleFunction2()
{
	/* insert code here */

	return 10;
}
%%
==Le fichier en-tête myClib.h==
%%(C)
int  SampleAddInt(int i1, int i2);
void SampleFunction1();
int  SampleFunction2();
%%

==Projet de test C pour vérifier que la lib statique est compatible C. myClibCTest.c:==
%%(C)
#include <stdio.h>
#include <stdlib.h>
#include "myClib.h"
int main(int argc, char *argv[])
{
  printf("SampleAddInt(5, 5):=%d\n", SampleAddInt(5, 5));
  system("PAUSE");	
  return 0;
}
%%


==Traduire le fichier d'en-tête C dans un fichier en-tête FreeBASIC==
myClib.bi: Pour interfacer la bibliothèque statique et l'inclure automatiquement (# inclib "myClib") j'ai ce fichier.
%%(freebasic)
''include file for libmyClib.a
#IfNDef __myClib_bi__
#Define __myClib_bi__
#inclib "myClib"

Declare Function SampleAddInt Cdecl Alias "SampleAddInt" (Byval i1 As Integer, Byval i2 As Integer) As Integer
Declare Sub SampleFunction1 Cdecl Alias "SampleFunction1" ()
Declare Function SampleFunction2 Cdecl Alias "SampleFunction2" () As Integer
#endif
%%


==Et enfin le fichier en utilisant la bibliothèque FreeBASIC==
myClibFBTest.bas:
%%(freebasic)
''Testing functions in myClib.bi
#include "myClib.bi"
''
print "SampleAddInt(10, 10):=", SampleAddInt(10, 10)
'' Just a dumy call
SampleFunction1()
''
print "SampleFunction2():=", SampleFunction2()
%%


==Le fichier make: make.cmd==
J'ai créé un fichier "batch" pour compiler tous les fichiers. Y compris un échantillon en C en utilisant la bibliothèque statique. Notez les lignes de configuration au début qui doit être modifié pour correspondre à votre configuration.
%%(cmd)
@REM TODO: Set PATH's for this session.
SET PATH=C:\mingw32\bin;c:\mingw32\mingw32\bin
SET MINGW_INCLUDE="C:/MinGW32/include"
SET MINGW_LIB="C:/MinGW32/lib"

@REM
@REM fbc testing SET fbc="C:\portableapps\FreeBASIC\fbc.exe"
SET fbc="C:\FreeBasic16b\fbc.exe"
@echo *** Verify pat's to compilers
@pause
@echo off

@REM
@REM Remove old files
DEL /F *.o  *.a myClibFBTest.exe

@REM
@REM Create static lib from c source
gcc.exe -c myClib.c -o myClib.o -I%MINGW_INCLUDE%

@REM
@REM ar: creating libstatictest.a
ar r libmyClib.a myClib.o 

@REM
@REM No nead for ranlib anymore? ar is supposed to take care of it 
ranlib libmyClib.a


@REM
@REM Create a test with a C file

gcc.exe -c myClibCTest.c -o myClibCTest.o -I%MINGW_INCLUDE%
gcc.exe myClibCTest.o -o "myClibCTest.exe" -L%MINGW_LIB% libmyClib.a

echo =====================================
echo RUnning C sample
echo =====================================
myClibCTest.exe

echo =====================================
echo Creating FreeBASIC sample
echo =====================================
REM I thought this explicit reference is unnecessary as I use #inclib
SET fbcop= -I myClib
SET fbcfl="myClibFBTest.bas" 
%fbc% %fbcop% %fbcfl%
echo =====================================
echo RUnning FreeBASIC sample
echo =====================================
myClibFBTest.exe
@pause
%%


===Messages d'erreur rencontrées et leurs solutions===
==undefined reference to==
Essai de liaison à la bibliothèque statique C sans utiliser l'alias cdecl "functionname" dans le fichier en-tête FreeBASIC  résultat d'erreurs de ce genre.
%%(cmd)
C:\code>"C:\FreeBasic16b\fbc.exe"     "myClibFBTest.bas"
myClibFBTest.o:fake:(.text+0x3d): undefined reference to `SAMPLEADDINT@8'
myClibFBTest.o:fake:(.text+0x4a): undefined reference to `SAMPLEFUNCTION1@0'
myClibFBTest.o:fake:(.text+0x67): undefined reference to `SAMPLEFUNCTION2@0'
Press any key to continue . . .
%%

Pour résoudre cela, vous devrez localiser les déclarations de fonctions dans un fichier *.bi qui ressemble à ceci:
%%(freebasic)
Declare Function SampleAddInt(Byval i1 As Integer, Byval i2 As Integer) As Integer
%%
Et le remplacer par ceci:
%%(freebasic)
Declare Function SampleAddInt Cdecl Alias "SampleAddInt" (Byval i1 As Integer, Byval i2 As Integer) As Integer
%%


===Annexe A: liens===
La base de ce tutoriel vient de plusieurs "threads" dans le forum.
Quand il évolue et peut être autonome les liens vers les "threads" doivent être supprimés.
Quelques liens intéressants contenant des informations sur l'interfaçage des bibliothèques créées en FreeBASIC et utilisées par d'autres langages ou vice-versa.

[[http://www.freebasic.net/forum/viewtopic.php?t=6515 Comment compiler un projet C comme une lib statique pour l'inclusion.]]

