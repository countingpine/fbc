{{fbdoc item="title" value="IF...THEN"}}----
Déclaration de contrôle de flux pour le branchement conditionnel

{{fbdoc item="syntax"}}##
	**If** //expression// **Then** [//statement(s)//] [**Else** [//statement(s)//]] [**End If**]
//ou//
	**If** //expression// **Then** : [//statement(s)//] [**Else** [//statement(s)//]] : **End If**
//ou//
	**If** //expression// **Then**
		[//statement(s)//]
	[ **Elseif** //expression// **Then** ]
		[//statement(s)//]
	[ **Else** ]
		[//statement(s)//]
	**End If**
##
{{fbdoc item="desc"}}
	##**If...Then**## est une méthode pour prendre des décisions. C'est un mécanisme qui permet d'exécuter du code que si une condition est vraie, et peut fournir une alternative de programmation de code à exécuter sur la base de plusieurs conditions.
	
	##//expression//## peut avoir une ces formes:
		- une expression conditionnelle, par exemple:
			##x = 5##
		- conditions multiples séparées par des opérateurs logiques bit à bit, par exemple:
			##x >= 5 [[KeyPgOpAnd And]] x <= 10##
		- conditions multiples séparées par des opérateurs de court-circuit logique, par exemple:
			##y <> 0 [[KeyPgOpAndAlso AndAlso]] x \ y = 1##
			(dans ce cas, "##x \ y = 1##" sera évalué seulement si "##y <> 0##" est Vrai (True))
		- toute expression numérique, dans ce cas une valeur de zéro (##0##) représente False (Faux) et une valeur non-nulle représente True (Vrai)

	Les ##**If**## multi/simple ligne peuvent être imbriqués.  Dans ce dernier cas, les ##**End If**## facultatifs peuvent être utiles pour contrôler où les ##**If**## imbriqués commencent et finissent.

	Dans les dialectes //[[CompilerOptlang -lang fb]]// et //[[CompilerOptlang -lang fblite]]//, deux-points (##:##) peuvent remplacer des lignes nouvelles pour construire des blocs ##**If**## multi-lignes sur une seule ligne.

{{fbdoc item="ex"}}
{{fbdoc item="filename" value="examples/manual/control/if-then.bas"}}%%(freebasic)
'' Here is a simple "guess the number" game using if...then for a decision.

Dim As Integer num, guess

Randomize
num = Int(Rnd * 10) + 1 'Create a random number between 1 and 10...
	            
Print "guess the number between 1 and 10"

Do 'Start a loop

	Input "Guess"; guess 'Input a number from the user

	If guess > 10 OrElse guess < 1 Then  'The user's guess is out of range
		Print "The number can't be greater then 10 or less than 1!"
	ElseIf guess > num Then  'The user's guess is too low
		Print "Too low"
	ElseIf guess < num Then  'The user's guess is too high
		Print "Too high"
	ElseIf guess = num Then  'The user guessed the right number!
		Print "Correct!"
		Exit Do   'Exit the loop
	End If

loop 'Go back to the start of the loop
%%

{{fbdoc item="lang"}}
	Dans les dialectes //[[CompilerOptlang -lang fb]]// et //[[CompilerOptlang -lang fblite]]//, s'il y a une nouvelle ligne, un commentaire sur une seule ligne (##'##), deux-points (##:##), ou une déclaration ##[[KeyPgRem Rem]]## directement après THEN, le IF sera multi-ligne.  Toute autre déclaration donnera lieu à une seule ligne IF.
	Dans le dialecte //[[CompilerOptlang -lang qb]]//, s'il y a une nouvelle ligne ou un commentaire sur une seule ligne (##'##) directement après THEN, le IF sera multi-lignes.  Deux-points (##:##), un ##[[KeyPgRem Rem]]## ou toute autre déclaration donnera lieu à une seule ligne IF.

{{fbdoc item="diff"}}
	- END IF n'était pas supporté dans les IF sur une seule ligne dans QBASIC.

{{fbdoc item="see"}}
	- ##[[KeyPgDoloop Do...Loop]]##
	- ##[[KeyPgPpif #if]]##
	- ##[[KeyPgSelectcase Select Case]]##

{{fbdoc item="back" value="CatPgControlFlow|Control Flow"}}

