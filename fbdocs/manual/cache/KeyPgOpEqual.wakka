{{fbdoc item="title" value="Operator = (Equal)"}}----
Compare deux expressions pour l'&eacute;galit&eacute;

{{fbdoc item="syntax"}}##
	[[KeyPgDeclare declare]] [[KeyPgOperator operator]] **=** ( [[KeyPgByref byref]] //lhs// [[KeyPgAs as]] [[KeyPgByte byte]], [[KeyPgByref byref]] //rhs// [[KeyPgAs as]] [[KeyPgByte byte]] ) [[KeyPgAs as]] [[KeyPgInteger integer]]
	[[KeyPgDeclare declare]] [[KeyPgOperator operator]] **=** ( [[KeyPgByref byref]] //lhs// [[KeyPgAs as]] [[KeyPgUbyte ubyte]], [[KeyPgByref byref]] //rhs// [[KeyPgAs as]] [[KeyPgUbyte ubyte]] ) [[KeyPgAs as]] [[KeyPgInteger integer]]
	[[KeyPgDeclare declare]] [[KeyPgOperator operator]] **=** ( [[KeyPgByref byref]] //lhs// [[KeyPgAs as]] [[KeyPgShort short]], [[KeyPgByref byref]] //rhs// [[KeyPgAs as]] [[KeyPgShort short]] ) [[KeyPgAs as]] [[KeyPgInteger integer]]
	[[KeyPgDeclare declare]] [[KeyPgOperator operator]] **=** ( [[KeyPgByref byref]] //lhs// [[KeyPgAs as]] [[KeyPgUshort ushort]], [[KeyPgByref byref]] //rhs// [[KeyPgAs as]] [[KeyPgUshort ushort]] ) [[KeyPgAs as]] [[KeyPgInteger integer]]
	[[KeyPgDeclare declare]] [[KeyPgOperator operator]] **=** ( [[KeyPgByref byref]] //lhs// [[KeyPgAs as]] [[KeyPgInteger integer]], [[KeyPgByref byref]] //rhs// [[KeyPgAs as]] [[KeyPgInteger integer]] ) [[KeyPgAs as]] [[KeyPgInteger integer]]
	[[KeyPgDeclare declare]] [[KeyPgOperator operator]] **=** ( [[KeyPgByref byref]] //lhs// [[KeyPgAs as]] [[KeyPgUinteger uinteger]], [[KeyPgByref byref]] //rhs// [[KeyPgAs as]] [[KeyPgUinteger uinteger]] ) [[KeyPgAs as]] [[KeyPgInteger integer]]
	[[KeyPgDeclare declare]] [[KeyPgOperator operator]] **=** ( [[KeyPgByref byref]] //lhs// [[KeyPgAs as]] [[KeyPgLongint longint]], [[KeyPgByref byref]] //rhs// [[KeyPgAs as]] [[KeyPgLongint longint]] ) [[KeyPgAs as]] [[KeyPgInteger integer]]
	[[KeyPgDeclare declare]] [[KeyPgOperator operator]] **=** ( [[KeyPgByref byref]] //lhs// [[KeyPgAs as]] [[KeyPgUlongint ulongint]], [[KeyPgByref byref]] //rhs// [[KeyPgAs as]] [[KeyPgUlongint ulongint]] ) [[KeyPgAs as]] [[KeyPgInteger integer]]

	[[KeyPgDeclare declare]] [[KeyPgOperator operator]] **=** ( [[KeyPgByref byref]] //lhs// [[KeyPgAs as]] [[KeyPgString string]], [[KeyPgByref byref]] //rhs// [[KeyPgAs as]] [[KeyPgString string]] ) [[KeyPgAs as]] [[KeyPgInteger integer]]
	[[KeyPgDeclare declare]] [[KeyPgOperator operator]] **=** ( [[KeyPgByref byref]] //lhs// [[KeyPgAs as]] [[KeyPgZstring zstring]], [[KeyPgByref byref]] //rhs// [[KeyPgAs as]] [[KeyPgZstring zstring]] ) [[KeyPgAs as]] [[KeyPgInteger integer]]
	[[KeyPgDeclare declare]] [[KeyPgOperator operator]] **=** ( [[KeyPgByref byref]] //lhs// [[KeyPgAs as]] [[KeyPgWstring wstring]], [[KeyPgByref byref]] //rhs// [[KeyPgAs as]] [[KeyPgWstring wstring]] ) [[KeyPgAs as]] [[KeyPgInteger integer]]

	[[KeyPgDeclare declare]] [[KeyPgOperator operator]] **=** ( [[KeyPgByref byref]] //lhs// [[KeyPgAs as]] //T//, [[KeyPgByref byref]] //rhs// [[KeyPgAs as]] //T// ) [[KeyPgAs as]] [[KeyPgInteger integer]]
##
{{fbdoc item="usage"}}##
	//result// = //lhs// **=** //rhs//
##
{{fbdoc item="param"}}
	##//lhs//##
		L'expression c&ocirc;t&eacute; gauche &agrave; comparer.
	##//rhs//##
		L'expression c&ocirc;t&eacute; droit &agrave; comparer.
	##//T//##
		N'importe quel type de pointeur.

{{fbdoc item="section" value="Valeur retourn&eacute;e
	Retourne une valeur n&eacute;gative (-1) si les deux expressions sont &eacute;gales ou z&eacute;ro (0) si in&eacute;gales.

{{fbdoc item="desc"}}
	L'**##Op&eacute;rateur =## (Egalit&eacute;)** est un op&eacute;rateur binaire qui compare deux expressions pour l'&eacute;galit&eacute; et retourne le r&eacute;sultat - une valeur bool&eacute;enne sous forme d'un ##[[KeyPgInteger Entier (Integer)]]##: n&eacute;gatif (-1) pour vrai et z&eacute;ro (0) pour faux. Les arguments ne sont en aucun cas modifi&eacute;s.

	Cet op&eacute;rateur peut &ecirc;tre surcharg&eacute; pour accepter aussi bien des types d&eacute;finis par l'utilisateur.

	L'**##Op&eacute;rateur =## (Egalit&eacute;)** ne doit pas &ecirc;tre confondu avec des initialisations ou des affectations, qui elles aussi utilisent aussi le symbole "##=##".

{{fbdoc item="ex"}}

{{fbdoc item="filename" value="examples/manual/operator/equal.bas"}}%%(freebasic)
dim i as integer = 0    '' initialization: initialise i with a value of 0
i = 420                 '' assignment: assign to i the value of 420

if (i = 69) then        '' equation: compare the equality of the value of i and 69
	print "serious error: i should equal 420"
	end -1
end if
%%
	L'##[[KeyPgOpNotEqual Op&eacute;rateur <>]]## (In&eacute;galit&eacute;) est compl&eacute;mentaire &agrave; l'**##Op&eacute;rateur =## (Egalit&eacute;)** et est fonctionnellement identique si combin&eacute; avec l'##[[KeyPgOpNot Op&eacute;rateur Not]]## (Bit-wise Complement).

{{fbdoc item="filename" value="examples/manual/operator/equal2.bas"}}%%(freebasic)
   if (420 = 420) then print "(420 = 420) is true."
   if not (69 <> 69) then print "not (69 <> 69) is true."
%%

{{fbdoc item="lang"}}
	- Dans le dialecte //[[CompilerOptlang -lang qb]]//, cet op&eacute;rateur ne peut pas &ecirc;tre surcharg&eacute;.

{{fbdoc item="diff"}}
	- Aucune

{{fbdoc item="see"}}
	- ##[[KeyPgOpNotEqual Op&eacute;rateur <>]]## (In&eacute;galit&eacute;)
	- ##[[KeyPgOpAssignment Op&eacute;rateur =]]## (Affectation)
 
{{fbdoc item="back" value="CatPgOpConditional|Relational Operators"}}{{fbdoc item="back" value="CatPgOperators|Operators"}}