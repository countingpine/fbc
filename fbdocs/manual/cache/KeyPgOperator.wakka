{{fbdoc item="title" value="OPERATOR"}}----
Déclare ou définit un opérateur surchargé.

{{fbdoc item="syntax"}}##
	{ [[KeyPgType Type]] | [[KeyPgClass Class]] | [[KeyPgUnion Union]] | [[KeyPgEnum Enum]] } //typename//
		[[KeyPgDeclare declare]] **Operator** [[KeyPgCast cast]] () [[KeyPgAs as]] [[DataType datatype]]
		[[KeyPgDeclare declare]] **Operator** //assignment_op// ( [ [[KeyPgByref byref]] | [[KeyPgByval byval]] ] //rhs// [[KeyPgAs as]] [[DataType datatype]] )
		[[KeyPgDeclare declare]] **Operator** [[KeyPgOpNew new]] ( //size// [[KeyPgAs as]] [[KeyPgUinteger uinteger]] ) [[KeyPgAs as]] [[KeyPgAny any]] [[KeyPgPtr ptr]]
		[[KeyPgDeclare declare]] [[KeyPgStaticMember static]] **Operator** [[KeyPgOpNew new]][] ( //size// [[KeyPgAs as]] [[KeyPgUinteger uinteger]] ) [[KeyPgAs as]] [[KeyPgAny any]] [[KeyPgPtr ptr]]
		[[KeyPgDeclare declare]] **Operator** [[KeyPgOpDelete delete]] ( //buf//  [[KeyPgAs as]] [[KeyPgAny any]] [[KeyPgPtr ptr]] )
		[[KeyPgDeclare declare]] [[KeyPgStaticMember static]] **Operator** [[KeyPgOpDelete delete]][] ( //buf//  [[KeyPgAs as]] [[KeyPgAny any]] [[KeyPgPtr ptr]] )
	End { [[KeyPgType Type]] | [[KeyPgClass Class]] | [[KeyPgUnion Union]] | [[KeyPgEnum Enum]] }

	{ [[KeyPgType Type]] | [[KeyPgClass Class]] | [[KeyPgUnion Union]] } //typename//
		[[KeyPgDeclare declare]] **Operator** [[KeyPgOpFor For]] ()
		[[KeyPgDeclare declare]] **Operator** [[KeyPgOpFor For]] ( [ [[KeyPgByref byref]] | [[KeyPgByval byval]] ] //stp// [[KeyPgAs as]] //typename// )
		[[KeyPgDeclare declare]] **Operator** [[KeyPgOpStep Step]] ()
		[[KeyPgDeclare declare]] **Operator** [[KeyPgOpStep Step]] ( [ [[KeyPgByref byref]] | [[KeyPgByval byval]] ] //stp// [[KeyPgAs as]] //typename// )
		[[KeyPgDeclare declare]] **Operator** [[KeyPgOpNext Next]] ( [ [[KeyPgByref byref]] | [[KeyPgByval byval]] ] //cond// [[KeyPgAs as]] //typename// ) [[KeyPgAs as]] [[KeyPgInteger Integer]]
		[[KeyPgDeclare declare]] **Operator** [[KeyPgOpNext Next]] ( [ [[KeyPgByref byref]] | [[KeyPgByval byval]] ] //cond// [[KeyPgAs as]] //typename//, [ [[KeyPgByref byref]] | [[KeyPgByval byval]] ] //stp// [[KeyPgAs as]] //typename// ) [[KeyPgAs as]] [[KeyPgInteger Integer]]
	End { [[KeyPgType Type]] | [[KeyPgClass Class]] | [[KeyPgUnion Union]] }

	[[KeyPgDeclare declare]] **Operator** //unary_op// ( [ [[KeyPgByref byref]] | [[KeyPgByval byval]] ] //rhs// [[KeyPgAs as]] [[DataType datatype]] ) [[KeyPgAs as]] [[DataType datatype]]
	[[KeyPgDeclare declare]] **Operator** //binary_op// ( [ [[KeyPgByref byref]] | [[KeyPgByval byval]] ] //lhs// [[KeyPgAs as]] [[DataType datatype]], [ [[KeyPgByref byref]] | [[KeyPgByval byval]] ] //rhs// [[KeyPgAs as]] [[DataType datatype]] ) [[KeyPgAs as]] [[DataType datatype]]

	**Operator** //typename//.[[KeyPgCast cast]] () [[KeyPgAs as]] [[DataType datatype]]
	**Operator** //typename//.//assignment_op// ( [ [[KeyPgByref byref]] | [[KeyPgByval byval]] ] //rhs// [[KeyPgAs as]] [[DataType datatype]] )
	**Operator** //unary_op// ( [ [[KeyPgByref byref]] | [[KeyPgByval byval]] ] //rhs// [[KeyPgAs as]] [[DataType datatype]] ) [[KeyPgAs as]] [[DataType datatype]]
	**Operator** //binary_op// ( [ [[KeyPgByref byref]] | [[KeyPgByval byval]] ] //lhs// [[KeyPgAs as]] [[DataType datatype]], [ [[KeyPgByref byref]] | [[KeyPgByval byval]] ] //rhs// [[KeyPgAs as]] [[DataType datatype]] ) [[KeyPgAs as]] [[DataType datatype]]
	**Operator** //typename//.[[KeyPgOpNew new]] ( //size// as uinteger ) [[KeyPgAs as]] [[KeyPgAny any]] [[KeyPgPtr ptr]]
	[[KeyPgStaticMember static]] **Operator** //typename//.[[KeyPgOpNew new]][] ( //size// [[KeyPgAs as]] [[KeyPgUinteger uinteger]] ) [[KeyPgAs as]] [[KeyPgAny any]] [[KeyPgPtr ptr]]
	**Operator** //typename//.[[KeyPgOpDelete delete]] ( //buf//  [[KeyPgAs as]] [[KeyPgAny any]] [[KeyPgPtr ptr]] )
	[[KeyPgStaticMember static]] **Operator** //typename//.[[KeyPgOpDelete delete]][] ( //buf//  [[KeyPgAs as]] [[KeyPgAny any]] [[KeyPgPtr ptr]] )
##
{{fbdoc item="param"}}
	##//typename//## 
		Nom de ##[[KeyPgType Type]]##, ##[[KeyPgClass Class]]##, ##[[KeyPgUnion Union]]## ou ##[[KeyPgEnum Enum]]##.
	##//assignment_op//## 
		##let += -= *= /= \= mod= shl= shr= and= or= xor= imp= eqv= ^=##
	##//unary_op//##
		##""-"" not @ * -> abs sgn fix frac int exp log sin asin cos acos tan atn##
	##//binary_op//##
		##+ - * / \ mod shl shr and or xor imp eqv ^ = <> < > <= >= andalso orelse##

{{fbdoc item="desc"}}
	Les opérateurs intégrés comme ##=##, ##+## et ##cast## ont des comportements prédéfinis lorsqu'ils sont utilisés dans des expressions.  Ces opérateurs peuvent être surchargés pour faire autre chose que ces opérations prédéfinies lorsqu'au moins l'un des arguments de l'opérateur est un type de données ##[[KeyPgType Type]]##, ##[[KeyPgClass Class]]##, ##[[KeyPgEnum Enum]]## ou ##[[KeyPgUnion Union]]##.

	Les opérateurs sont juste des fonctions.  L'opérateur '+' a les fonctionnalités de la fonction ##Function Plus( A as DataType, B as DataType ) as DataType##.  Voir //[[ProPgOperatorOverloading Surcharge d'opérateur]]// pour plus d'informations.  Les opérateurs peuvent être surchargés  pour accepter différents types de données en tant que paramètres.  Seul l'opérateur ##[[KeyPgCast Cast]]## peut être surchargé pour retourner différents types.

	Les membres opérateur non-statiques sont déclarés à l'intérieur de ##[[KeyPgType Type]]## ou ##[[KeyPgClass Class]]##.  Les opérateurs globaux sont déclarés en dehors.  Toutes les définitions de l'opérateur (corps de procédure) doivent apparaître en dehors.

	##**Let**##, ##**Cast**## et autres opérateurs d'affectation doivent être déclarés à l'intérieur de ##[[KeyPgType Type]]## ou ##[[KeyPgClass Class]]##.  Ils transmettent un paramètre caché ##[[KeyPgThis this]]## et ont une valeur de retour du même type de données que le ##[[KeyPgType Type]]## ou la ##[[KeyPgClass Class]]## où ils ont été déclarés.

	Les opérateurs unaires doit être déclarés en dehors de ##[[KeyPgType Type]]##, ##[[KeyPgClass Class]]## ou ##[[KeyPgEnum Enum]]## et ont un type de données de retour déclaré explicitement.  Les opérateurs unaires peuvent être surchargés pour retourner tout type valide de données, sauf pour ##[[KeyPgOpPtrMemberAccess Operator -> (Pointeur vers Accès membre)]]## qui doit retourner un type de données ##[[KeyPgType Type]]## ou ##[[KeyPgClass Class]]##.

	Les opérateurs binaires doivent être déclarés en dehors de ##[[KeyPgType Type]]##, ##[[KeyPgClass Class]]## ou ##[[KeyPgEnum Enum]]## et ont un type de données de retour explicitement déclaré.  Les opérateurs binaires peuvent être surchargés avec des types valides de données, sauf pour les opérateurs relationnels, qui doivent retourner ##[[KeyPgInteger Integer]]##.

	##[[KeyPgLet Let]]## se réfère à l'opérateur d'affectation, comme dans ##LET a=b##. Le mot-clé ##[[KeyPgLet Let]]## est omis dans la pratique courante et n'est pas autorisé en dialecte //[[CompilerOptlang -lang fb]]//.  Toutefois, ##[[KeyPgOpLetlist Let()]]## peut être utilisé pour affecter des champs d'un type de données utilisateur à des variables multiples.

	Voir ##[[KeyPgOpFor For]]##, ##[[KeyPgOpStep Step]]## et ##[[KeyPgOpNext Next]]## pour plus d'informations sur la surcharge de la déclaration ##[[KeyPgFornext For..Next]]## pour une utilisation avec des types définis par l'utilisateur.

{{fbdoc item="ex"}}
{{fbdoc item="filename" value="examples/manual/udt/operator.bas"}}%%(freebasic)
Type Vector2D
  As Single x, y

  '' Return a string containing the vector data.
  Declare Operator Cast() As String
End Type

'' Allow two vectors to be able to be added together.
Declare Operator + ( ByRef lhs As Vector2D, ByRef rhs As Vector2D ) As Vector2D

Operator Vector2D.cast () As String
  Return "(" + Str(x) + ", " + Str(y) + ")"
End Operator

Operator + ( ByRef lhs As Vector2D, ByRef rhs As Vector2D ) As Vector2D
  Return type<Vector2D>( lhs.x + rhs.x, lhs.y + rhs.y )
End Operator

Dim a As Vector2D = type<Vector2D>( 1.2, 3.4 )
Dim b As Vector2D = type<Vector2D>( 8.9, 6.7 )

Print "a = "; a
Print "b = "; b
Print "a + b = "; a + b
%%
{{fbdoc item="lang"}}
	- Disponible seulement dans le dialecte //[[CompilerOptlang -lang fb]]//.

{{fbdoc item="see"}}
	- ##[[KeyPgClass Class]]##
	- ##[[KeyPgClass Enum]]##
	- ##[[KeyPgType Type]]##

{{fbdoc item="back" value="CatPgUserDefTypes|User Defined Types"}}

