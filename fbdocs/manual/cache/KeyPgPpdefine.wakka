{{fbdoc item="title" value="#DEFINE"}}----
Directive du préprocesseur pour définir une macro

{{fbdoc item="syntax"}}##
	#define //identifier// //text//
	#define //identifier//( [ //parameters// ] ) //macro_text//
	#define //identifier//( [ //parameters//, ] //variadic_parameter//[[KeyPgDots ...]] ) //macro_text//
	##
{{fbdoc item="desc"}}
	Mot-clé du préprocesseur qui définit un identifiant avec un sens personnalisé:
		- Des ##//define//## non-vides (avec ##//texte//##) sont remplacés par leur ##//texte//## lorsque le source est analysé, permettant une sorte de "raccourci".  ##//text//## peut être vide, ce qui est utile pour faire des ##//define//## conçus pour le contrôle des ##[[KeyPgPpifdef #ifdef]]## et ##[[KeyPgPpifndef #ifndef]]##.
		- Des ##//define//## avec des paramètres sont remplacés par le ##//macro_text//##, qui contiendra tous les arguments passés remis à leur place.  **Note:** Le caractère ouverture des parenthèses ("##(##") doit suivre immédiatement l' ##//identifier//##, il ne doit y avoir aucun espace-blanc entre eux, sinon les parenthèses seront prises comme faisant partie du ##//text//##.
		- Les ##//define//## ne sont visibles que dans la portée où ils sont définis.  S'il est défini au niveau du module, ##//define//## est visible tout au long du module.  Si l'##//identifier//## est défini dans une instruction à portée composée (##[[KeyPgSub Sub]]##, ##[[KeyPgFornext For..Next]]##, ##[[KeyPgWhilewend While..Wend]]##, ##[[KeyPgDoloop Do..Loop]]##, ##[[KeyPgScope Scope..End Scope]]##, etc), l'##//identifier//## n'est visible que dans cette portée.
		- Les espaces de noms n'ont aucun effet sur la visibilité d'un ##//define//##.

	Les ##//Identifier//## peuvent être examinés pour voir si ils ont été définis avec ##[[KeyPgPpifdef #ifdef]]## et ##[[KeyPgPpifndef #ifndef]]##, ce qui peut être utilisé pour cacher des parties du code pour le compilateur (compilation conditionnelle).

	Pour définir des identificateurs avec des valeurs constantes qui leur sont associées, ##[[KeyPgConst Const]]## peut être utilisé comme une méthode plus puissante.

	Utiliser ##[[KeyPgDots ...]]## (une ellipse) derrière le dernier paramètre d'une macro permet de créer une macro variadique. Cela signifie qu'il est possible de passer n'importe quel nombre d'arguments à //variadic_parameter//, qui peuvent être utilisés dans //macro_text//, tout comme un paramètre macro normal. Le //variadic_parameter// sera étendu à la liste complète des arguments passés, y compris les virgules et peut également être complètement vide.
	
{{fbdoc item="ex"}}
{{fbdoc item="filename" value="examples/manual/prepro/define.bas"}}%%(freebasic)
'' Definition and check
#define DEBUGGING
#ifdef DEBUGGING
' ... statements
  #endif

'' Simple definition/text replacement
#define FALSE 0
#define TRUE (not FALSE)

'' Function like definition
#define MyRGB(R,G,B) (((R)SHL 16)  OR ((G)SHL 8) OR (B)) 
print hex( MyRGB(&hff, &h00, &hff) )

'' Line continuation and statements in a definition
#define printval(bar) _
	print #bar; " ="; bar

'' #defines are visible only in the scope where they are defined
scope
#define LOCALDEF 1
end scope

#ifndef LOCALDEF
#    print LOCALDEF is not defined
#endif

'' namespaces have no effect on the visibility of a define
namespace foo
#    define NSDEF
end namespace

#ifdef NSDEF
#	print NSDEF is defined
#endif
%%

{{fbdoc item="filename" value="examples/manual/prepro/variadic.bas"}}%%(freebasic)
'' Using a variadic macro to wrap a variadic function
#include "crt.bi"
#define eprintf(format, args...) fprintf(stderr, format, args)
eprintf(!"Hello from printf: %i %s %i\n", 5, "test", 123)

'' LISP-like accessors allowing to modify comma-separated lists
#define car(a, b...) a
#define cdr(a, b...) b
%%

{{fbdoc item="diff"}}
	- Nouveau pour ""FreeBASIC""

{{fbdoc item="see"}}
	- ##[[KeyPgPpmacro #macro]]##
	- ##[[KeyPgOpPpStringize # Preprocessor stringize]]##
	- ##[[KeyPgOpPpConcat ## Preprocessor concatenate]]##
	- ##[[KeyPgPpifdef #ifdef]]##
	- ##[[KeyPgPpifndef #ifndef]]##
	- ##[[KeyPgPpundef #undef]]##
	- ##[[KeyPgDefined defined]]##
	- ##[[KeyPgConst Const]]##

{{fbdoc item="back" value="CatPgPreProcess|Preprocessor"}}