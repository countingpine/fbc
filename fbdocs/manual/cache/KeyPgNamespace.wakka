{{fbdoc item="title" value="NAMESPACE"}}----
D&eacute;clare un bloc d'espace de noms

{{fbdoc item="syntax"}}##
	**Namespace** //identifier// [ [[KeyPgAlias Alias]] "//aliasname//" ]
		//statements//
	**End Namespace**
##
{{fbdoc item="param"}}
	##//identifier//##
		Le nom de l'espace de noms.
	##//aliasname//##
		Un autre nom externe pour l'espace de noms.

{{fbdoc item="desc"}}
	Les espaces de noms sont couramment utilis&eacute;s dans les biblioth&egrave;ques si vous ne voulez pas que tous les symboles de celle-ci s'entassent et s'ajoutent sur l'espace de l'utilisateur (appel&eacute; Global Namespace = Espace de noms global). 

	Par exemple, si vous utilisez la librairie "Forms", elle pourrait d&eacute;finir le type de Point pour d&eacute;crire les coordonn&eacute;es X et Y, et vous pourriez &eacute;galement le d&eacute;finir dans un autre but. Cela peut &ecirc;tre r&eacute;solu par la cr&eacute;ation de l'espace de noms pour la biblioth&egrave;que "Forms", puis se r&eacute;f&eacute;rer &agrave; son type Point comme Forms.Point, et le v&ocirc;tre en tant que Point. 

	Pour acc&eacute;der aux symboles dupliqu&eacute;s d&eacute;finis dans l'espace global de noms utilisez: ##.UnSymbole## (ou ##..UnSymbole## si &agrave; l'int&eacute;rieur d'un bloc [[KeyPgWith With..End With]]).

{{fbdoc item="ex"}}
{{fbdoc item="filename" value="examples/manual/module/namespace.bas"}}%%(freebasic)
Namespace Forms
	Type Point '' A 2D point
		As Integer x
		As Integer y
	End Type
	'' Since we are inside of the namespace, Point resolves to Forms.Point.
	Sub AdjustPoint( ByRef pt As Point, ByVal newx As Integer, ByVal newy As Integer )
		pt.x = newx
		pt.y = newy
	End Sub
End Namespace

Type Point '' A 3D point
	As Integer x
	As Integer y
	As Integer z
End Type

Sub AdjustPoint( ByRef pt As Point, ByVal newx As Integer, ByVal newy As Integer, ByVal newz As Integer )
	pt.x = newx
	pt.y = newy
	pt.z = newz
End Sub

Dim pt1 As Point
AdjustPoint( pt1, 1, 1, 1 )
Dim pt2 As Forms.Point
Forms.AdjustPoint( pt2, 1, 1 )
%%
	
	{{fbdoc item="lang"}}
	- Les espaces de noms ne sont pas permis dans le dialecte //[[CompilerOptlang -lang qb]]//.
{{fbdoc item="diff"}}
- Nouveau pour FreeBASIC
{{fbdoc item="see"}}
- [[KeyPgUsing Using (Espaces de noms)]]

#include <string.h>
#include <ctype.h>

namespace mylib
{
	int test() 
	{
		return 123;
	}
}
%%
	%%(freebasic)
'' test.bas

extern "c++" lib "mylib"
	namespace mylib alias "mylib"
		declare function test() as integer
	end namespace
end extern

print mylib.test()
%%

{{fbdoc item="lang"}}
	- Namespaces are not supported in the //[[CompilerOptlang -lang qb]]// dialect.

{{fbdoc item="diff"}}
	- New to ""FreeBASIC""

{{fbdoc item="see"}}
	- [[KeyPgUsing Using (Namespaces)]]

{{fbdoc item="back" value="CatPgModularizing|Modularizing"}}