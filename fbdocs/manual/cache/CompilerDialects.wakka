{{fbdoc item="title" value="Les dialectes du FreeBASIC"}}----

	La version 0.17b de ""FreeBASIC"" introduit une nouvelle option ligne de commande //[[CompilerOptlang -lang]]//, utilisée pour changer le mode de compatibilité de langage pour les différents dialectes du langage de base.

	À partir de la version 0.18.3b le dialecte //[[CompilerOptlang -lang qb]]// a été encore plus restreinte pour ne permettre que ce qui aurait été admis dans [[QuickBASIC QuickBASIC]].

	Dans la version 0.18.4b le dialecte //[[CompilerOptlang -lang fblite]]// a été ajouté, pour remplacer à l'avenir ##//-lang deprecated//##.

	Dans la versio 0.20.0b la directive ##[[KeyPgPplang #lang]]## et la métacommande ##[[KeyPgMetaLang $lang]]## ont été ajoutées pour préciser un dialecte pour la source.

	{{table columns="2" cellpadding="1" cells="-lang option;description;fb;Compatibilité FreeBASIC (par défaut);qb;Compatibilité qbasic;fblite;Compatibilité langage FreeBASIC, avec un style de codage le plus possible compatible QBASIC;deprecated;Compatibilité avec FB 0.16"}}

	L'option //[[CompilerOptlang -lang]]// a été nécessaire pour permettre à ""FreeBASIC"" pour supporter l'orientation objet et d'autres fonctionnalités dans le futur, sans paralyser le support ""QuickBASIC"" ou la compatibilité de rupture avec les sources de l'ancien ""FreeBASIC"", et sans rendre ""FreeBASIC"" difficile à maintenir avec de nombreuses versions différentes de paquets très similaires. Le support de ""QuickBASIC"" peut continuer à être amélioré, si nécessaire, sans rompre les sources écrites spécifiquement pour ""FreeBASIC"".

	Pour compiler les sources de l'ancien GW-BASIC ou ""QuickBASIC/QBasic"" sans trop de changements, utilisez l'option //[[CompilerOptlang -lang qb]]// sur la ligne de commande lors de l'exécution de ##fbc##. Cette option va évoluer vers une meilleure compatibilité avec le code ""QuickBASIC/QBasic"".

	Pour compiler les sources ""FreeBASIC"" from 0.16b, utilisez l'option //[[CompilerOptlang -lang deprecated]]//. Cette option est maintenue pour assurer la compatibilité et ne va pas évoluer à l'avenir et elle est susceptible de disparaître lorsque ""FreeBASIC"" atteindra une réalisation non-beta.

	Pour les programmeurs qui veulent accéder à certaines des nouvelles fonctionnalités de ""FreeBASIC"", mais qui veulent conserver un style de programmation plus proche de QBASIC, utilisez l'option //[[CompilerOptlang -lang fblite]]//.  Ce dialecte ne subira pas de changements importants dans l'avenir, mais continuera à être maintenu et supporté.
	Cette option est également compatible avec la plupart des sources qui ont été écrites en utilisant les anciennes versions de ""FreeBASIC"".
	
	Il est recommandé d'utiliser //[[CompilerOptlang -lang fb]]// pour de nouveaux projets, comme de nouvelles fonctions (classes d'objets, héritage ..) qui seront ajoutées exclusivement à ce dialecte.
	
	
{{fbdoc item="section" value="-lang fb (le mode par défaut)"}}
	
	**Non pris en charge:**

	""1"") déclaration de variable implicite
		- Toutes les variables doivent être explicitement déclarées, en utilisant ##[[KeyPgDim Dim]]##, ##[[KeyPgRedim Redim]]##, ##[[KeyPgVar Var]]##, ##[[KeyPgConst Const]]##, ##[[KeyPgExtern Extern]]## ou ##[[KeyPgCommon Common]]##.

	""2"") suffixes de type (##!, #, $, %, &##)
		- Ils ne sont autorisés que pour les littéraux numériques, mais il est recommandé d'utiliser ##[[KeyPgCast Cast]]## ou les suffixes numériques littéraux ##f## (##single##), ##d## (##double##), ##ll## (##longint##), ##ul## (##uinteger##), ##ull## (##ulongint##) pour résoudre la surcharge.

	""3"") ##[[KeyPgDefbyte Defbyte]]##, ##[[KeyPgDefubyte Defubyte]]##, ##[[KeyPgDefshort Defshort]]##, ##[[KeyPgDefushort Defushort]]##, ##[[KeyPgDefint Defint]]##, ##[[KeyPgDefuint Defuint]]##, ##[[KeyPgDeflng Deflng]]##, ##[[KeyPgDeflongint Deflongint]]##, ##[[KeyPgDefulongint Defulongint]]##, ##[[KeyPgDefsng Defsng]]##, ##[[KeyPgDefdbl Defdbl]]##, ##[[KeyPgDefstr Defstr]]##
		- Un type explicite ("##As //T//##") est nécessaire lors de la déclaration de variables en utilisant ##[[KeyPgDim Dim]]##, ##[[KeyPgRedim Redim]]##, ##[[KeyPgExtern Extern]]## ou ##[[KeyPgCommon Common]]##. Les variables déclarées avec ##[[KeyPgVar Var]]## ou ##[[KeyPgConst Const]]## voient leur type déduit à partir d'une valeur d'initialisation (un type explicite est facultatif en utilisant ##[[KeyPgConst Const]]##).

	""4"") tous les paramètres passés par référence par défaut
		- Par défaut, tous les types intrinsèques scalaires - les types numériques et pointeurs - sont passés par valeur (##[[KeyPgByval Byval]]##). Tout autre type - ##[[KeyPgString String]]## ou un type défini par l'utilisateur - est passé par référence (##[[KeyPgByref Byref]]##).
		- Utilisez l'option de ligne de commande ##-w pedantic## pour avoir les paramètres sans signalement explicite de ##[[KeyPgByval Byval]]## ou ##[[KeyPgByref Byref]]##.

	""5"") ##OPTION##s de toute nature (pas de sensibilité au contexte)
		- Au lieu de l'option ##[[KeyPgOptionnokeyword Option Nokeyword]]##, utilisez ###undef##.
		- Au lieu de l'option ##[[KeyPgOptionescape Option Escape]]##, utilisez: ##!"certaines esc seq \n\r"## (notez le caractère '##!##') et passez ##-w pedantic## pour rechercher les séquences d'échappement possibles.
		- ##[[KeyPgOptionexplicit Option Explicit]]## n'est pas nécessaire, voir le point 1.
		- Au lieu de l'option ##[[KeyPgOptiondynamic Option Dynamic]]##, déclarez des tableaux de longueur variable à l'aide de ##[[KeyPgRedim Redim]]##. ##[[KeyPgDim Dim]]## peut également être utilisé pour déclarer les tableaux de longueur variable utilisant une variable ou aucun indice.
		- Au lieu de l'option ##[[KeyPgOptionbase Option Base]]##, utilisez des indices de la limite inférieure explicites dans les déclarations de tableaux.
		- Au lieu de l'option ##[[KeyPgOptionprivate Option Private]]##, utilisez ##[[KeyPgPrivate Private]]## pour déclarer des procédures avec des liens internes.
		- Au lieu des options ##[[KeyPgOptiongosub Option Gosub]]## et ##[[KeyPgOptionnogosub Option Nogosub]]##, utilisez des procédures avec ##[[KeyPgSub Sub]]## ou ##[[KeyPgFunction Function]]##.

	""6"") points dans les noms de symbole 
		- Utilisez les espaces de noms à la place.

	""7"") ##[[KeyPgGosub Gosub]]## ou ##[[KeyPgReturn Return (depuis Gosub)]]##
		- Les procédures imbriquées pourront être autorisées dans le futur.

	""8"") ##[[KeyPgOngosub On Gosub]]## or ##[[KeyPgOngoto On Goto]]##
		- Use ##SELECT expr AS CONST## for the latter.

	""9"") ##[[KeyPgOnerror On Error]]## ou ##[[KeyPgResume Resume]]##
		- La plupart des procédures d'exécution et de la bibliothèque graphique maintenant retournent un code d'erreur:  ##IF OPEN( "text" FOR INPUT AS #1 ) <> 0 THEN error##... 

	""10"") ##'$DYNAMIC##, ##'$STATIC##, ##'$INCLUDE## méta-commandes intégrées dans les commentaires
		- Voir le point 5 sur ##[[KeyPgOptiondynamic Option Dynamic]]##.
		- Utilisez ###include "filename"## au lieu de ##'$include##.

	""11"") ##[[KeyPgCall Call]]## ou ##[[KeyPgLet Let]]##
		- Retirez-les.

	""12"") les étiquettes numériques
		- Pas de commentaire.

	""13"") symboles globaux avec le même nom que des mots-clés 
		- Les déclarer à l'intérieur d'un espace de noms. 


{{fbdoc item="section" value="-lang deprecated"}}

	**Pris en charge:** //Tout ce qui est permis dans la version 0.16b, mais://

	""1"") ##GOSUB##/##RETURN## et ##ON ... GOSUB## (même au niveau du module)
		- donc la mise en œuvre de ##GOSUB## pourrait être thread-dangereuse dans le mode ##-lang qb##, permettant une rapidité d'exécution (##-lang qb## ne supporte pas le "multi-threading", alors que ##-lang deprecated## le supporte).

	**Non pris en charge:**

	""1"") Classes
		- Les points dans les noms de symbole rendent ceci trop difficile et / ou ambigu.

	""2"") Surcharge des opérateurs
		- Les points dans les noms de symbole rendent ceci trop difficile et / ou ambigu.

	""3"") Les constructeurs, les destructeurs et les méthodes dans ##TYPE##s.
		- Les points dans les noms de symbole rendent ceci trop difficile et / ou ambigu.


{{fbdoc item="section" value="-lang fblite"}}

	**Pris en charge:** //Tout ce qui est permis dans le dialecte //[[CompilerOptlang -lang deprecated]]//, plus..//
	
	""1"") ##GOSUB##/##RETURN##
	    - Utilisez ##[[KeyPgOptiongosub Option Gosub]]## pour valider.  Cela va désactiver ##RETURN## de la sortie d'une procédure, en raison de l'ambiguïté.
	
	**Non pris en charge:**

	""1"") Blocs ##[[KeyPgScope Scope]]##
		- Toutes les variables ont la portée niveau procédure.  Les blocs de ##[[KeyPgScope Portée]]## explicite seront peut être ajoutés plus tard.

{{fbdoc item="section" value="-lang qb"}}
	
	**Pris en charge:** //Tout n'est pas pris en charge/autorisé dans le dialecte //[[CompilerOptlang -lang fb]]//, plus..//

	""1"") ##[[KeyPgCall Call]]## peut être utilisé avec des fonctions avant référencement..

	""2"") ##[[KeyPgShared Shared]]## peut être utilisé dans les fonctions. (en cours)

	""3"") Toutes les variables, implicitement ou explicitement déclarées, sont toujours allouées dans la portée procédure, comme dans ""QuickBASIC"".

	""4"") La déclaration ##[[KeyPgData Data]]## ne regardera pas les symboles, chaque symbole est supposé être une chaîne littérale, sans les guillemets, comme dans ""QuickBASIC"".


	**Non pris en charge:**

	""1"") Multi-threading
		- Aucune des procédures de ##[[CatPgThreading threading]]## ne peut être utilisée.

	""2"") Les classes et les espaces de noms

	""3"")  La surcharge de procédure et d'opérateur

	""4"") Les constructeurs, les destructeurs et autres membres de procédures dans les définitions de ##[[KeyPgType Type]]## definitions.

	""5"") Blocs ##[[KeyPgScope Scope]]##

	""6"") Blocs ##[[KeyPgExternBlock Extern]]##

	""7"") Initialisation de variable
		- Toutes les variables sont déplacées vers la la portée de la procédure (comme dans ""QuickBASIC""), ce qui rend l'initialisation de variables locales trop difficile à supporter.

{{fbdoc item="back" value="DocToc|Table of Contents"}}

