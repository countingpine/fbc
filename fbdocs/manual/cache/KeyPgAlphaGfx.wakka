{{fbdoc item="title" value="Alpha (Param&egrave;tre Put graphique)"}}----
Paramètre de la déclaration graphique ##[[KeyPgPutgraphics Put]]## qui sélectionne //alpha blending// comme méthode.

{{fbdoc item="syntax"}}##
	**Put** [ //target//, ] [ STEP ] ( //x//,//y// ), //source// [ ,( //x1//,//y1// )-( //x2//,//y2// ) ], **Alpha**
	**Put** [ //target//, ] [ STEP ] ( //x//,//y// ), //source// [ ,( //x1//,//y1// )-( //x2//,//y2// ) ], **Alpha**, //alphaval//
##
{{fbdoc item="param"}}
	##**Alpha**##
		Obligatoire.
	##//alphaval//##
		Paramètre alpha facultatif de 0 à 255.  Remplace les valeurs alpha en pixels individuels.

{{fbdoc item="desc"}}
	##**Alpha**## sélectionne //alpha blending// comme méthode pour ##[[KeyPgPutgraphics Put]]## une image.  Si le paramètre ##//alphaval//## est spécifié, il remplace la valeur alpha de chaque pixel, et le masque de couleur (magenta) sera considéré comme transparent.  Ceci fonctionne en profondeurs de couleur de 15, 16, 24, ou 32-bit.

	Si ##//alphaval//## n'est pas spécifié, ##**Alpha**## ne fonctionnera que pour une profondeur de couleur de 32-bit et ##[[KeyPgPutgraphics Put]]## utilisera la valeur alpha embarquée dans chaque pixel.  Les pixels utilisant le masque de couleur seront traîtés normalement et dessinés avec leur valeur alpha.
	
	##**Alpha**## a aussi un autre mode qui permet de ##[[KeyPgPutgraphics Put]]##er une image 8-bit au-dessus d'une image 32-bit.  Dans ce cas, le canal alpha de l'image 32-bit sera remplacé par le contenu de l'image 8-bit.

	    Les valeurs Alpha sont comprises entre 0 et 255.  Une valeur alpha de 0 ne modifiera pas l'image.  Toutes les autres valeurs seront augmentées de 1 pour obtenir une fourchette de 2 à 256, puis le résultat sera divisé par 256 pour obtenir une valeur entre 1/128 et 1, qui sera utilisée pour calculer la valeur exacte de chaque pixel, à partir des pixels de la source et de la destination.  Ainsi, 255 est pratiquement équivalent à dessiner en utilisant ##[[KeyPgPutgraphics Put]]## avec le mode ##Transparence##, 0 ne faisant rien, et toutes les autres valeurs donnant des résultats échelonnés entre les deux.

{{fbdoc item="ex"}}
	Cet exemple compare les deux modes ##**Alpha**##, incluant leur réaction au masque de couleur
{{fbdoc item="filename" value="examples/manual/gfx/put-alpha.bas"}}%%(freebasic)
'' Valide un ecran 32-bit
screenres 320, 200, 32

'' Dessine un fond a damier
for y as integer = 0 to 199
	for x as integer = 0 to 319
	    pset (x, y), iif((x shr 2 xor y shr 2) and 1, rgb(160, 160, 160), rgb(128, 128, 128))
	next x
next y

'' Fabrique image sprite a placer(Put)
dim img as any ptr = imagecreate(32, 32, rgba(0, 0, 0, 0))
for y as single = -15.5 to 15.5
	for x as single = -15.5 to 15.5
	    dim as integer r, g, b, a
	    if y <= 0 then
	        if x <= 0 then
	            r = 255: g = 0: b = 0   '' rouge
	        else
	            r = 0: g = 0: b = 255   '' bleu
	        end if
	    else
	        if x <= 0 then
	            r = 0: g = 255: b = 0   '' vert
	        else
	            r = 255: g = 0: b = 255 '' magenta (masque transparent de couleur)
	        end if
	    end if
	    a = 255 - (x ^ 2 + y ^ 2)
	    if a < 0 then a = 0': r = 255: g = 0: b = 255
	    pset img, (15.5 + x, 15.5 - y), rgba(r, g, b, a)
	next x
next y

'' Place avec valeur Alpha unique, Trans pour comparaison
draw string (32, 10), "Single alpha"
put (80 - 16,  50 - 16), img, alpha, 64
put (80 - 16, 100 - 16), img, alpha, 192
put (80 - 16, 150 - 16), img, trans

'' Place avec plein canal Alpha
draw string (200, 10), "Full alpha"
put (240 - 16, 100 - 16), img, alpha

'' Libere la memoire image
imagedestroy img

'' Attend touche appuyee
sleep
%%
{{image class="center" title="Put Alpha example output" url="/images/AL0.PNG"}}

	Cet exemple montre l'utilisation d'une image 8-bit pour valider un canal alpha 32-bit
{{fbdoc item="filename" value="examples/manual/gfx/put-alpha-8bit.bas"}}%%(freebasic)
dim as any ptr img8, img32
dim as integer x, y, i

'' Valide un ecran graphique 8-bit
screenres 320, 200, 8
for i = 0 to 255
	palette i,  i, i, i
next i
color 255, 0

'' Cree une image 8-bit
img8 = imagecreate(64, 64, 0,  8)
for y = 0 to 63
	for x = 0 to 63
	    dim as single x2 = x - 31.5, y2 = y - 31.5
	    dim as single t = sqr(x2 ^ 2 + y2 ^ 2) / 5
	    pset img8, (x, y), sin(t) ^ 2 * 255
	next x
next y

draw string (16, 4), "8-bit Alpha sprite"
put (16, 16), img8
sleep


'' Valide un ecran graphique 32-bit
screenres 320, 200, 32
for y = 0 to 199
	for x = 0 to 319
	    pset (x, y), iif(x - y and 3, rgb(160, 160, 160), rgb(128, 128, 128))
	next x
next y

'' Cree un sprite 32-bit entierement opaque
img32 = imagecreate(64, 64, 0, 32)
for y = 0 to 63
	for x = 0 to 63
	    pset img32, (x, y), rgb(x * 4, y * 4, 128)
	next x
next y

draw string (16, 4), "Original Alpha channel"
put (16, 16), img32, alpha

'' Place un nouveau canal alpha utilisant une image 8-bit
put img32, (0, 0), img8, alpha

draw string (16, 104), "New Alpha channel"
put (16, 116), img32, alpha

''Libere la memoire pour les deux images
imagedestroy img8
imagedestroy img32

sleep%%
{{image class="center" title="Put Alpha example 2 output" url="/images/AL1.PNG"}}

{{fbdoc item="diff"}}
	- Nouveau pour ""FreeBASIC""

{{fbdoc item="see"}}
	- ##[[KeyPgPutgraphics Put (Graphics)]]##
	- ##[[KeyPgTransGfx Trans]]##
	- ##[[KeyPgCustomgfx Custom]]##
	
{{fbdoc item="back" value="CatPgGfx2D|2D Drawing Functions"}}

