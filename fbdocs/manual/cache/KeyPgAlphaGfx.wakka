{{fbdoc item="title" value="ALPHA"}}----
Param&egrave;tre de la d&eacute;claration graphique ##[[KeyPgPutgraphics Put]]## qui s&eacute;lectionne //alpha blending// comme m&eacute;thode.     

{{fbdoc item="syntax"}}##
	**Put** [ //target//, ] [ STEP ] ( //x//,//y// ), //source// [ ,( //x1//,//y1// )-( //x2//,//y2// ) ], **Alpha**
	**Put** [ //target//, ] [ STEP ] ( //x//,//y// ), //source// [ ,( //x1//,//y1// )-( //x2//,//y2// ) ], **Alpha**, //alphaval//
##
{{fbdoc item="param"}}
	##**Alpha**##
		Obligatoire.
	##//alphaval//##
		Param&egrave;tre alpha facultatif de 0 &agrave; 255.  Remplace les valeurs alpha en pixels individuels.

{{fbdoc item="desc"}}
	##**Alpha**## s&eacute;lectionne //alpha blending// comme m&eacute;thode pour ##[[KeyPgPutgraphics Put]]## une image.  Si le param&egrave;tre ##//alphaval//## est sp&eacute;cifi&eacute;, il remplace la valeur alpha de chaque pixel, et le masque de couleur (magenta) sera consid&eacute;r&eacute; comme transparent.  Ceci fonctionne en profondeurs de couleur de 15, 16, 24, ou 32-bit.

	Si ##//alphaval//## n&apos;est pas sp&eacute;cifi&eacute;, ##**Alpha**## ne fonctionnera que pour une profondeur de couleur de 32-bit et ##[[KeyPgPutgraphics Put]]## utilisera la valeur alpha embarqu&eacute;e dans chaque pixel.  Les pixels utilisant le masque de couleur seront tra&icirc;t&eacute;s normalement et dessin&eacute;s avec leur valeur alpha.
	
	##**Alpha**## a aussi un autre mode qui permet de ##[[KeyPgPutgraphics Put]]##er une image 8-bit au-dessus d&apos;une image 32-bit.  Dans ce cas, le canal alpha de l&apos;image 32-bit sera remplac&eacute; par le contenu de l&apos;image 8-bit.

	    Les valeurs Alpha sont comprises entre 0 et 255.  Une valeur alpha de 0 ne modifiera pas l&apos;image.  Toutes les autres valeurs seront augment&eacute;es de 1 pour obtenir une fourchette de 2 &agrave; 256, puis le r&eacute;sultat sera divis&eacute; par 256 pour obtenir une valeur entre 1/128 et 1, qui sera utilis&eacute;e pour calculer la valeur exacte de chaque pixel, &agrave; partir des pixels de la source et de la destination.  Ainsi, 255 est pratiquement &eacute;quivalent &agrave; dessiner en utilisant ##[[KeyPgPutgraphics Put]]## avec le mode ##Transparence##, 0 ne faisant rien, et toutes les autres valeurs donnant des r&eacute;sultats &eacute;chelonn&eacute;s entre les deux.

{{fbdoc item="ex"}}
	Cet exemple compare les deux modes ##**Alpha**##, incluant leur r&eacute;action au masque de couleur
{{fbdoc item="filename" value="examples/manual/gfx/put-alpha.bas"}}%%(freebasic)
&apos;&apos; Valide un ecran 32-bit
screenres 320, 200, 32

&apos;&apos; Dessine un fond a damier
for y as integer = 0 to 199
	for x as integer = 0 to 319
	    pset (x, y), iif((x shr 2 xor y shr 2) and 1, rgb(160, 160, 160), rgb(128, 128, 128))
	next x
next y

&apos;&apos; Fabrique image sprite a placer(Put)
dim img as any ptr = imagecreate(32, 32, rgba(0, 0, 0, 0))
for y as single = -15.5 to 15.5
	for x as single = -15.5 to 15.5
	    dim as integer r, g, b, a
	    if y <= 0 then
	        if x <= 0 then
	            r = 255: g = 0: b = 0   &apos;&apos; rouge
	        else
	            r = 0: g = 0: b = 255   &apos;&apos; bleu
	        end if
	    else
	        if x <= 0 then
	            r = 0: g = 255: b = 0   &apos;&apos; vert
	        else
	            r = 255: g = 0: b = 255 &apos;&apos; magenta (masque transparent de couleur)
	        end if
	    end if
	    a = 255 - (x ^ 2 + y ^ 2)
	    If a < 0 Then a = 0&apos;: r = 255: g = 0: b = 255
	    pset img, (15.5 + x, 15.5 - y), rgba(r, g, b, a)
	next x
next y

&apos;&apos; Place avec valeur Alpha unique, Trans pour comparaison
draw string (32, 10), "Single alpha"
put (80 - 16,  50 - 16), img, alpha, 64
put (80 - 16, 100 - 16), img, alpha, 192
put (80 - 16, 150 - 16), img, trans

&apos;&apos; Place avec plein canal Alpha
draw string (200, 10), "Full alpha"
put (240 - 16, 100 - 16), img, alpha

&apos;&apos; Libere la memoire image
imagedestroy img

&apos;&apos; Attend touche appuyee
sleep
%%
<div class="fb_img"><img src="images/AL0.PNG" />

	Cet exemple montre l&apos;utilisation d&apos;une image 8-bit pour valider un canal alpha 32-bit
{{fbdoc item="filename" value="examples/manual/gfx/put-alpha-8bit.bas"}}%%(freebasic)
dim as any ptr img8, img32
dim as integer x, y, i

&apos;&apos; Valide un ecran graphique 8-bit
screenres 320, 200, 8
for i = 0 to 255
	palette i,  i, i, i
next i
color 255, 0

&apos;&apos; Cree une image 8-bit
img8 = imagecreate(64, 64, 0,  8)
for y = 0 to 63
	for x = 0 to 63
	    dim as single x2 = x - 31.5, y2 = y - 31.5
	    dim as single t = sqr(x2 ^ 2 + y2 ^ 2) / 5
	    pset img8, (x, y), sin(t) ^ 2 * 255
	next x
next y

draw string (16, 4), "8-bit Alpha sprite"
put (16, 16), img8
sleep


&apos;&apos; Valide un ecran graphique 32-bit
screenres 320, 200, 32
for y = 0 to 199
	for x = 0 to 319
	    pset (x, y), iif(x - y and 3, rgb(160, 160, 160), rgb(128, 128, 128))
	next x
next y

&apos;&apos; Cree un sprite 32-bit entierement opaque
img32 = imagecreate(64, 64, 0, 32)
for y = 0 to 63
	for x = 0 to 63
	    pset img32, (x, y), rgb(x * 4, y * 4, 128)
	next x
next y

draw string (16, 4), "Original Alpha channel"
put (16, 16), img32, alpha

&apos;&apos; Place un nouveau canal alpha utilisant une image 8-bit
put img32, (0, 0), img8, alpha

draw string (16, 104), "New Alpha channel"
put (16, 116), img32, alpha

&apos;&apos;Libere la memoire pour les deux images
imagedestroy img8
imagedestroy img32

sleep%%
<div class="fb_img"><img src="images/AL1.PNG" />

{{fbdoc item="diff"}}
	- Nouveaut&eacute; Freebasic

{{fbdoc item="see"}}
	- ##[[KeyPgPutgraphics Put (Graphics)]]##
	- ##[[KeyPgTransGfx Trans]]##
	- ##[[KeyPgCustomgfx Custom]]##
	
{{fbdoc item="back" value="CatPgGfx2D|2D Drawing Functions"}}