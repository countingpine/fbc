{{fbdoc item="title" value="Op&eacute;rateur Not (Compl&eacute;ment de bits)"}}----
Retourne la manipulation de bits (complément) d'une valeur numérique

{{fbdoc item="syntax"}}##
	[[KeyPgDeclare declare]] [[KeyPgOperator operator]] **Not** ( [[KeyPgByref byref]] //rhs// [[KeyPgAs as]] [[KeyPgByte byte]] ) [[KeyPgAs as]] [[KeyPgInteger integer]]
	[[KeyPgDeclare declare]] [[KeyPgOperator operator]] **Not** ( [[KeyPgByref byref]] //rhs// [[KeyPgAs as]] [[KeyPgUbyte ubyte]] ) [[KeyPgAs as]] [[KeyPgInteger integer]]
	[[KeyPgDeclare declare]] [[KeyPgOperator operator]] **Not** ( [[KeyPgByref byref]] //rhs// [[KeyPgAs as]] [[KeyPgSingle single]] ) [[KeyPgAs as]] [[KeyPgInteger integer]]
	[[KeyPgDeclare declare]] [[KeyPgOperator operator]] **Not** ( [[KeyPgByref byref]] //rhs// [[KeyPgAs as]] [[KeyPgDouble double]] ) [[KeyPgAs as]] [[KeyPgInteger integer]]

	[[KeyPgDeclare declare]] [[KeyPgOperator operator]] **Not** ( [[KeyPgByref byref]] //rhs// [[KeyPgAs as]] //T// ) [[KeyPgAs as]] //T//
##
{{fbdoc item="usage"}}##
	//result// = **Not** //rhs//
##
{{fbdoc item="param"}}
	##//rhs//##
		Le côté droit de l'expression.
	##//T//##
		Un type numérique.

{{fbdoc item="ret"}}
	Retourne la manipulation de bits-complément de son opérande.

{{fbdoc item="desc"}}
	Cet opérateur retourne la manipulation de bits-complément de son opérande, une opéation logique dont le résultat est une valeur dont les bits mis &agrave dépendent des bits de son opérande.

	La table de vérité ci-dessous montre toutes les combinaisons d'une opération booléenne de complément:

	{{table columns="2" cellpadding="2" cells="Bit côté droit;Résultat;0;1;1;0"}}

	Cet opérateur peut être surchargé pour les types définis par l'utilisateur.

{{fbdoc item="ex"}}
{{fbdoc item="filename" value="examples/manual/operator/not-bitwise.bas"}}%%(freebasic)
' Using the NOT operator on a numeric value

DIM numeric_value AS BYTE
numeric_value = 15 '00001111

'Result = -16 =     11110000
PRINT NOT numeric_value
%%

{{fbdoc item="filename" value="examples/manual/operator/not-logical.bas"}}%%(freebasic)
' Using the NOT operator on conditional expressions
DIM AS UBYTE numeric_value1, numeric_value2
numeric_value1 = 15
numeric_value2 = 25

IF NOT numeric_value1 = 10 THEN PRINT "Numeric_Value1 is not equal to 10"
IF NOT numeric_value2 = 25 THEN PRINT "Numeric_Value2 is not equal to 25"

' This will output "Numeric_Value1 is not equal to 10" because
' the first IF statement is false.
' It will not output the result of the second IF statement because the
' condition is true. 
%%

{{fbdoc item="lang"}}
	- Dans le dialecte //[[CompilerOptlang -lang qb]]//, cet opérateur ne peut pas être surchargé.

{{fbdoc item="diff"}}
	- Aucune

{{fbdoc item="see"}}
	- [[TblTruth Table de vérité des opérateurs]]

{{fbdoc item="back" value="CatPgOpLogical|Logical Operators"}}{{fbdoc item="back" value="CatPgOperators|Operators"}}

