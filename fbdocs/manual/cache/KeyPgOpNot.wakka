{{fbdoc item="title" value="Operator Not (Complement)"}}----
Retourne la manipulation de bits (compl&eacute;ment) d'une valeur num&eacute;rique

{{fbdoc item="syntax"}}##
	[[KeyPgDeclare declare]] [[KeyPgOperator operator]] **Not** ( [[KeyPgByref byref]] //rhs// [[KeyPgAs as]] [[KeyPgByte byte]] ) [[KeyPgAs as]] [[KeyPgInteger integer]]
	[[KeyPgDeclare declare]] [[KeyPgOperator operator]] **Not** ( [[KeyPgByref byref]] //rhs// [[KeyPgAs as]] [[KeyPgUbyte ubyte]] ) [[KeyPgAs as]] [[KeyPgInteger integer]]
	[[KeyPgDeclare declare]] [[KeyPgOperator operator]] **Not** ( [[KeyPgByref byref]] //rhs// [[KeyPgAs as]] [[KeyPgSingle single]] ) [[KeyPgAs as]] [[KeyPgInteger integer]]
	[[KeyPgDeclare declare]] [[KeyPgOperator operator]] **Not** ( [[KeyPgByref byref]] //rhs// [[KeyPgAs as]] [[KeyPgDouble double]] ) [[KeyPgAs as]] [[KeyPgInteger integer]]

	[[KeyPgDeclare declare]] [[KeyPgOperator operator]] **Not** ( [[KeyPgByref byref]] //rhs// [[KeyPgAs as]] //T// ) [[KeyPgAs as]] //T//
##
{{fbdoc item="usage"}}##
	//result// = **Not** //rhs//
##
{{fbdoc item="param"}}
	##//rhs//##
		Le c&ocirc;t&eacute; droit de l'expression.
	##//T//##
		Un type num&eacute;rique.

{{fbdoc item="section" value="Valeur retourn&eacute;e
	Retourne la manipulation de bits-compl&eacute;ment de son op&eacute;rande.

{{fbdoc item="desc"}}
	Cet op&eacute;rateur retourne la manipulation de bits-compl&eacute;ment de son op&eacute;rande, une op&eacute;ation logique dont le r&eacute;sultat est une valeur dont les bits mis &agrave d&eacute;pendent des bits de son op&eacute;rande.

	La table de v&eacute;rit&eacute; ci-dessous montre toutes les combinaisons d'une op&eacute;ration bool&eacute;enne de compl&eacute;ment:

	{{table columns="" cellpadding="2" cells="<table>Bit c&ocirct&eacute droit;R&eacutesultat;0;1;1;0;</table>

	Cet op&eacute;rateur peut &ecirc;tre surcharg&eacute; pour les types d&eacute;finis par l'utilisateur.

{{fbdoc item="ex"}}
{{fbdoc item="filename" value="examples/manual/operator/not-bitwise.bas"}}%%(freebasic)
' Using the NOT operator on a numeric value

DIM numeric_value AS BYTE
numeric_value = 15 '00001111

'Result = -16 =     11110000
PRINT NOT numeric_value
%%

{{fbdoc item="filename" value="examples/manual/operator/not-logical.bas"}}%%(freebasic)
' Using the NOT operator on conditional expressions
DIM AS UBYTE numeric_value1, numeric_value2
numeric_value1 = 15
numeric_value2 = 25

IF NOT numeric_value1 = 10 THEN PRINT "Numeric_Value1 is not equal to 10"
IF NOT numeric_value2 = 25 THEN PRINT "Numeric_Value2 is not equal to 25"

' This will output "Numeric_Value1 is not equal to 10" because
' the first IF statement is false.
' It will not output the result of the second IF statement because the
' condition is true. 
%%

{{fbdoc item="lang"}}
	- Dans le dialecte //[[CompilerOptlang -lang qb]]//, cet op&eacute;rateur ne peut pas &ecirc;tre surcharg&eacute;.

{{fbdoc item="diff"}}
	- Aucune

{{fbdoc item="see"}}
	- [[TblTruth Table de v&eacute;rit&eacute; des op&eacute;rateurs]]

{{fbdoc item="back" value="CatPgOpLogical|Logical Operators"}}{{fbdoc item="back" value="CatPgOperators|Operators"}}