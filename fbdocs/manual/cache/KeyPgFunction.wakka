{{fbdoc item="title" value="FUNCTION"}}----
Définit une procédure retournant une valeur

{{fbdoc item="syntax"}}##
	[[[KeyPgPublic Public]]|[[KeyPgPrivate Private]]] **Function** //identifier// [[[KeyPgCdecl CDecl]]|[[KeyPgPascal Pascal]]|[[KeyPgStdcall StdCall]]] [[[KeyPgOverload Overload]]] [[[KeyPgAlias Alias]] //external_identifier//] [([//parameter_list//])] [[[KeyPgAs As]] //return_type//] [[[KeyPgStatic Static]]] [[[KeyPgExport Export]]]
		//statements//
		...
		{ {[[KeyPgReturn Return]] [//return_value//]}|{Function = //return_value//}|{//identifier// = //return_value//} }
		...
	[[KeyPgEndblock End]] Function
##
{{fbdoc item="param"}}
	##//identifier//##: le nom de la fonction
	##//external_identifier//##: nom visible de l'extérieur (à l'éditeur de liens) entre guillemets
	##//parameter_list//##: ##//parameter//[, //parameter//[, ...]]##
	##//parameter//##: ##[[[KeyPgByref ByRef]]|[[KeyPgByval ByVal]]] //identifier// [[[KeyPgAs As]] //type//] [= //default_value//]##
		##//identifier//##: le nom de la variable référencée dans la fonction.  Si l'argument est un tableau, alors l'identificateur doit être suivi de parenthèses vides.
		##//type//##: le type de variable
		##//default_value//##: la valeur de l'argument si rien n'est spécifié dans l'appel
	##//return_type//##: le type de la variable retournée par la fonction
	##//statements//##: une ou plusieurs déclaration(s) qui compose(nt) le corps de la fonction
	##//return_value//##: la valeur retournée par la fonction
{{fbdoc item="desc"}}
	Une fonction définit un bloc de code qui peut être exécuté par une seule instruction (un appel de fonction) et retourne une valeur à l'appelant lorsqu'elle a terminé (la valeur retournée). Il y a plusieurs raisons d'utiliser les fonctions:
		- Réduit les redondances dans votre programme
		- Permet la réutilisation de code dans de nombreux programmes
		- Améliore la lisibilité du programme
		- Améliore la maintenance du programme 
		- Facilite l'amélioration de votre programme

	//Droits d'accès// : Les mots-clés ##[[KeyPgPublic Public]]## et ##[[KeyPgPrivate Private]]## spécifient des droits d'accès, respectivement, publics ou privés entre niveaux-modules. Si aucun n'est donné, par défaut la fonction aura un accès (##[[KeyPgPublic Public]]##).

	//Convention d'appel// : La convention d'appel, ou l'ordre dans lequel les arguments sont entrés et sortis de la pile lors des appels de fonction, est spécifiée avec les mots-clés ##[[KeyPgCdecl cdecl]]##, ##[[KeyPgPascal pascal]]## et ##[[KeyPgStdcall stdcall]]##. Si aucune n'est fournie, la fonction utilise la convention standard par défaut (##[[KeyPgStdcall stdcall]]##).

	//Passage des arguments// : Les fonctions peuvent recevoir une ou plusieurs variables, ou arguments, en cas d'appel. Ces arguments sont répertoriés en tant que ##//parameters//## dans ##//parameter_list//##. Les mots-clés ##[[KeyPgByref ByRef]]## et ##[[KeyPgByval ByVal]]## précisent si l'argument sera passé par référence ou par valeur, respectivement. Le type de l'argument est donnée par "##[[KeyPgAs As]] //type//##" derrière le ##//parameter//##. Si un paramètre est donné dans la déclaration avec une valeur par défaut, le paramètre est facultatif.  Les paramètres de tableaux sont spécifiés en plaçant des parenthèses vides après l'identifiant.  Notez que les paramètres tableau sont toujours ##[[KeyPgByref ByRef]]## et le mot-clef ##[[KeyPgByref ByRef]]## n'est ni nécessaire ni permis comme paramètre tableau.  Lorsque vous appelez une fonction avec un argument de tableau les parenthèses sont de rigueur là aussi, voir les exemples.

	//Fonctions surchargées// : Une fonction surchargée peut partager le même nom (##//identifier//##) qu'une autre avec une signature différente. Le mot-clé ##[[KeyPgOverload Overload]]## précise qu'une fonction peut être surchargée. Une fonction peut être définie - ou déclarée - en utilisant le mot-clé  ##[[KeyPgOverload Overload]]## avant toutes les fonctions qui les surchargent.

	//Les valeurs de retour// : ##//return_type//## spécifie le ##[[DataType data type]]## retourné par une fonction à la sortie. Si aucun type de données n'est spécifié, alors la fonction retournera le type de données par défaut, qui sera ##//Integer//## sauf si a été précisé un autre type de données en utilisant ##[[KeyPgDefsng DefSng]]##, ##[[KeyPgDefdbl DefDbl]]##, ##[[KeyPgDefstr DefStr]]##, etc. Les fonctions peuvent retourner des valeurs //(et bientôt, des références)// en utilisant trois méthodes: le mot-clé ##[[KeyPgReturn Return]]## suivi d'une valeur fait sortir de la fonction immédiatement et renvoie cette valeur à l'appelant. Les fonctions peuvent également renvoyer des valeurs en attribuant le mot clé ##//Function//## ou l'##//identifier//## de la fonction à la valeur de retour souhaitée. Cependant, les deux dernières méthodes ne provoquent pas la sortie de la fonction. Comme les fonctions retournent des valeurs, les appels de fonction évaluent les expressions. Ainsi, les appels de fonction peuvent être faits partout où une expression est attendue, comme dans les déclarations [[KeyPgOpAssignment Affectations]] ou ##[[KeyPgIfthen If]]##.

	//Préservation des variables locales// : Le mot-clef ##[[KeyPgStatic Static]]## indique que les variables locales déclarées dans une fonction sont conservées entre les appels de cette fonction. En entrant dans une fonction définie avec ##[[KeyPgStatic Static]]##, les variables locales ont la même valeur que la dernière fois que la fonction a été appelée.

{{fbdoc item="ex"}}

{{fbdoc item="filename" value="examples/manual/procs/func-1.bas"}}%%(freebasic)
'' This program demonstrates the declaration of a function
'' and returning a value using Return command

Declare Function ReturnTen () as integer

	Print ReturnTen () '' ReturnTen returns an integer by default.

Function ReturnTen() as integer
	Return 10
End Function
%%

{{fbdoc item="filename" value="examples/manual/procs/func-2.bas"}}%%(freebasic)
'' This program demonstrates the declaration of a function
'' and returning a value using assignment to function name

Declare Function ReturnTen () as integer

Print ReturnTen () '' ReturnTen returns an integer by default.

Function ReturnTen() as integer
	ReturnTen = 10
End Function
%%

{{fbdoc item="filename" value="examples/manual/procs/func-3.bas"}}%%(freebasic)
'' This program demonstrates function overloading.

'' The overloaded functions must be FIRST.
Declare Function ReturnTen Overload (a As Single) as integer
Declare Function ReturnTen Overload (a As String) as integer
Declare Function ReturnTen (a as integer) as integer

Print ReturnTen (10.000!) '' ReturnTen will take a single and return an integer
Print ReturnTen (10)      '' ReturnTen will take an integer and return an integer
Print ReturnTen ("10")    '' ReturnTen will take a string and return an integer

Function ReturnTen Overload (a As Single) as integer
	Return Int(a)
End Function

Function ReturnTen Overload (a As String) as integer
	Return Val(a)
End Function

Function ReturnTen (a As Integer) as integer
Return a 
End Function
%%

{{fbdoc item="filename" value="examples/manual/procs/func-4.bas"}}%%(freebasic)
  '' The following example demonstrates optional parameters.

Function TestFunc(P As String = "Default") As String
Return P
End Function

Print TestFunc("Testing:") 
Print TestFunc
%%

{{fbdoc item="filename" value="examples/manual/procs/func-5.bas"}}%%(freebasic)
'' This example shows how to declare and call
'' functions taking array arguments.

Function x(b() As Double) As Integer
	x = UBound(b)-LBound(b)+1
End Function

Dim a(1 To 10) As Double
Print x(a())
Dim c(10 To 20) As Double
Print x(c())
%%

{{fbdoc item="lang"}}
	- Dans le dialecte //[[CompilerOptlang -lang fb]]// dialect, ##**ByVal**## est la convention par défaut de passage de paramètre pour tous les types intégrés sauf ##[[KeyPgString String]]##; ##**String**## et les ##[[KeyPgType Type]]##s définis par l'utilisateur sont passés ##[[KeyPgByref ByRef]]## par défaut.
	- Dans les dialectes //[[CompilerOptlang -lang qb]]// et //[[CompilerOptlang -lang fblite]]//, ##**ByRef**## est la convention par défaut de passage de paramètre.
	- Dans le dialecte //[[CompilerOptlang -lang qb]]//, le nom de la fonction doit être utilisé dans une affectation pour spécifier la valeur de retour.  Utiliser ##**Function** = ...##" pour spécifier que la valeur de retour ne peut être utilisée.
	- Dans les dialectes //[[CompilerOptlang -lang qb]]// et //[[CompilerOptlang -lang fblite]]//, ##[[KeyPgReturn Return]]## peut être utilisé pour retourner une valeur lorsque ##[[KeyPgOptiongosub Option Gosub]]## n'est pas valide.  Dans //[[CompilerOptlang -lang qb]]//, cela doit être fait en utilisant explicitement l'instruction ##[[KeyPgOptionnogosub Option Nogosub]]##.

{{fbdoc item="diff"}}
	- Les paramètres peuvent être optionnels en ""FreeBASIC"".
	- En QBASIC, le type de retour peut être spécifié seulement avec un suffixe, pas avec ##AS TYPE##, et autoriser seulement les fonctions à retourner un type intégré.
	- La valeur de retour peut maintenant être précisée par une instruction ##[[KeyPgReturn Return]]##.
	- La fonction ##[[KeyPgOverload Overload]]## est supportée en FreeBASIC.
	- La valeur de retour de fonctions ##[[KeyPgInteger Integer]]## peut être ignorée dans le code appelant.

{{fbdoc item="see"}}
	- ##[[KeyPgSub Sub]]##
	- ##[[KeyPgExit Exit]]##
	- ##[[KeyPgReturn Return]]##
	- ##[[KeyPgDeclare Declare]]##
	- ##[[KeyPgPublic Public]]##
	- ##[[KeyPgPrivate Private]]##

{{fbdoc item="back" value="CatPgProcedures|Procedures"}}
