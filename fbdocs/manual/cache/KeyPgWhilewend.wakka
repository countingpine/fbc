{{fbdoc item="title" value="WHILE"}}----
Déclaration de contrôle de flux pour une boucle.

{{fbdoc item="syntax"}}##
	**While** [//condition//]
		[//statement block//]
	**Wend**
##
{{fbdoc item="desc"}}
	La déclaration ##**While**## entraînera l'ensemble suivant des instructions de //statement block// à s'exécuter répétitivement tant que l'expression //condition// est vraie (true).

	Si //condition// est évaluée à faux (false) quand l'instruction WHILE est exécutée la première fois, le //statement block// est sauté et l'exécution reprend immédiatement après le ##**Wend**## de fin de structure.

	Si une déclaration ##[[KeyPgExit Exit]]## ##**While**## est rencontrée dans le //statement block//, la boucle se termine et l'exécution reprend immédiatement après le ##**Wend**## de fin de structure. Si une déclaration ##[[KeyPgContinue Continue]]## ##**While**## est rencontrée, le reste du //statement block// est ignorée et l'exécution reprend à la déclaration ##**While**##.

	Comme toutes les déclaration de contrôle de flux, l'instruction ##**While**## peut être imbriquée, c'est à dire qu'elle peut être utilisée dans un bloc d'instructions d'une autre déclaration ##[[KeyPgWhile While]]##.

	//**Note**: le //mot-clef// ##**While**## est aussi utilisé dans la déclaration ##[[KeyPgDoloop Do...Loop]]## pour indiquer le type de comparaison. Utilisée de cette façon, la déclaration DO devient fonctionnellement équivalente à l'instruction WHILE, donc il ne faut pas confondre les mots-clés entourant ##**Loop**## et ##**Wend**##, respectivement.//

{{fbdoc item="ex"}}
	Dans cet exemple, une boucle ##**While**## est utilisée pour inverser une chaîne par itération à travers elle en arrière. La boucle s'arrête si l'indice est inférieur à 0 //(0 étant le premier indice de la chaîne)//.
{{fbdoc item="filename" value="examples/manual/control/while-wend.bas"}}%%(freebasic)
dim as string sentence                          '' string to reverse
sentence = "The quick brown fox jumps over the lazy dog."

dim as string ecnetnes
dim as integer index
index = len( sentence ) - 1                     '' point to last character
while( index >= 0 )                             '' stop after first character
  ecnetnes += chr( sentence[index] )           '' append character to new string
  index -= 1
wend

print "original: """ ; sentence ; """"
print "reversed: """ ; ecnetnes ; """"

end 0
%%

{{fbdoc item="lang"}}
	- Dans les dialectes //[[CompilerOptlang -lang qb]]// et //[[CompilerOptlang -lang fblite]]//, les variables déclarées dans une boucle WHILE..WEND ont une [[ProPgVariableScope portée]] fonction comme dans QB. 
	- Dans les dialectes //[[CompilerOptlang -lang fb]]// et //[[CompilerOptlang -lang deprecated]]//, les variables déclarées dans une boucle ##**While**##..##**Wend**## ne sont visibles que dans ce bloc et inaccessibles en-dehors.

{{fbdoc item="diff"}}
	- Aucune

{{fbdoc item="see"}}
	- ##[[KeyPgExit Exit]]##
	- ##[[KeyPgContinue Continue]]##
	- ##[[KeyPgDoloop Do...Loop]]##

{{fbdoc item="back" value="CatPgControlFlow|Control Flow"}}