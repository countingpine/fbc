{{fbdoc item="title" value="WHILE"}}----
D&eacute;claration de contr&ocirc;le de flux pour une boucle.

{{fbdoc item="syntax"}}##
	**While** [//condition//]
		[//statement block//]
	**Wend**
##
{{fbdoc item="desc"}}
	La d&eacute;claration ##**While**## entra&icirc;nera l'ensemble suivant des instructions de //statement block// &agrave; s'ex&eacute;cuter r&eacute;p&eacute;titivement tant que l'expression //condition// est vraie (true).

	Si //condition// est &eacute;valu&eacute;e &agrave; faux (false) quand l'instruction WHILE est ex&eacute;cut&eacute;e la premi&egrave;re fois, le //statement block// est saut&eacute; et l'ex&eacute;cution reprend imm&eacute;diatement apr&egrave;s le ##**Wend**## de fin de structure.

	Si une d&eacute;claration ##[[KeyPgExit Exit]]## ##**While**## est rencontr&eacute;e dans le //statement block//, la boucle se termine et l'ex&eacute;cution reprend imm&eacute;diatement apr&egrave;s le ##**Wend**## de fin de structure. Si une d&eacute;claration ##[[KeyPgContinue Continue]]## ##**While**## est rencontr&eacute;e, le reste du //statement block// est ignor&eacute;e et l'ex&eacute;cution reprend &agrave; la d&eacute;claration ##**While**##.

	Comme toutes les d&eacute;claration de contr&ocirc;le de flux, l'instruction ##**While**## peut &ecirc;tre imbriqu&eacute;e, c'est &agrave; dire qu'elle peut &ecirc;tre utilis&eacute;e dans un bloc d'instructions d'une autre d&eacute;claration ##[[KeyPgWhile While]]##.

	//**Note**: le //mot-clef// ##**While**## est aussi utilis&eacute; dans la d&eacute;claration ##[[KeyPgDoloop Do...Loop]]## pour indiquer le type de comparaison. Utilis&eacute;e de cette fa&ccedil;on, la d&eacute;claration DO devient fonctionnellement &eacute;quivalente &agrave; l'instruction WHILE, donc il ne faut pas confondre les mots-cl&eacute;s entourant ##**Loop**## et ##**Wend**##, respectivement.//

{{fbdoc item="ex"}}
	Dans cet exemple, une boucle ##**While**## est utilis&eacute;e pour inverser une cha&icirc;ne par it&eacute;ration &agrave; travers elle en arri&egrave;re. La boucle s'arr&ecirc;te si l'indice est inf&eacute;rieur &agrave; 0 //(0 &eacute;tant le premier indice de la cha&icirc;ne)//.
{{fbdoc item="filename" value="examples/manual/control/while-wend.bas"}}%%(freebasic)
dim as string sentence                          '' string to reverse
sentence = "The quick brown fox jumps over the lazy dog."

dim as string ecnetnes
dim as integer index
index = len( sentence ) - 1                     '' point to last character
while( index >= 0 )                             '' stop after first character
  ecnetnes += chr( sentence[index] )           '' append character to new string
  index -= 1
wend

print "original: """ ; sentence ; """"
print "reversed: """ ; ecnetnes ; """"

end 0
%%

{{fbdoc item="lang"}}
	- Dans les dialectes //[[CompilerOptlang -lang qb]]// et //[[CompilerOptlang -lang fblite]]//, les variables d&eacute;clar&eacute;es dans une boucle WHILE..WEND ont une [[ProPgVariableScope port&eacute;e]] fonction comme dans QB. 
	- Dans les dialectes //[[CompilerOptlang -lang fb]]// et //[[CompilerOptlang -lang deprecated]]//, les variables d&eacute;clar&eacute;es dans une boucle ##**While**##..##**Wend**## ne sont visibles que dans ce bloc et inaccessibles en-dehors.

{{fbdoc item="diff"}}
	- Aucune

{{fbdoc item="see"}}
	- ##[[KeyPgExit Exit]]##
	- ##[[KeyPgContinue Continue]]##
	- ##[[KeyPgDoloop Do...Loop]]##

{{fbdoc item="back" value="CatPgControlFlow|Control Flow"}}