{{fbdoc item="title" value="Pointer Arithmetic"}}----
Manipulation des valeurs d'adresse mathématiquement.

**{{anchor name="OVERVIEW|Vue d'ensemble"}}**
**{{anchor name="ADDSUB|Addition et soustraction de pointeurs"}}**
**{{anchor name="INCDEC|Incrémentation et de décrémentation des pointeurs"}}**
**{{anchor name="DISTANCE|Distance entre deux pointeurs"}}**

{{anchor name="OVERVIEW"}}{{fbdoc item="section" value="Vue d'ensemble"}}

	Il est souvent utile de parcourir la mémoire, d'une adresse à une autre. Les pointeurs sont utilisés pour y parvenir. Bien que le type d'un pointeur détermine le type de variable ou d'objet récupéré lorsque le pointeur est déréférencé (en utilisant ##[[KeyPgOpValueOf Operator * (Valeur de)]]##), il détermine également la //longueur//, en octets, que son type particulier occupe en mémoire. Par exemple, un ##[[KeyPgShort Short]]## occupe deux (2) octets en mémoire, tandis qu'un ##[[KeyPgSingle Single]]## nécessite quatre (4) octets.

{{anchor name="ADDSUB"}}{{fbdoc item="section" value="Addition et soustraction de pointeurs"}}

	Les pointeurs peuvent être ajoutés et soustraits tout comme des types numériques. Le résultat de cette addition ou soustraction est une adresse et le type de le pointeur détermine la distance à partir du pointeur d'origine.

	Par exemple, le texte suivant,

{{fbdoc item="filename" value="examples/manual/proguide/pointers/addsub.bas"}}%%(freebasic)
dim p as integer ptr = new integer[2]

*p = 1
*(p + 1) = 2
%%
	attribuera les valeurs "##1##" et "##2##" à chaque entier dans le tableau pointé par ##//p//##. Comme ##//p//## est un ##[[KeyPgInteger Integer]] [[KeyPgPointer Pointer]]##, l'expression "##*(p + 1)##" dit de déréférencer un ##[[KeyPgInteger Integer]]## de quatre (4) octets à partir de ##//p//##; le "##1##" indique une distance de "##1 * taille d'un [[KeyPgInteger Integer]]##", ou quatre (4) octets.

	La soustraction suit exactement le même principe. Remember, //a// - //b// = //a// + -//b//.

{{anchor name="INCDEC"}}{{fbdoc item="section" value="Incrémentation et de décrémentation des pointeurs"}}

	Parfois il est plus commode de modifier le pointeur lui-même, dans ce cas, la combinaison de l'addition et de la soustraction des opérateurs fonctionne exactement comme ci-dessus. Par exemple, le texte suivant,

{{fbdoc item="filename" value="examples/manual/proguide/pointers/incdec.bas"}}%%(freebasic)
dim array(5) as short = { 32, 43, 66, 348, 112, 0 }
dim p as short ptr = @array(0)

while (*p <> 0)
	if (*p = 66) then print "found 66"
	p += 1
wend
%%
	parcourt un tableau qu'il ne trouve pas l'élément avec la valeur "##0##". S'il trouve un élément avec la valeur "##66##" il affiche un message.

{{anchor name="DISTANCE"}}{{fbdoc item="section" value="Distance entre deux des pointeurs"}}

	La distance entre deux des pointeurs est récupérée avec ##[[KeyPgOpSubtract Operator - (Subtract)]]## et est mesurée en valeur, pas en octets. Par exemple, le texte suivant,

{{fbdoc item="filename" value="examples/manual/proguide/pointers/distance.bas"}}%%(freebasic)
type T as single

dim array(5) as T = { 32, 43, 66, 348, 112, 0 }
dim p as T ptr = @array(0)

while (*p <> 0)
	p += 1
wend
print p - @array(0)
%%
	affichera "##5##" indépendamment du type de ##//T//##. C'est parce qu'il y a une différence de cinq éléments (5) entre le premier élément de //array// (##32##) et l'élément pointé par ##//p//## (##0##).

	Plus précisément, si //a// et //b// sont deux pointeurs de type //T//, la distance entre eux est le nombre d'octets entre eux, divisé par la taille, en octets, de //T//, ou
##
		[[KeyPgAbs Abs]](cast(byte ptr, a) - cast(byte ptr, b)) / [[KeyPgSizeof Sizeof]](T)
##

{{fbdoc item="see"}}
	- ##[[KeyPgOpAdd Opérateur + (Add)]]##
	- ##[[KeyPgOpSubtract Opérateur - (Subtract)]]##
	- ##[[KeyPgOpAt Opérateur @ (Address Of)]]##
	- ##[[KeyPgOpValueOf Opérateur * (Value Of)]]##
	- [[CatPgOpPoint Pointer pour les pointeurs]]

{{fbdoc item="back" value="CatPgProgrammer|Programmer's Guide"}}