{{fbdoc item="title" value="Pointer Arithmetic"}}----
Manipulation des valeurs d'adresse math&eacute;matiquement.

**[[#OVERVIEW">Vue d'ensemble]]**
**[[#ADDSUB">Addition et soustraction de pointeurs]]**
**[[#INCDEC">Incr&eacute;mentation et de d&eacute;cr&eacute;mentation des pointeurs]]**
**[[#DISTANCE">Distance entre deux pointeurs]]**

<a name="OVERVIEW"></a>{{fbdoc item="section" value="Vue d'ensemble

	Il est souvent utile de parcourir la m&eacute;moire, d'une adresse &agrave; une autre. Les pointeurs sont utilis&eacute;s pour y parvenir. Bien que le type d'un pointeur d&eacute;termine le type de variable ou d'objet r&eacute;cup&eacute;r&eacute; lorsque le pointeur est d&eacute;r&eacute;f&eacute;renc&eacute; (en utilisant ##[[KeyPgOpValueOf Operator * (Valeur de)]]##), il d&eacute;termine &eacute;galement la //longueur//, en octets, que son type particulier occupe en m&eacute;moire. Par exemple, un ##[[KeyPgShort Short]]## occupe deux (2) octets en m&eacute;moire, tandis qu'un ##[[KeyPgSingle Single]]## n&eacute;cessite quatre (4) octets.

<a name="ADDSUB"></a>

	{{fbdoc item="section" value="Addition et soustraction de pointeurs

	Les pointeurs peuvent &ecirc;tre ajout&eacute;s et soustraits tout comme des types num&eacute;riques. Le r&eacute;sultat de cette addition ou soustraction est une adresse et le type de le pointeur d&eacute;termine la distance &agrave; partir du pointeur d'origine.

Par exemple, le texte suivant,
dim p as integer ptr = new integer[2]

Dim p As Integer Ptr = New Integer[2]
*p = 1
*(p + 1) = 2
	%%

	attribuera les valeurs "##1##" et "##2##" &agrave; chaque entier dans le tableau point&eacute; par ##//p//##. Comme ##//p//## est un ##[[KeyPgInteger Integer]] [[KeyPgPointer Pointer]]##, l'expression "##*(p + 1)##" dit de d&eacute;r&eacute;f&eacute;rencer un ##[[KeyPgInteger Integer]]## de quatre (4) octets &agrave; partir de ##//p//##; le "##1##" indique une distance de "##1 * taille d'un [[KeyPgInteger Integer]]##", ou quatre (4) octets.

La soustraction suit exactement le m&ecirc;me principe. Remember, //a// - //b// = //a// + -//b//.

	<a name="INCDEC"></a>

{{fbdoc item="section" value="Incr&eacute;mentation et de d&eacute;cr&eacute;mentation des pointeurs
Parfois il est plus commode de modifier le pointeur lui-m&ecirc;me, dans ce cas, la combinaison de l'addition et de la soustraction des op&eacute;rateurs fonctionne exactement comme ci-dessus. Par exemple, le texte suivant,
dim p as short ptr = @array(0)

Dim array(5) As Short = { 32, 43, 66, 348, 112, 0 }
	Dim p As Short Ptr = @array(0)
	While (*p <> 0)
If (*p = 66) Then Print "found 66"
p += 1
	Wend

%%

	parcourt un tableau qu'il ne trouve pas l'&eacute;l&eacute;ment avec la valeur "<t>0</t>". S'il trouve un &eacute;l&eacute;ment avec la valeur "##66##" il affiche un message.

<a name="DISTANCE"></a>
{{fbdoc item="section" value="Distance entre deux des pointeurs

La distance entre deux des pointeurs est r&eacute;cup&eacute;r&eacute;e avec ##[[KeyPgOpSubtract Operator - (Subtract)]]## et est mesur&eacute;e en valeur, pas en octets. Par exemple, le texte suivant,
dim p as T ptr = @array(0)

Type T As Single
	Dim array(5) As T = { 32, 43, 66, 348, 112, 0 }
Dim p As T Ptr = @array(0)
While (*p <> 0)
p += 1
	Wend

	Print p - @array(0)
%%
		affichera "##5##" ind&eacute;pendamment du type de ##//T//##. C'est parce qu'il y a une diff&eacute;rence de cinq &eacute;l&eacute;ments (5) entre le premier &eacute;l&eacute;ment de //array// (##32##) et l'&eacute;l&eacute;ment point&eacute; par ##//p//## (##0##).
Plus pr&eacute;cis&eacute;ment, si //a// et //b// sont deux pointeurs de type //T//, la distance entre eux est le nombre d'octets entre eux, divis&eacute; par la taille, en octets, de //T//, ou

##
	[[KeyPgAbs Abs]](cast(byte ptr, a) - cast(byte ptr, b)) / [[KeyPgSizeof SizeOf]](T)
	##
	{{fbdoc item="see"}}
	- ##[[KeyPgOpAdd Op&eacute;rateur + (Add)]]##
	- ##[[KeyPgOpSubtract Op&eacute;rateur - (Subtract)]]##

- ##[[KeyPgOpAt Op&eacute;rateur @ (Address Of)]]##