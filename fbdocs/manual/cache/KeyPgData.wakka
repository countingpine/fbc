{{fbdoc item="title" value="DATA"}}----
Déclaration pour stocker des données lors de la compilation.

{{fbdoc item="syntax"}}##
	**Data** //constant_expression1// [,//constant_expression2//]...
##
{{fbdoc item="desc"}}
	##Data## stocke une liste d'expressions constantes numériques ou alphabétiques qui sont évaluées au moment de la compilation (excepté avec //[[CompilerOptlang -lang qb]]//) et stockées sous forme de constantes qui peuvent être lues dans des variables en utilisant ##[[KeyPgRead Read]]##.
	
	Toutes les déclarations de ##**Data**##s dans le programme se comportent comme une liste unique enchaînée; après la lecture du dernier élément d'une déclaration de ##**Data**##, le premier élément de la déclaration suivante ##**Data**## sera lu.
	Le programme ne doit pas tenter un ##[[KeyPgRead Read]]## après le dernier élément ##**Data**##.  Les résultats sont (dans tous les dialectes) indéfinis et le programme peut se bloquer (Page Fault = Erreur de page).
	
	Les déclarations ##**Data**## ne sont visibles que depuis le module dans lequel ells sont définies.
	
	Les constantes ##**Data**## ne peuvent être que des types simples (numériques ou chaînes).  Une valeur numérique peut être lue comme un littéral numérique dans une chaîne. Une chaîne lue dans une variable numérique sera évaluée par la fonction ##[[KeyPgVal Val]]##.  Les ##[[KeyPgConst Const]]##s peuvent être utilisées comme éléments de données, sauf dans le dialecte //[[CompilerOptlang -lang qb]]//, où leurs noms sont considérés comme du texte normal.
	
	//label//## de la déclaration ##**[[KeyPgRestore Restore]]**## fait que le premier item de ##**Data**## après ##//label//## sera le suivant à lire, permettant à l'utilisateur de choisir des sections spécifiques de données à lire.

	##**Data**## est normalement utilisé pour initialiser les variables. ""FreeBASIC"" permet aussi l'initialisation de variables statiques quand elles sont ##[[KeyPgDim Dim]]##ensionnées -  Voir [[ProPgInitialization Initialiseurs de variables]] pour plus d'informations.

{{fbdoc item="ex"}}
{{fbdoc item="filename" value="examples/manual/data/data.bas"}}%%(freebasic)
' Create an array of 5 integers and a string to hold the data.
DIM AS INTEGER h(4)
DIM AS STRING hs
DIM AS INTEGER readindex

' Set up to loop 5 times (for 5 numbers... check the data)
FOR readindex = 0 TO 4

  ' Read in an integer.
  READ h(readindex)

  ' Display it.
  PRINT "Number" ; readindex ; " = " ; h(readindex)

NEXT readindex

' Spacer.
PRINT

' Read in a string.
READ hs

' Print it.
PRINT  "String = " + hs

' Await a keypress.
SLEEP

' Exit program.
END

' Block of data.
DATA 3, 234, 435/4, 23+433, 87643, "Good" + "Bye!"
%%

{{fbdoc item="lang"}}
	- //[[CompilerOptlang -lang fb]]// et //[[CompilerOptlang -lang fblite]]// considèrent les items de ##**Data**## comme des expressions constantes qui sont évaluées pendant la compilation et leur résultat stocké dans le programme.
	- //[[CompilerOptlang -lang qb]]// considère les mots non-commentés, inclus les noms de variables et constantes, comme des chaînes littérales, et les stocke sans changement, comme dans QBASIC.  Les chaînes non-commentées sont délimitées par des virgules, et deux-points (:) ou un fin de ligne signifie la fin de la déclaration ##**Data**##.  Dans les chaînes non-commentées les espaces sont éliminés au début et à la fin.

{{fbdoc item="diff"}}
	- En dehors du dialecte //[[CompilerOptlang -lang qb]]// les chaînes de littéraux alphabétiques doivent être entre guillemets, dans QBASIC cette utilisation est facultative.
	- Dans QBASIC les items vides sont évalués au nombre ##0## ou à des chaînes vides, dans ""FreeBASIC"" ils donnent une erreur de compilation. Dans QBASIC une virgule à la fin de la déclaration amène un item supplémentaire, vide, évalué à ##0## ou une chaîne vide. Dans ""FreeBASIC"" ils donnent une erreur de compilation.

{{fbdoc item="see"}}
	- ##[[KeyPgRead Read]]##
	- ##[[KeyPgRestore Restore]]##

{{fbdoc item="back" value="CatPgMisc|Miscellaneous"}}

