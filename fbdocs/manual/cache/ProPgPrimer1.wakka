{{fbdoc item="title" value="FreeBASIC Primer #1"}}----
Ce livre &eacute;l&eacute;mentaire est destin&eacute; aux "d&eacute;butants d&eacute;butants", pour ceux qui commencent tout juste &agrave; apprendre &agrave; programmer et &agrave; utiliser FreeBASIC dans ce but.

{{fbdoc item="section" value="L'apprentissage du langage
	Apprendre un langage de programmation, c'est apprendre &agrave; &eacute;crire des mots et savoir ce qu'ils veulent dire quand ils sont &eacute;crits.  Nous n'avons pas besoin de les apprendre tous &agrave; la fois.  Mais apprendre quelques mots importants qui font quelque chose va nous aider &agrave; d&eacute;marrer.  Ici nous allons nous contenter de se concentrer sur ces mots cl&eacute;s:

	- ##[[KeyPgDim Dim]]##
	- ##[[KeyPgPrint Print]]##
	- ##[[KeyPgInput Input]]##
	- ##[[KeyPgFornext For...Next]]##
	- ##[[KeyPgIfthen If...Then]]##
	- ##[[KeyPgDoloop Do...Loop]]##


{{fbdoc item="section" value="Bonjour le monde! (Hello World!)
	Aucune r&eacute;f&eacute;rence d&eacute;butants n'est complet sans cet exemple.

	%%(freebasic)
Print "Hello World!"
%%
	Le texte entre la paire de guillemets est une cha&icirc;ne litt&eacute;rale.  La d&eacute;claration ##[[KeyPgPrint Print]]## est utilis&eacute;e pour la sortie du texte &agrave; l'&eacute;cran.  Si vous pouvez &eacute;diter, compiler et ex&eacute;cuter cet exemple, vous &ecirc;tes sur la bonne voie.

{{fbdoc item="section" value="Utilisation d'une variable pour stocker des donn&eacute;es
	Parfois, dans un programme, nous voulons stocker des informations quelque part, dans la m&eacute;moire, puis l'utiliser plus tard.  Pour stocker quelque chose dans la m&eacute;moire, nous utilisons une variable.  Toutes les variables dans FreeBasic sont d'un type sp&eacute;cifique, comme un nombre ou une cha&icirc;ne.  Nous utilisons l'instruction ##[[KeyPgDim Dim]]## pour d&eacute;clarer un nom de variable et pr&eacute;ciser quel type d'information nous voulons y entreposer.

	%%(freebasic)
Dim text As String
text = "Hello World!"
Print text
%%
	Nous utilisons ##[[KeyPgDim Dim]]## pour faire savoir au compilateur que nous voulons utiliser une variable appel&eacute;e ##//text//## dans notre programme et que nous allons d&eacute;poser dedans des donn&eacute;es de type  ##[[KeyPgString String (Cha&icirc;ne)]]##.  Ensuite nous attribuons (copie) ##"Hello World!"## dans la variable.  Enfin, nous utilisons ##[[KeyPgPrint Print]]## pour l'afficher &agrave; l'&eacute;cran.

{{fbdoc item="section" value="Utilisation d'une variable dans une expression
	Une //expression// est un terme g&eacute;n&eacute;rique pour d&eacute;crire une partie du code source qui peut &ecirc;tre &eacute;valu&eacute;e.  Apr&egrave;s qu'une expression ait &eacute;t&eacute; &eacute;valu&eacute;e, nous pouvons alors faire quelque chose avec elle, comme l'assigner (copier) &agrave; une variable.

	%%(freebasic)
Dim a As String, b As String, text As String
a = "Hello"
b = "World"
text = a + " " + b + "!"
Print text
%%
	Nous affectons certaines donn&eacute;es aux variables ##//a//## et ##//b//##.  Puis nous utilisons les variables ##//a//## et ##//b//## dans une qui est affect&eacute;e &agrave; ##//text//##.  Enfin, nous affichons le r&eacute;sultat &agrave; l'&eacute;cran.

{{fbdoc item="section" value="Saisir des donn&eacute;es de la part de l'utilisateur
	Souvent, nous n'avons aucune id&eacute;e des donn&eacute;es n&eacute;cessaires pour le programme car c'est l'utilisateur qui doit les fournir.  Nous ne pouvons les mettre dans notre code source du programme puisque nous ne les conna&icirc;trons que lorsque l'utilisateur utilisera le programme et nous dira ce qu'il en est.

	%%(freebasic)
Dim answer As String
Input "Tapez quelque chose et appuyez enter:", answer
Print "Vous avez tape: '"; answer; "'"
%%
	Tout d'abord, l'instruction ##[[KeyPgInput Input]]## affichera certaines informations &agrave; l'&eacute;cran, puis attendra que l'utilisateur fournisse certaines donn&eacute;es au programme. Dans cet exemple, nous afficherons &agrave; l'&eacute;cran exactement ce que l'utilisateur aura tap&eacute;.


{{fbdoc item="section" value="Faire des maths
	Variables et expressions ne sont pas seulement limit&eacute;s &agrave; des cha&icirc;nes.  La plupart des premiers langages ne g&eacute;raient pas tr&egrave;s bien les cha&icirc;nes.  L'&eacute;criture d'expressions math&eacute;matiques est semblable &agrave; la fa&ccedil;on dont elles peuvent &ecirc;tre &eacute;crites avec un crayon et du papier.

	%%(freebasic)
Dim a As Integer, b As Integer, c As Integer

a = 5
b = 7
c = a + b

Print "a = "; a
Print "a = "; b
Print "a + b = "; c
%%
	Nous attribuons des valeurs aux variables ##//a//##, ##//b//## et ##//c//##.  Nous utilisons le type ##[[KeyPgInteger Integer (Entier)]]## pour les variables.  Un entier ne peut &ecirc;tre positif ou n&eacute;gatif, mais il n'y a pas de fractions.

{{fbdoc item="section" value="Faire des maths avec saisie de donn&eacute;es
	Ceci est similaire &agrave; l'exemple pr&eacute;c&eacute;dent, Ceci est similaire &agrave; l'exemple pr&eacute;c&eacute;dent, sauf que nous laissons l'utilisateur choisir les nombres que nous allons additionner.

	%%(freebasic)
Dim a As Integer, b As Integer, r As Integer
Input "Entrez un nombre:", a
Input "Entrez un autre nombre:", b

r = a + b
Print "La somme des nombres est "; r
%%
	##[[KeyPgDim Dim]]## permet au compilateur de savoir quels noms de variables nous voulons utiliser et qu'elles vont contenir des donn&eacute;es de type ##[[KeyPgInteger Integer]]##.  Nous utilisons ##[[KeyPgInput Input]]## pour que l'utilisateur donne les valeurs des nombres et ##[[KeyPgPrint Print]]## pour afficher le r&eacute;sultat.

{{fbdoc item="section" value="Faire plus de maths avec saisie de donn&eacute;es
	Les variables num&eacute;riques ne sont pas limit&eacute;es seulement &agrave; des nombres entiers.  Nous pouvons &eacute;galement utiliser des types de donn&eacute;es ##[[KeyPgSingle Single]]## ou ##[[KeyPgDouble Double]]## pr&eacute;cision qui peuvent repr&eacute;senter des fractions.  Dans cet exemple nous saisirons des entr&eacute;es de l'utilisateur correspondant &agrave; un poids en livres pour une conversion en kilogrammes.

	%%(freebasic)
Dim lb As Single, kg As Single
Input "Entrez un poids en pounds:", lb

kg = lb * 0.454
Print lb; " lb. est egal a "; kg; " kg"
%%

{{fbdoc item="section" value="Instructions de r&eacute;p&eacute;tition
	En utilisant l'instruction ##[[KeyPgFornext For...Next]]## nous pouvons dire au programme de faire quelque chose en le r&eacute;p&eacute;tant un certain nombre de fois.  Par exemple, disons que nous voulons ajouter tous les nombres de 1 &agrave; 100.

	%%(freebasic)
Dim total As Integer
Dim number As Integer
total = 0
For number = 1 To 100
  total = total + number
Next
Print "La somme des nombres de 1 a 100 est "; total
%%


{{fbdoc item="section" value="Prendre une d&eacute;cision
	Un programme peut choisir les instructions &agrave; ex&eacute;cuter en utilisant une instruction conditionnelle comme ##[[KeyPgIfthen If...Then]]##.  Nous pouvons utiliser les valeurs d'une variable ou les r&eacute;sultats d'une expression pour d&eacute;cider si nous devrions ou ne devrions pas, ex&eacute;cuter une ou plusieurs instructions.

	%%(freebasic)
Dim number As Integer
Input "Entrez un nombre : ", number
Print "Votre nombre est ";
If number < 0 Then
  Print "negative"
ElseIf number > 0 Then
  Print "positive"
Else
  Print "zero"
End If
%%

	Apr&egrave;s la saisie d'un nombre par l'utilisateur, nous allons afficher un mot (positive, n&eacute;gative ou z&eacute;ro) en se basant sur l'instruction qui correspond &agrave; la condition.

{{fbdoc item="section" value="Instructions de r&eacute;p&eacute;tition (encore)
	Ici, nous allons utiliser une autre structure de boucle ##[[KeyPgDoloop Do...Loop]]## pour r&eacute;p&eacute;ter certaines instructions.  Comment le programme sait-il qu'il doit cesser de r&eacute;p&eacute;ter les instructions?  Nous utiliserons ##[[KeyPgIfthen If...Then]]## pour prendre la d&eacute;cision de sortir de la boucle.

	%%(freebasic)
Dim total As Single, count As Single, number As Single
Dim text As String

Print "Ce programme calculera calculate la somme et la moyenne pour une"
Print "liste de nombres.  Entrez une valeur vide pour finir."
Print

Do
  Input "Entrez un nombre : ", text
  If text = "" Then
	Exit Do
  End If

  count = count + 1
  total = total + Val(text)

Loop

Print
Print "Vous avez entre "; count; " numbers"
Print "La somme est "; total
If count <> 0 Then
  Print "La moyenne est "; total / count
End If
%%

{{fbdoc item="see"}}
	- ##[[KeyPgDim Dim]]##
	- ##[[KeyPgPrint Print]]##
	- ##[[KeyPgInput Input]]##
	- ##[[KeyPgFornext For...Next]]##
	- ##[[KeyPgIfthen If...Then]]##
	- ##[[KeyPgDoloop Do...Loop]]##

{{fbdoc item="back" value="CatPgProgrammer|Programmer's Guide"}}