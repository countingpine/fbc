{{fbdoc item="title" value="BINARY"}}----
Spécifie que le fichier ou le périphérique doit être ouvert en mode binaire

{{fbdoc item="syntax"}}##
	[[KeyPgOpen Open]] //filename// for **Binary** [[[KeyPgAccess Access]] //access_type//] [[[KeyPgLock Lock]] //lock_type//] as [#]//filenum// 
##
{{fbdoc item="param"}}
	##//filename//##
		nom de fichier à ouvrir
	##//access_type//##
		indique si on lit le fichier, si on écrit sur le fichier ou les deux
	##//lock_type//##
		verrouillage utilisé pendant que le fichier est ouvert
	##//filenum//##
		numéro de fichier à associer au fichier ouvert

{{fbdoc item="desc"}}
	Ouvre un fichier ou un pérphérique en lecture et/ou écriture de données binaires dans ##//filenum//##, avec un format libre.
	Si le fichier n'existe pas, un nouveau fichier sera créé. Le pointeur de fichier est initialisé par ##[[KeyPgOpen Open]]## à l'octet numéro 1. 
	Les opérations sur les fichiers ##[[KeyPgGetfileio Get #]]## et ##[[KeyPgPutfileio Put #]]## déplacent le pointeur de fichier en fonction de la taille des données, le pointeur peut être déplacé sur n'importe quel octet du fichier.
	Les données existantes dans le fichier sont conservées par ##[[KeyPgOpen Open]]##. 
	Ce mode fichier peut utiliser n'importe quel tampon variable pour lire/écrire des données dans le fichier.   
	Les données sont sauvegardées en mode binaire, dans le même format interne utilisé par ""FreeBASIC"", par le biais de ##[[KeyPgGetfileio Get #]]## et ##[[KeyPgPutfileio Put #]]##.
	
	##//filename//## doit être une expression chaîne correspondant à un nom de fichier légal dans le système d'exploitation cible, sans jokers de remplacement. Le fichier sera recherché dans le répertoire courant, sauf si ##//filename//## contient un chemin.
			
	##//Access_type//## par défaut le mode ##**Binary**## permet à la fois de lire et écrire dans le fichier, sauf si un type d'##[[KeyPgAccess Access]]## est spécifié, il doit être l'un de ceux-ci: 
		- ##**Read**## - le fichier est ouvert en entrée seulement
		- ##**Write**## - le fichier est ouvert en sortie seulement
		- ##**Read Write**## - le fichier est ouvert en entrée et sortie (par défaut)

	##//Lock_type//## indique la façon dont le fichier est verrouillé pour les autres processus (utilisateurs ou fils), il est l'un de ceux-ci:
		- ##**Shared**## - Le fichier peut être librement consulté par d'autres processus     
		- ##**Lock Read**## - Le fichier ne peut pas être ouvert en même temps pour la lecture
		- ##**Lock Write**## - Le fichier ne peut pas être ouvert en même temps pour l'écriture
		- ##**Lock Read Write**## - Le fichier ne peut pas être ouvert simultanément par d'autres processus.
		Si aucun type de verrouillage n'est indiqué, le fichier sera ##**Shared**## pour les autres "threads" du programme et ##**Lock Read Write**## pour les autres programmes.
		##[[KeyPgLock Lock]]## et ##[[KeyPgUnlock Unlock]]## peut être utilisé pour restreindre temporairement l'accès à des parties d'un fichier.

	##//filenum//## est un numéro de fichier valide (dans la plage ##1..255##) non utilisé par un autre fichier actuellement ouvert. Le numéro de fichier identifie celui-ci pour le reste des opérations. Un numéro de fichier libre peut être trouvé avec la fonction ##[[KeyPgFreefile FreeFile]]##.

{{fbdoc item="ex"}}
{{fbdoc item="filename" value="examples/manual/fileio/binary-write.bas"}}%%(freebasic)
'' Create a binary data file with one number in it
Dim x As Single = 17.164

Open "MyFile.Dat" For Binary As #1
  '' put without a position setting will put from the last known file position
  '' in this case, the very beginning of the file.
  Put #1, , x
Close #1
%%

{{fbdoc item="filename" value="examples/manual/fileio/binary-read.bas"}}%%(freebasic)
'' Now read the number from the file
Dim x As Single = 0

Open "MyFile.Dat" For Binary As #1
  Get #1, , x
Close #1

Print x
%%

{{fbdoc item="filename" value="examples/manual/fileio/binary-text.bas"}}%%(freebasic)
'' Read entire contents of a file to a string
Dim txt As String

Open "myfile.txt" For Binary Access Read As #1
  If Lof(1) > 0 Then
	'' our string has as many characters as the file has in bytes
	txt = String(Lof(1), 0)
	'' size of txt is known.  entire string filled with file data
	Get #1, , txt
  End If
Close #1

Print txt
%%

{{fbdoc item="diff"}}
	- Aucune

{{fbdoc item="see"}}
	- ##[[KeyPgOpen Open]]##
	- ##[[KeyPgPutfileio Put #]]##
	- ##[[KeyPgGetfileio Get #]]##
	- ##[[KeyPgRandom Random]]##
	- ##[[KeyPgAppend Append]]##
	- ##[[KeyPgOutput Output]]##
	- ##[[KeyPgInputfilemode Input]]##

{{fbdoc item="back" value="CatPgFile|File I/O Functions"}}