{{fbdoc item="title" value="BINARY"}}----
Sp&eacute;cifie que le fichier ou le p&eacute;riph&eacute;rique doit &ecirc;tre ouvert en mode binaire

{{fbdoc item="syntax"}}##
	[[KeyPgOpen Open]] //filename// for **Binary** [[[KeyPgAccess Access]] //access_type//] [[[KeyPgLock Lock]] //lock_type//] as [#]//filenum// 
##
{{fbdoc item="param"}}
	##//filename//##
		nom de fichier &agrave; ouvrir
	##//access_type//##
		indique si on lit le fichier, si on &eacute;crit sur le fichier ou les deux
	##//lock_type//##
		verrouillage utilis&eacute; pendant que le fichier est ouvert
	##//filenum//##
		num&eacute;ro de fichier &agrave; associer au fichier ouvert

{{fbdoc item="desc"}}
	Ouvre un fichier ou un p&eacute;rph&eacute;rique en lecture et/ou &eacute;criture de donn&eacute;es binaires dans ##//filenum//##, avec un format libre.
	Si le fichier n'existe pas, un nouveau fichier sera cr&eacute;&eacute;. Le pointeur de fichier est initialis&eacute; par ##[[KeyPgOpen Open]]## &agrave; l'octet num&eacute;ro 1. 
	Les op&eacute;rations sur les fichiers ##[[KeyPgGetfileio Get #]]## et ##[[KeyPgPutfileio Put #]]## d&eacute;placent le pointeur de fichier en fonction de la taille des donn&eacute;es, le pointeur peut &ecirc;tre d&eacute;plac&eacute; sur n'importe quel octet du fichier.
	Les donn&eacute;es existantes dans le fichier sont conserv&eacute;es par ##[[KeyPgOpen Open]]##. 
	Ce mode fichier peut utiliser n'importe quel tampon variable pour lire/&eacute;crire des donn&eacute;es dans le fichier.
	Les donn&eacute;es sont sauvegard&eacute;es en mode binaire, dans le m&ecirc;me format interne utilis&eacute; par FreeBasic, par le biais de ##[[KeyPgGetfileio Get #]]## et ##[[KeyPgPutfileio Put #]]##.
	
	##//filename//## doit &ecirc;tre une expression cha&icirc;ne correspondant &agrave; un nom de fichier l&eacute;gal dans le syst&egrave;me d'exploitation cible, sans jokers de remplacement. Le fichier sera recherch&eacute; dans le r&eacute;pertoire courant, sauf si ##//filename//## contient un chemin.
			
	##//Access_type//## par d&eacute;faut le mode ##**Binary**## permet &agrave; la fois de lire et &eacute;crire dans le fichier, sauf si un type d'##[[KeyPgAccess Access]]## est sp&eacute;cifi&eacute;, il doit &ecirc;tre l'un de ceux-ci:
		- ##**Read**## - le fichier est ouvert en entr&eacute;e seulement
		- ##**Write**## - le fichier est ouvert en sortie seulement
		- ##**Read Write**## - le fichier est ouvert en entr&eacute;e et sortie (par d&eacute;faut)

	##//Lock_type//## indique la fa&ccedil;on dont le fichier est verrouill&eacute; pour les autres processus (utilisateurs ou fils), il est l'un de ceux-ci:
		- ##**Shared**## - Le fichier peut &ecirc;tre librement consult&eacute; par d'autres processus
		- ##**Lock Read**## - Le fichier ne peut pas &ecirc;tre ouvert en m&ecirc;me temps pour la lecture
		- ##**Lock Write**## - Le fichier ne peut pas &ecirc;tre ouvert en m&ecirc;me temps pour l'&eacute;criture
		- ##**Lock Read Write**## - Le fichier ne peut pas &ecirc;tre ouvert simultan&eacute;ment par d'autres processus.
		Si aucun type de verrouillage n'est indiqu&eacute;, le fichier sera ##**Shared**## pour les autres "threads" du programme et ##**Lock Read Write**## pour les autres programmes.
		##[[KeyPgLock Lock]]## et ##[[KeyPgUnlock Unlock]]## peut &ecirc;tre utilis&eacute; pour restreindre temporairement l'acc&egrave;s &agrave; des parties d'un fichier.

	##//filenum//## est un num&eacute;ro de fichier valide (dans la plage ##1..255##) non utilis&eacute; par un autre fichier actuellement ouvert. Le num&eacute;ro de fichier identifie celui-ci pour le reste des op&eacute;rations. Un num&eacute;ro de fichier libre peut &ecirc;tre trouv&eacute; avec la fonction ##[[KeyPgFreefile FreeFile]]##.

{{fbdoc item="ex"}}
{{fbdoc item="filename" value="examples/manual/fileio/binary-write.bas"}}%%(freebasic)
'' Create a binary data file with one number in it
Dim x As Single = 17.164

Open "MyFile.Dat" For Binary As #1
  '' put without a position setting will put from the last known file position
  '' in this case, the very beginning of the file.
  Put #1, , x
Close #1
%%

{{fbdoc item="filename" value="examples/manual/fileio/binary-read.bas"}}%%(freebasic)
'' Now read the number from the file
Dim x As Single = 0

Open "MyFile.Dat" For Binary As #1
  Get #1, , x
Close #1

Print x
%%

{{fbdoc item="filename" value="examples/manual/fileio/binary-text.bas"}}%%(freebasic)
'' Read entire contents of a file to a string
Dim txt As String

Open "myfile.txt" For Binary Access Read As #1
  If Lof(1) > 0 Then
	'' our string has as many characters as the file has in bytes
	txt = String(Lof(1), 0)
	'' size of txt is known.  entire string filled with file data
	Get #1, , txt
  End If
Close #1

Print txt
%%

{{fbdoc item="diff"}}
	- Aucune.

{{fbdoc item="see"}}
	- ##[[KeyPgOpen Open]]##
	- ##[[KeyPgPutfileio Put #]]##
	- ##[[KeyPgGetfileio Get #]]##
	- ##[[KeyPgRandom Random]]##
	- ##[[KeyPgAppend Append]]##
	- ##[[KeyPgOutput Output]]##
	- ##[[KeyPgInputfilemode Input]]##

{{fbdoc item="back" value="CatPgFile|File I/O Functions"}}