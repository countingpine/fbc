{{fbdoc item="title" value="Operator XOR (Exclusive Disjunction)"}}----
Retourne la manipulation de bits Xor (disjonction exclusive) de deux valeurs num&eacute;riques

{{fbdoc item="syntax"}}##
	[[KeyPgDeclare declare]] [[KeyPgOperator operator]] **Xor** ( [[KeyPgByref byref]] //lhs// [[KeyPgAs as]] //T1//, [[KeyPgByref byref]] //rhs// [[KeyPgAs as]] //T2// ) [[KeyPgAs as]] //Ret//
##
{{fbdoc item="usage"}}##
	//result// = //lhs// **Xor** //rhs//
##
{{fbdoc item="param"}}
	##//lhs//##
		Le c&ocirc;t&eacute; gauche de l'expression.
	##//T1//##
		Tout type num&eacute;rique.
	##//rhs//##
		Le c&ocirc;t&eacute; droit de l'expression.
	##//T2//##
		Tout type num&eacute;rique.
	##//Ret//##
		Un type num&eacute;rique (varie avec ##//T1//## et ##//T2//##).

{{fbdoc item="section" value="Valeur retourn&eacute;e
	Retourne la manipulation de bits Xor des deux op&eacute;randes.

{{fbdoc item="desc"}}
	Cet op&eacute;rateur retourne la manipulation de bits disjonction-exclusive de ses op&eacute;randes, une op&eacute;ration logique dont le r&eacute;sultat est une valeur avec ses bits positionn&eacute;s en fonction des bits de ses op&eacute;randes.

	La table de v&eacute;rit&eacute; ci-dessous montre toutes les combinaisons de l'op&eacute;ration bool&eacute;enne de disjonction exclusive:

	{{table columns="" cellpadding="2" cells="<table>Bit c&ocirct&eacute gauche;Bit c&ocirct&eacute droit;R&eacutesultat;0;0;0;1;0;1;0;1;1;1;1;0;</table>

	Aucun circuit-court n'est possible - les deux expressions sont toujours &eacute;valu&eacute;es.
	
	Le type de retour d&eacute;pend des types des valeurs pass&eacute;es. Les valeurs de type ##[[KeyPgByte Byte]]##, ##[[KeyPgUbyte UByte]]## et &agrave; virgule flottante sont en premier converties en ##[[KeyPgInteger Integer]]##. Si les types des deux c&ocirc;t&eacute;s diff&egrave;rent seulement par leur signe, alors le type de retour est le m&ecirc;me que celui du c&ocirc;t&eacute; gauche (##//T1//##), autrement, le plus large des deux types est retourn&eacute;.

	Cet op&eacute;rateur peut &ecirc;tre surcharg&eacute; pour les types d&eacute;finis par l'utilisateur.

{{fbdoc item="ex"}}
{{fbdoc item="filename" value="examples/manual/operator/xor-bitwise.bas"}}%%(freebasic)
' Using the XOR operator on two numeric values
DIM AS UBYTE numeric_value1, numeric_value2
numeric_value1 = 15 '00001111
numeric_value2 = 30 '00011110

'Result =  17  =     00010001
PRINT numeric_value1 XOR numeric_value2
SLEEP
%%

{{fbdoc item="filename" value="examples/manual/operator/xor-logical.bas"}}%%(freebasic)
' Using the XOR operator on two conditional expressions
Dim As UByte numeric_value1, numeric_value2
numeric_value1 = 10
numeric_value2 = 15

IF numeric_value1 = 10 XOR numeric_value2 = 20 Then Print "Numeric_Value1 equals 10 or Numeric_Value2 equals 20"
SLEEP

' This will output "Numeric_Value1 equals 10 or Numeric_Value2 equals 20"
' because only the first condition of the IF statement is true
%%

{{fbdoc item="lang"}}
	- Dans le dialecte //[[CompilerOptlang -lang qb]]//, cet op&eacute;rateur ne peut pas &ecirc;tre surcharg&eacute;.

{{fbdoc item="diff"}}
	- Aucune

{{fbdoc item="see"}}
	- [[TblTruth Tables de v&eacute;rit&eacute; des op&eacute;rateurs]]

{{fbdoc item="back" value="CatPgOpLogical|Logical Operators"}}{{fbdoc item="back" value="CatPgOperators|Operators"}}