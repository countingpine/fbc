{{fbdoc item="title" value="Op&eacute;rateur Xor (Disjonction exclusive)"}}----
Retourne la manipulation de bits Xor (disjonction exclusive) de deux valeurs numériques

{{fbdoc item="syntax"}}##
	[[KeyPgDeclare declare]] [[KeyPgOperator operator]] **Xor** ( [[KeyPgByref byref]] //lhs// [[KeyPgAs as]] //T1//, [[KeyPgByref byref]] //rhs// [[KeyPgAs as]] //T2// ) [[KeyPgAs as]] //Ret//
##
{{fbdoc item="usage"}}##
	//result// = //lhs// **Xor** //rhs//
##
{{fbdoc item="param"}}
	##//lhs//##
		Le côté gauche de l'expression.
	##//T1//##
		Tout type numérique.
	##//rhs//##
		Le côté droit de l'expression.
	##//T2//##
		Tout type numérique.
	##//Ret//##
		Un type numérique (varie avec ##//T1//## et ##//T2//##).

{{fbdoc item="ret"}}
	Retourne la manipulation de bits Xor des deux opérandes.

{{fbdoc item="desc"}}
	Cet opérateur retourne la manipulation de bits disjonction-exclusive de ses opérandes, une opération logique dont le résultat est une valeur avec ses bits positionnés en fonction des bits de ses opérandes.

	La table de vérité ci-dessous montre toutes les combinaisons de l'opération booléenne de disjonction exclusive:

	{{table columns="3" cellpadding="2" cells="Bit côté gauche;Bit côté droit;Résultat;0;0;0;1;0;1;0;1;1;1;1;0"}}

	Aucun circuit-court n'est possible - les deux expressions sont toujours évaluées.
	
	Le type de retour dépend des types des valeurs passées. Les valeurs de type ##[[KeyPgByte Byte]]##, ##[[KeyPgUbyte Ubyte]]## et à virgule flottante sont en premier converties en ##[[KeyPgInteger Integer]]##. Si les types des deux côtés diffèrent seulement par leur signe, alors le type de retour est le même que celui du côté gauche (##//T1//##), autrement, le plus large des deux types est retourné.

	Cet opérateur peut être surchargé pour les types définis par l'utilisateur.

{{fbdoc item="ex"}}
{{fbdoc item="filename" value="examples/manual/operator/xor-bitwise.bas"}}%%(freebasic)
' Using the XOR operator on two numeric values
DIM AS UBYTE numeric_value1, numeric_value2
numeric_value1 = 15 '00001111
numeric_value2 = 30 '00011110

'Result =  17  =     00010001
PRINT numeric_value1 XOR numeric_value2
SLEEP
%%

{{fbdoc item="filename" value="examples/manual/operator/xor-logical.bas"}}%%(freebasic)
' Using the XOR operator on two conditional expressions
Dim As UByte numeric_value1, numeric_value2
numeric_value1 = 10
numeric_value2 = 15

IF numeric_value1 = 10 XOR numeric_value2 = 20 Then Print "Numeric_Value1 equals 10 or Numeric_Value2 equals 20"
SLEEP

' This will output "Numeric_Value1 equals 10 or Numeric_Value2 equals 20"
' because only the first condition of the IF statement is true
%%

{{fbdoc item="lang"}}
	- Dans le dialecte //[[CompilerOptlang -lang qb]]//, cet opérateur ne peut pas être surchargé.

{{fbdoc item="diff"}}
	- Aucune

{{fbdoc item="see"}}
	- [[TblTruth Tables de vérité des opérateurs]]

{{fbdoc item="back" value="CatPgOpLogical|Logical Operators"}}{{fbdoc item="back" value="CatPgOperators|Operators"}}

