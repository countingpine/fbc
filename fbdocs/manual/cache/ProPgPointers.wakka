{{fbdoc item="title" value="Les pointeurs"}}----
Des types de données dont les valeurs sont des adresses en mémoire.

{{fbdoc item="section" value="Déclaration"}}
	Les pointeurs sont des [[ProPgVariables Variables]] dont les valeurs sont des adresses en mémoire et on dit qu'ils "pointent" vers cette mémoire. Le type de donnée qui est pointé dépend du type de pointeur (un ##[[KeyPgInteger Integer]] [[KeyPgPointer Pointer]]## pointe vers une donnée ##[[KeyPgInteger Integer]]##). Les pointeurs sont déclarés comme toute autre variable, avec le suffixe "##pointer##" ou "##ptr##" suivant le nom du type.

{{fbdoc item="section" value="Accès aux données pointées"}}
	Les données pointées par un pointeur peuvent être consultées avec ##[[KeyPgOpValueOf Operator *]]## (Valeur de). Cet opérateur renvoie une référence aux données que pointe son opérande. Ce qui suit,

{{fbdoc item="filename" value="examples/manual/proguide/pointers/builtin.bas"}}%%(freebasic)
Dim myInteger As Integer = 10
Dim myPointer As Integer Pointer = @myInteger
*myPointer = 20
Print myInteger
%%
	définit une variable ##[[KeyPgInteger Integer]]## appelée ##//myInteger//## et un pointeur d'##[[KeyPgInteger Integer]]## appelé ##//myPointer//## qui pointe vers l'emplacement de la mémoire où est stocké ##//myInteger//##. L'##[[KeyPgOpAt Operator @]]## (Adresse de) est utilisé pour récupérer l'adresse de ##//myInteger//##. La valeur de ##//20//## est attribuée à l'emplacement vers laquel pointe ##//myPointer//## - l'adresse de ##//myInteger//##, ou ##//@myInteger//##. Les modifications apportées à ##//*myPointer//## affectent directement la valeur de ##//myInteger//## (l'expression "##//*myPointer//##" est équivalente à "##//myInteger//##").

{{fbdoc item="section" value="Pointeurs vers des types définis par l'utilisateur"}}
	Les pointeurs vers des types définis par l'utilisateur sont définis et utilisés comme tous les autres pointeurs. L'accès à un membre d'un [[KeyPgType Type]] ou d'une [[KeyPgClass Class]] requiert l'une des deux méthodes suivantes:

{{fbdoc item="filename" value="examples/manual/proguide/pointers/udt.bas"}}%%(freebasic)
Type myType
	a As Integer
	b As Double
End Type

Dim x As myType
Dim p As myType Pointer = @x

'' 1) dereference the pointer and use the member access operator:
(*p).a = 10
(*p).b = 12.34

'' 2) use the shorthand form of the member access operator:
Print p->a
Print p->b
%%
	La première méthode utilise ##[[KeyPgOpMemberAccess Operator . (Accès membre)]]##. Cet opérateur accède aux membres à partir de références, par conséquent, en premier, le pointeur est déréférencé. L'opérateur d'accès membre a une plus grande priorité que l'opérateur de déréférencement, donc des parenthèses sont nécessaires pour déréférencer le pointeur avant de l'utiliser avec l'opérateur d'accès membre.

	La deuxième méthode utilise ##[[KeyPgOpPtrMemberAccess Operator -> (Accès membre par pointeur)]]##. Cet opérateur accède aux membres à partir de pointeurs qui sont automatiquement déréférencés. Cela peut rendre le code un peu plus clair, bien que les deux formes produisent des résultats identiques.

{{fbdoc item="see"}}
	- ##[[KeyPgOpAt Operator @ (Adresse de)]]##
	- ##[[KeyPgOpValueOf Operator * (Valeur de)]]##
	- ##[[KeyPgOpMemberAccess Operator . (Accès membre)]]##
	- ##[[KeyPgOpPtrMemberAccess Operator -> (Accès membre par pointeur)]]##
	- ##[[KeyPgOpVarptr Varptr]]##
	- ##[[KeyPgOpStrptr Strptr]]##
	- ##[[KeyPgOpProcptr Procptr]]##

{{fbdoc item="back" value="CatPgProgrammer|Programmer's Guide"}}

