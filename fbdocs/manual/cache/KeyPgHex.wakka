{{fbdoc item="title" value="HEX"}}----
Retourne la valeur hexadécimale du nombre donné

{{fbdoc item="syntax"}}##
	[[KeyPgDeclare declare]] [[KeyPgFunction function]] **Hex** [[KeyPgOverload overload]] ( [[KeyPgByval byval]] //number// [[KeyPgAs as]] [[KeyPgByte byte]] ) [[KeyPgAs as]] [[KeyPgString string]]

	[[KeyPgDeclare declare]] [[KeyPgFunction function]] **Hex** ( [[KeyPgByval byval]] //number// [[KeyPgAs as]] [[KeyPgShort short]] ) [[KeyPgAs as]] [[KeyPgString string]]

	[[KeyPgDeclare declare]] [[KeyPgFunction function]] **Hex** ( [[KeyPgByval byval]] //number// [[KeyPgAs as]] [[KeyPgInteger integer]] ) [[KeyPgAs as]] [[KeyPgString string]]
	[[KeyPgDeclare declare]] [[KeyPgFunction function]] **Hex** ( [[KeyPgByval byval]] //number// [[KeyPgAs as]] [[KeyPgInteger integer]], [[KeyPgByval byval]] //digits// [[KeyPgAs as]] [[KeyPgInteger integer]] ) [[KeyPgAs as]] [[KeyPgString string]]

	[[KeyPgDeclare declare]] [[KeyPgFunction function]] **Hex** ( [[KeyPgByval byval]] //number// [[KeyPgAs as]] [[KeyPgLongint longint]] ) [[KeyPgAs as]] [[KeyPgString string]]
	[[KeyPgDeclare declare]] [[KeyPgFunction function]] **Hex** ( [[KeyPgByval byval]] //number// [[KeyPgAs as]] [[KeyPgLongint longint]], [[KeyPgByval byval]] //digits// [[KeyPgAs as]] [[KeyPgInteger integer]] ) [[KeyPgAs as]] [[KeyPgString string]]	

##
{{fbdoc item="usage"}}##
	//result// = **Hex**[$]( //number// [, //digits// ] )
##
{{fbdoc item="param"}}
	##//number//##
		Un nombre ou expression évalué comme nombre.  Un nombre à virgule flottante sera converti en ##[[KeyPgLongint longint]]##.
	##//digits//##
		Facultatif: nombre de chiffres à retourner.

{{fbdoc item="ret"}}
	Une [[KeyPgString String (chaîne)]] contenant la représentation hexadécimale non-signée de ##//number//##.

{{fbdoc item="desc"}}
	Retourne la représentation hexadécimale non-signée de l'entier ##//number//##. Chiffres héxadécimaux de 0 à 9, ou A à F.

	Si vous spécifiez ##//digits//## > 0, la chaîne résultat aura exactement cette longueur.  Elle sera tronquée ou complètée avec des zéros sur la gauche, si nécessaire.

	La longueur de la chaîne ne dépassera pas le nombre de bits maximum requis pour le type de ##//number//## (8 pour un ##[[KeyPgInteger Integer (entier)]]##, 16 pour un ##[[KeyPgLongint LongInt (entier long)]])##.

	Si vous désirez l'opposé, par exemple convertir une chaîne binaire vers un nombre, la meilleure façon de le faire est d'ajouter ##"&H"##, au début de la chaîne, et la convertir en utilisant ##[[KeyPgValint Valint]]## ou ##[[KeyPgVallng Vallng]]##, de façon similaire à une chaîne numérique normale.  Par exemple ##[[KeyPgValint Valint]]("&HFF")##

{{fbdoc item="ex"}}
{{fbdoc item="filename" value="examples/manual/strings/hex.bas"}}%%(freebasic)
'54321 is D431 in hex
Print Hex(54321)
Print Hex(54321, 2)
Print Hex(54321, 5)
%%
	produira la sortie:

%%D431
31
0D431
%%

{{fbdoc item="lang"}}
	- Le suffixe de type chaîne ##"$"## est obligatoire dans le dialecte //[[CompilerOptlang -lang qb]]//.
	- Le suffixe de type chaîne ##"$"## est facultatif dans les dialectes //[[CompilerOptlang -lang fblite]]// et //[[CompilerOptlang -lang fb]]//.

{{fbdoc item="diff"}}
	- Dans QBASIC, il n'y avait aucun moyen de spécifier le nombre de chiffres retournés.
	- La taille de la chaîne retournée était limitée à 32 bits, ou 8 chiffres hexadécimaux.

{{fbdoc item="see"}}
	- ##[[KeyPgBin Bin]]##
	- ##[[KeyPgOct Oct]]##
	- ##[[KeyPgValint Valint]]##
	- ##[[KeyPgVallng Vallng]]##

{{fbdoc item="back" value="CatPgString|String Functions"}}