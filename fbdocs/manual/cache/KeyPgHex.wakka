{{fbdoc item="title" value="HEX"}}----
Retourne la valeur hexad&eacute;cimale du nombre donn&eacute;

{{fbdoc item="syntax"}}##
	[[KeyPgDeclare declare]] [[KeyPgFunction function]] **Hex** [[KeyPgOverload overload]] ( [[KeyPgByval byval]] //number// [[KeyPgAs as]] [[KeyPgByte byte]] ) [[KeyPgAs as]] [[KeyPgString string]]

	[[KeyPgDeclare declare]] [[KeyPgFunction function]] **Hex** ( [[KeyPgByval byval]] //number// [[KeyPgAs as]] [[KeyPgShort short]] ) [[KeyPgAs as]] [[KeyPgString string]]

	[[KeyPgDeclare declare]] [[KeyPgFunction function]] **Hex** ( [[KeyPgByval byval]] //number// [[KeyPgAs as]] [[KeyPgInteger integer]] ) [[KeyPgAs as]] [[KeyPgString string]]
	[[KeyPgDeclare declare]] [[KeyPgFunction function]] **Hex** ( [[KeyPgByval byval]] //number// [[KeyPgAs as]] [[KeyPgInteger integer]], [[KeyPgByval byval]] //digits// [[KeyPgAs as]] [[KeyPgInteger integer]] ) [[KeyPgAs as]] [[KeyPgString string]]

	[[KeyPgDeclare declare]] [[KeyPgFunction function]] **Hex** ( [[KeyPgByval byval]] //number// [[KeyPgAs as]] [[KeyPgLongint longint]] ) [[KeyPgAs as]] [[KeyPgString string]]
	[[KeyPgDeclare declare]] [[KeyPgFunction function]] **Hex** ( [[KeyPgByval byval]] //number// [[KeyPgAs as]] [[KeyPgLongint longint]], [[KeyPgByval byval]] //digits// [[KeyPgAs as]] [[KeyPgInteger integer]] ) [[KeyPgAs as]] [[KeyPgString string]]	

##
{{fbdoc item="usage"}}##
	//result// = **Hex**[$]( //number// [, //digits// ] )
##
{{fbdoc item="param"}}
	##//number//##
		Un nombre ou expression &eacute;valu&eacute; comme nombre.  Un nombre &agrave; virgule flottante sera converti en ##[[KeyPgLongint LongInt]]##.
	##//digits//##
		Facultatif: nombre de chiffres &agrave; retourner.

{{fbdoc item="section" value="Valeur retourn&eacute;e
	Une [[KeyPgString String (cha&icirc;ne)]] contenant la repr&eacute;sentation hexad&eacute;cimale non-sign&eacute;e de ##//number//##.

{{fbdoc item="desc"}}
	Retourne la repr&eacute;sentation hexad&eacute;cimale non-sign&eacute;e de l'entier ##//number//##. Chiffres h&eacute;xad&eacute;cimaux de 0 &agrave; 9, ou A &agrave; F.

	Si vous sp&eacute;cifiez ##//digits//## > 0, la cha&icirc;ne r&eacute;sultat aura exactement cette longueur.  Elle sera tronqu&eacute;e ou compl&egrave;t&eacute;e avec des z&eacute;ros sur la gauche, si n&eacute;cessaire.

	La longueur de la cha&icirc;ne ne d&eacute;passera pas le nombre de bits maximum requis pour le type de ##//number//## (8 pour un ##[[KeyPgInteger Integer (entier)]]##, 16 pour un ##[[KeyPgLongint LongInt (entier long)]])##.

	Si vous d&eacute;sirez l'oppos&eacute;, par exemple convertir une cha&icirc;ne binaire vers un nombre, la meilleure fa&ccedil;on de le faire est d'ajouter ##"&H"##, au d&eacute;but de la cha&icirc;ne, et la convertir en utilisant ##[[KeyPgValint ValInt]]## ou ##[[KeyPgVallng ValLng]]##, de fa&ccedil;on similaire &agrave; une cha&icirc;ne num&eacute;rique normale.  Par exemple ##[[KeyPgValint ValInt]]("&HFF")##

{{fbdoc item="ex"}}
{{fbdoc item="filename" value="examples/manual/strings/hex.bas"}}%%(freebasic)
'54321 is D431 in hex
Print Hex(54321)
Print Hex(54321, 2)
Print Hex(54321, 5)
%%
	produira la sortie:

%%D431
31
0D431
%%

{{fbdoc item="lang"}}
	- Le suffixe de type cha&icirc;ne ##"$"## est obligatoire dans le dialecte //[[CompilerOptlang -lang qb]]//.
	- Le suffixe de type cha&icirc;ne ##"$"## est facultatif dans les dialectes //[[CompilerOptlang -lang fblite]]// et //[[CompilerOptlang -lang fb]]//.

{{fbdoc item="diff"}}
	- Dans QBASIC, il n'y avait aucun moyen de sp&eacute;cifier le nombre de chiffres retourn&eacute;s.
	- La taille de la cha&icirc;ne retourn&eacute;e &eacute;tait limit&eacute;e &agrave; 32 bits, ou 8 chiffres hexad&eacute;cimaux.

{{fbdoc item="see"}}
	- ##[[KeyPgBin Bin]]##
	- ##[[KeyPgOct Oct]]##
	- ##[[KeyPgValint Valint]]##
	- ##[[KeyPgVallng Vallng]]##

{{fbdoc item="back" value="CatPgString|String Functions"}}