{{fbdoc item="title" value="MUTEXDESTROY"}}----
D&eacute;truit un "mutex"

{{fbdoc item="syntax"}}##
	[[KeyPgDeclare declare]] [[KeyPgSub sub]] **Mutexdestroy** ( [[KeyPgByval byval]] //id// [[KeyPgAs as]] [[KeyPgAny any]] [[KeyPgPtr ptr]] )
##
{{fbdoc item="usage"}}##
	**Mutexdestroy**( //id// )
##
{{fbdoc item="param"}}
	##//id//##
		Le ##[[KeyPgAny Any]] [[KeyPgPtr Ptr]]## handle du "mutex" &agrave; d&eacute;truire.

{{fbdoc item="desc"}}
	##Mutexdestroy## d&eacute;truit un "mutex" cr&eacute;&eacute; par ##[[KeyPgMutexCreate MutexCreate]]##.  Cet appel doit &ecirc;tre ex&eacute;cut&eacute; lorsque tous les "threads" utilisant le "mutex" ne sont plus en cours d'utilisation.

	    Voir ##[[KeyPgMutexCreate MutexCreate]]## pour plus d'information g&eacute;n&eacute;rale sur les "mutex".

{{fbdoc item="ex"}}
	%%(freebasic)

'' Threading synchronization using Mutexes
	'' If you comment out the lines containing "MutexLock" and "MutexUnlock",

'' the threads will not be in sync and some of the data may be printed
	'' out of place.
	Declare Sub thread1( param As Any Ptr )

Declare Sub thread2( param As Any Ptr )
	Declare Sub teletype (ByVal text As String, ByVal x As Integer, ByVal y As Integer)

Dim Shared threadsync As Any Ptr
	Dim Shared thread1handle As Any Ptr
	Dim Shared thread2handle As Any Ptr
	'' Create a mutex to syncronize the threads
	threadsync = MutexCreate
	'' Call thread 1

thread1handle = ThreadCreate(@thread1)