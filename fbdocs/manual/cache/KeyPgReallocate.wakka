{{fbdoc item="title" value="REALLOCATE"}}----
Réaffecte au stockage un bloc existant et réservé de la mémoire

{{fbdoc item="syntax"}}##
	[[KeyPgDeclare declare]] [[KeyPgFunction function]] **Reallocate** [[KeyPgCdecl cdecl]] ( [[KeyPgByval byval]] //pointer// [[KeyPgAs as]] [[KeyPgAny any]] [[KeyPgPtr ptr]], [[KeyPgByval byval]] //count// [[KeyPgAs as]] [[KeyPgInteger integer]] ) [[KeyPgAs as]] [[KeyPgAny any]] [[KeyPgPtr ptr]]
##
{{fbdoc item="usage"}}##
		//result// = **Reallocate**( //pointer//, //count// )
##
{{fbdoc item="param"}}
	##//pointer//##
		L'adresse de mémoire allouée qui doit être réaffectée.
	##//count//##
		Le nombre total d'octets qui doivent être réaffectés.

{{fbdoc item="ret"}}
	L'adresse de la mémoire réaffectée. Un pointeur nul (##0##) est retourné si la réallocation a échoué et la mémoire d'origine pointée par ##//pointer//## reste inchangée.

{{fbdoc item="desc"}}
	Essaye de réaffecter ou de redimensionner, la mémoire précédemment réservée avec ##[[KeyPgAllocate Allocate]]##. Le contenu de la mémoire tampon est conservé, mais si ##//count//## est inférieur à la taille d'origine du bloc de mémoire, la mémoire tampon sera tronquée.

	Si ##//pointer//## est nul (##0##), alors le comportement de ##""ReAllocate""## est identique à celui de ##[[KeyPgAllocate Allocate]]##.

	La mémoire réallouée doit être désallouée ou libérée, avec ##[[KeyPgDeallocate Deallocate]]## quand elle n'est plus utilisée.

	Cette fonction ne fait pas partie de la bibliothèque d'exécution de FreeBASIC, c'est un alias pour ##//realloc//## de la bibliothèque d'exécution du langage C, ce n'est donc pas garanti d'être "thread-safe" sur toutes les plates-formes.
	
	**NOTE**: La réaffectation d'un pointeur dans une fonction d'objet, quand ce pointeur contient l'objet parent de la fonction, est indéfinie et entraînera probablement dans des accidents horribles.

{{fbdoc item="ex"}}
{{fbdoc item="filename" value="examples/manual/memory/reallocate.bas"}}%%(freebasic)
Dim a as Integer Ptr, b as Integer Ptr, i As Integer

a = Allocate( 5 * SizeOf(Integer) )   ' Allocate memory for 5 integers

If a = 0 Then Print "Error Allocating a": End

For i = 0 to 4
  a[i] = (i + 1) * 2   ' Assign integers to the buffer
Next i

b = ReAllocate( a, 10 * SizeOf(Integer) )   ' Reallocate memory for 5 additional integers

If b <> 0 Then

	a = b

	For i = 5 to 9
	  a[i] = (i + 1) * 2   ' Assign more integers to the buffer
	Next i

	For i = 0 to 9   ' Print the integers
	  Print i, a[i]
	Next i
	Print

else '' Reallocate failed, memory unchanged

	Print "Error Reallocating a"

	For i = 0 to 4   ' Print the integers
	  Print i, a[i]
	Next i
	Print

end if

Deallocate a   ' Clean up
%%

{{fbdoc item="lang"}}
	- Non disponible dans le dialecte //[[CompilerOptlang -lang qb]]// sauf si référencé avec l'alias ##**""__Reallocate""**##.

{{fbdoc item="diff"}}
	- Nouveau pour ""FreeBASIC""

{{fbdoc item="see"}}
	- ##[[KeyPgAllocate Allocate]]##
	- ##[[KeyPgCallocate Callocate]]##
	- ##[[KeyPgDeallocate Deallocate]]##

{{fbdoc item="back" value="CatPgMemory|Memory Functions"}}