{{fbdoc item="title" value="CONST (Member)"}}----
Indique qu'un membre d'une proc&eacute;dure est en lecture seule.

{{fbdoc item="syntax"}}##
	[[KeyPgType Type]] //typename//
		[[KeyPgDeclare declare]] **Const** //membertype// //membername// ...
	End Type
##
{{fbdoc item="param"}}
	##//typename//##
		Nom d'un type de donn&eacute;e d&eacute;fini par l'utilisateur.
	##//membertype//##
		##[[KeyPgMemberSub Sub]]## ou ##[[KeyPgMemberFunction Function]]##.
	##//membername// ...##
		Nom du membre &agrave; d&eacute;clarer ou d&eacute;finir avec liste de param&egrave;tres ou valeur de retour.

{{fbdoc item="desc"}}
	Indique que le ##//membertype//## imm&eacute;diatement &agrave; la droite du qualificateur ##**Const**## doit &ecirc;tre consid&eacute;r&eacute; comme &eacute;tant en lecture seule.  Les d&eacute;clarations "En-lecture-seule" (Read-only) (##**Const**##) sont une mesure de s&eacute;curit&eacute; qui peut &ecirc;tre comprise comme "promesse d'aucun changement".  Le compilateur utilise les d&eacute;clarations ##**Const**## pour v&eacute;rifier les op&eacute;rations sur les variables et param&egrave;tres et g&eacute;n&eacute;rer une erreur lors de la compilation si leurs donn&eacute;es pourraient changer.  Il n'y a pas de temps perdu d'ex&eacute;cution en utilisant les qualificateurs ##**Const**## puisque tous les contr&ocirc;les sont effectu&eacute;s au moment de la compilation.

	##**Const**##, lorsqu'il est utilis&eacute; pr&eacute;c&eacute;dant ##//membertype//## au d&eacute;but d'une d&eacute;claration indique que le param&egrave;tre cach&eacute; ##[[KeyPgThis This]]## est consid&eacute;r&eacute; comme en lecture seule.  La d&eacute;claration peut &ecirc;tre lue comme l'invocation de la promesse que ##//membertype//## ne changera pas de ##//typename//##, et le compilateur affichera une erreur si le membre de la proc&eacute;dure essaye de changer un champ de donn&eacute;es, ou appelle un membre non-##**Const**## de proc&eacute;dure.  Les membres de proc&eacute;dures ne peuvent &ecirc;tre &agrave; la fois ##**Const**## et ##[[KeyPgStaticMember Static]]## car les membres statiques de proc&eacute;dures n'ont pas de param&egrave;tre ##[[KeyPgThis This]]## cach&eacute;.

{{fbdoc item="ex"}}
{{fbdoc item="filename" value="examples/manual/udt/const-proc.bas"}}%%(freebasic)
'' Const Member Procedures

type foo
  x as integer
  c as const integer = 0
  declare const sub Inspect1()
  declare const sub Inspect2()
  declare sub Mutate1()
  declare sub Mutate2()
end type

''
sub foo.Mutate1()
  '' we can change non-const data fields
  x = 1

  '' but we still can't change const data
  '' fields, they are promised not to change
  '' c = 1 '' Compile error

end sub

''
sub foo.Mutate2()
  '' we can call const members
  Inspect1()

  '' and non-const members
  Mutate1()

end sub

''
sub foo.Inspect1()
  '' can use data members
  dim y as integer
  y = c + x

  '' but not change them because Inspect1()
  '' is const and promises not to change foo
  '' x = 10 '' Compile error

end sub

''
sub foo.Inspect2()
  '' we can call const members
  Inspect1()

  '' but not non-const members
  '' Mutate1() '' Compile error

end sub
%%

{{fbdoc item="diff"}}
	- Nouveau pour FreeBASIC

{{fbdoc item="see"}}
	- ##[[KeyPgConst Const]]##
	- ##[[KeyPgConstQualifier Const (Qualificateur)]]##
	- ##[[KeyPgDim Dim]]##
	- ##[[KeyPgType Type]]##

{{fbdoc item="back" value="CatPgProcedures|Procedures"}}{{fbdoc item="back" value="CatPgUserDefTypes|User Defined Types"}}