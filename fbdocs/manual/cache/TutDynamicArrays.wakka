{{fbdoc item="title" value="Dynamic Arrays"}}----

Bonjour, cette page explique la bonne utilisation des tableaux dynamiques en FreeBASIC. Bien que ce ne soit pas un tr&egrave;s long tutoriel, beaucoup de gens ont eu quelques probl&egrave;mes avec cette notion et j'ai senti que cela valait la peine dans le mettre dans la partie "Mise en route" des tutoriels.

Les tableaux sontsoigneusement ordonn&eacute;s; ils peuvent &ecirc;tre utilis&eacute;s et redimensionn&eacute;es &agrave; travers un programme, avec peu de difficult&eacute;s. Tout d'abord, nous devrions discuter des deux mani&egrave;res de cr&eacute;erun tableau dynamique. Dans le m&ecirc;me code, je vais vous expliquer comment redimensionner un "//Dynamic Shared Array//" dans une SUB ou FUNCTION. Lisez les commentaires dans le code pour mieux le comprendre.

%%(freebasic)
declare sub mySub ()

' Comme depuis 0.17 DYNAMIC et $DYNAMIC sont inutiles. vous devez d&eacute;finir un tableau dynamique &agrave; chaque fois
' comme vous le voyez les deux m&eacute;thodes sont utilisables pour d&eacute;clarer un tableau avec succ&egrave;s
dim shared myArray1() as ubyte
redim shared myArray2(0) as ubyte

mySub

' comme les tableaux sont partag&eacute;s ils sont accessibles dans tout le module
print myArray1(5) ' will print 2
print myArray2(6) ' will print 3

sub mySub ()
	' NE PAS utiliser "redim shared" dans une sub ou function! m&ecirc;me s'il est partag&eacute;, vous devez omettre le mot "shared" pour que cela fonctionne
	redim myArray1(0 to 9) as ubyte
	redim myArray2(0 to 9) as ubyte
	myArray1(5) = 2
	myArray2(6) = 3
end sub
%%

Maintenant, vous vous demandez peut-&ecirc;tre comment vous pouvez redimensionner un tableau en utilisant le mot-clef PRESERVE. Normalement, il suffit d'ajouter PRESERVE comme l'indique la syntaxe de REDIM. Pourtant, en fait, cela ne fonctionne que si on ne change que la premi&egrave;re dimension du tableau! Par exemple, le programme suivant ne fonctionnera pas correctement:

%%(freebasic)
' d&eacute;clarer le tableau dynamique de la meilleure fa&ccedil;on
redim shared myArray(0 to 9, 0 to 9) as ubyte
dim as ubyte x, y, i

' remplir le tableau avec des valeurs
for y = 0 to 9
	for x = 0 to 9
	    i += 1
	    myArray(x, y) = i
	next x
next y

' prouve que les valeurs sont correctes &agrave; l'origine:
for y = 0 to 9
	for x = 0 to 9
	    print using "##,"; myArray(x, y);
	next x
	print
next y
print
print "Press a key..."
sleep
cls

' redimensionne le tableau
redim preserve myArray(0 to 18, 0 to 12) as ubyte

' les valeurs n'ont pas &eacute;t&eacute; pr&eacute;serv&eacute;es correctement!
for y = 0 to 9
	for x = 0 to 9
	    print using "##,"; myArray(x, y);
	next x
	print
next y

sleep
end
%%

Essayez-le! Vous pouvez voir qu'il ne fonctionne pas correctement. C'est parce que seule la premi&egrave;re dimension d'un tableau peut changer de taille, tandis que le reste conserve la m&ecirc;me taille, pour que PRESERVE fonctionne correctement.

Il existe une solution, que je posterai plus tard, apr&egrave;s l'avoir modifi&eacute;e afin de lui donner un sens pour tout programme, pas seulement le mien, et de faire quelques r&eacute;visions afin de ne pas sortir des limites. Pour le moment, soyez cr&eacute;atif ;)