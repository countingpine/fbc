{{fbdoc item="title" value="DO...LOOP"}}----
Control flow statement for looping

{{fbdoc item="syntax"}}##
	**Do** [ { **Until** | **While** } //condition// ]
		[ //statement block// ]
	**Loop**
//ou//
	**Do**
		[ //statement block// ]
	**Loop** [ { **Until** | **While** } //condition// ]
##
{{fbdoc item="desc"}}
	L'instruction ##**Do**## exécute les instructions dans le //##statement block## (= bloc d'instructions)// jusqu'à ce que / tandis que la //##condition#//, s'il y en a une,  soit vraie.

	Si ##**Until**## est utilisé, la déclaration ##**Do**## arrête la répétition du //##statement block## (= bloc d'instructions)// quand //##conditio##n// devient vraie. Le mot-clé ##**While**## a un effet contraire, il arrête la boucle si //##condition##// est vraie. Si les deux //##condition##// et soit ##**Until**## ou ##**While**## sont omis, l'instruction ##**Do**## boucle indéfiniment.

	Si une instruction ##[[KeyPgExit Exit]]## ##**Do**## est rencontrée à l'intérieur du //##statement block## (= bloc d'instructions)//, la boucle est terminée, et l'exécution reprend immédiatement après la déclaration ##**Loop**## qui l'enferme. Si une déclaration ##[[KeyPgContinue Continue]]## ##**Do**## est rencontrée, le reste du //statement block (= bloc d'instructions) // est ignoré et l'exécution reprend à l'instruction ##**Do**##.

	Dans la première syntaxe, la //##condition##// est vérifiée lorsque l'instruction ##**Do**## est rencontrée pour la première fois et si la //##condition##// est remplie, le //##statement block## (= bloc d'instructions)// sera ignoré. Dans la seconde syntaxe, la //##condition##// est d'abord vérifiée //après// l'exécution du //##statement block## (= bloc d'instructions)//. Cela signifie que le //##statement block## (= bloc d'instructions)// est toujours garanti d'être exécuté //au moins// une fois.

	//##condition##// peut être n'importe quelle expression valide qui a la valeur False (zéro) ou True (non nul).

{{fbdoc item="ex"}}
	Dans cet exemple, une boucle ##**Do**## est utilisée pour compter le nombre total de nombres impairs de 1 à 10. La boucle sera répétée //##until## = jusqu'à// ce que la condition //##n > 10##// soit remplie:
{{fbdoc item="filename" value="examples/manual/control/do-loop.bas"}}%%(freebasic)
dim as integer n = 1                            '' number to check
dim as integer total_odd = 0                    '' running total of odd numbers
do until( n > 10 )
  if( ( n MOD 2 ) > 0 ) then total_odd += 1    '' add to total if n is odd (has remainder from division by 2)
  n += 1
loop
print "total odd numbers: " ; total_odd         '' prints '5'

end 0
%%

	Ici, une boucle ##**Do**## infinie est utilisée pour compter le nombre total de nombres pairs. Nous plaçons le test de condition dans la boucle par l'intermédiaire de ##[[KeyPgIfthen If...Then]]##, qui fait sortir de la boucle quand //##n > 10##// devient vrai:
{{fbdoc item="filename" value="examples/manual/control/do-loop2.bas"}}%%(freebasic)
   dim as integer n = 1                            '' number to check
   dim as integer total_even = 0                   '' running total of even numbers
   do
	  if( n > 10 ) then exit do                    '' exit if we've scanned our 10 numbers
   
	  if( ( n MOD 2 ) = 0 ) then total_even += 1   '' add to total if n is even (no remainder from division by 2)
	  n += 1
   loop
   print "total even numbers: " ; total_even       '' prints '5'

   end 0
%%

{{fbdoc item="lang"}}
	- Dans les dialectes //[[CompilerOptlang -lang qb]]// et //[[CompilerOptlang -lang fblite]]//, les variables déclarées dans le bloc de la boucle DO..LOOP ont une [[ProPgVariableScope portée]] à l'échelle de la fonction comme dans QB. 
	- Dans les dialectes //[[CompilerOptlang -lang fb]]// et //[[CompilerOptlang -lang deprecated]]//, les variables déclarées dans un bloc FOR..NEXT ne sont visibles que dans ce bloc et ne peut être consultées à l'extérieur.

{{fbdoc item="diff"}}
	- Aucune

{{fbdoc item="see"}}
	- ##[[KeyPgContinue Continue]]##
	- ##[[KeyPgExit Exit]]##
	- ##[[KeyPgFornext For...Next]]##
	- ##[[KeyPgWhilewend While...Wend]]##

{{fbdoc item="back" value="CatPgControlFlow|Control Flow"}}