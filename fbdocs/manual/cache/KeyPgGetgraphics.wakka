{{fbdoc item="title" value="GET (GRAPHICS)"}}----
Obtient une copie d'une portion de la page courante de travail ou d'un tampon image

{{fbdoc item="syntax"}}##
	**Get** [//source//,] [Step] (//x1//, //y1//) - [STEP] (//x2//, //y2//), //dest//]
##
{{fbdoc item="param"}}
	##//source//##
		adresse d'un tampon image.
	##Step##
		indique que les coordonnées qui suivent ne sont pas absolues.
	##//x1//##,  ##//y1//##
		coordonnées du coin en haut à gauche de la sous-image à copier.
	##//x2//##,  ##//y2//##
		coordonnées du coin en bas à droite de la sous-image à copier.
	##//dest//##
		adresse du tampon précédemment alloué pour stocker les données image.

{{fbdoc item="desc"}}
	##**Get**## copie une portion rectangulaire de la page de travail courante, spécifiée par les coordonnées (##//x1//##,  ##//y1//##) et (##//x2//##,  ##//y2//##), qui représentent respectivement les coins haut-gauche et bas-droite du rectangle. ##**Step**## précise que les coordonnées sont relatives à la position du crayon graphique, et/ou les coordonnées sont relatives aux coordonnées du coin haut-gauche. Le nouveau tampon image est formaté pour correspondre au [[GfxInternalFormats format pixel ]]du mode écran courant.

	##//dest//## peut être une addresse, un [[ProPgArrays tableau]] ou une référence au premier élément d'un [[ProPgArrays tableau]] qui recevra le nouveau tampon image. L'allocation mémoire doit être suffisante pour recevoir le tampon image; le nombre d'octets varie avec le [[CompilerOptlang -lang dialect]] utilisé pour compiler le programme.

	##//source//## peut être une addresse, un [[ProPgArrays tableau]] ou une référence au premier élément d'un [[ProPgArrays tableau]] qui contient un tampon image pour recevoir la portion de l'image. ##//x1//##,  ##//y1//##, ##//x2//##,  ##//y2//##, ##**Step**## et ##//dest//## ont la même signification dans ce cas.

	Les coordonnées du rectangle sont modifiées par les plus récentes déclarations de ##[[KeyPgWindow Window]]## et ##[[KeyPgViewgraphics View (Graphics)]]##, et doivent être toutes les deux dans la région de découpage courante (clipping region) validée par ##[[KeyPgViewgraphics View (Graphics)]]##, autrement sera émise une erreur d'appel illégal à une fonction, et la fonction n'aura aucun effet.

**Erreurs de fonctionnement:**
	##**Get**## produit une des [[ProPgErrorHandling erreurs de fonctionnement]] suivantes:

	//(##1##) Illegal function call//
		- ##//dest//## est un tableau, mais il n'est pas assez grand pour contenir le tampon image.
		- Les coordonnées du coin en haut à gauche ou en bas à droite sont en dehors de la région de découpage courante (clipping region). Voir ##[[KeyPgViewgraphics View (Graphics)]]##.

{{fbdoc item="lang"}}
	Il y a 2 types de tampons (voir [[GfxInternalFormats Formats graphiques internes]]) dépendant du dialecte FB qui est utilisé:

	- Dans les dialectes //[[CompilerOptlang -lang fb]]//, ##//dest//## reçoit un tampon image nouveau-style, consistant en une en-tête image de 32 octets suivi par les données pixels data qui est "row-padded" jusqu'à la limite du paragraphe suivant (16 octets). Utilisez la formule suivante pour calculer la taille totale, en octets, nécessaire pour stocker le tampon image, où ##w## et ##h## sont respectivement la largeur et la hauteur de la portion rectangulaire de la page courante de travail ou du tampon image source, et ##bpp## est le nombre d'octets par pixel de l'écran courant:
		##size = 32 + (((w * bpp + &hF) and not &hF) * h)##

	- Dans le dialecte //[[CompilerOptlang -lang qb]]// et //[[CompilerOptlang -lang fblite]]//, ##//dest//## reçoit un tampon image style-QB, qui consiste en une en-tête image de 4 octets suivi par les données pixel qui ne sont pas "row-padded". Utilisez la formule suivante pour calculer la taille totale, en octets, nécessaire pour stocker le tampon image, où ##w## et ##h## sont respectivement la largeur et la hauteur de la portion rectangulaire de la page courante de travail ou du tampon image source, et ##bpp## est le nombre d'octets par pixel du [[GfxInternalFormats format pixel]] du mode écran courant:
		##size = 4 + (w * h * bpp)##

{{fbdoc item="ex"}}
	{{fbdoc item="filename" value="examples/manual/gfx/get.bas"}}%%(freebasic)
#include once "fbgfx.bi"

'' Setup a 400x300 32bit screen
screenres 400, 300, 32

'' First draw funny stuff...
line (10,10)-(140,30), rgb(255,255,0), bf
draw string (20, 20), "Hello there!", rgb(255,0,0)

'' Now capture a 150x50 block from the top-left of the screen into an image
'' buffer with GET...
dim as fb.Image ptr image = imagecreate(150, 50)
get (1,1)-(150,50), image

'' And duplicate it all over the place!
put (1,50), image
put (1,100), image
put (1,150), image
put (1,200), image
put (1,250), image
put (150,1), image
put (150,50), image
put (150,100), image
put (150,150), image
put (150,200), image
put (150,250), image

'' And a frame around a whole screen..
line (1,1)-(400-1,300-1), rgb(255,255,0), b

'' Now get the whole screen...
dim as fb.Image ptr big = imagecreate(400, 300)
get (1,1)-(400-1,300-1), big

'' And display that "screenshot" as if it was scrolling by...
dim as integer x = -350
while ((inkey() = "") and (x < 350))
	screenlock
		cls
		put (x,1), big
	screenunlock

	sleep 100, 1

	x += 10
wend
%%

{{fbdoc item="see"}}
	- ##[[KeyPgPutgraphics Put (Graphics)]]##
	- ##[[KeyPgGetfileio Get (File I/O)]]##
	- ##[[KeyPgScreengraphics Screen (Graphics)]]##
	- ##[[KeyPgWindow Window]]##
	- ##[[KeyPgViewgraphics View (Graphics)]]##
	- [[GfxInternalFormats Formats graphiques internes]]

{{fbdoc item="back" value="CatPgGfx2D|2D Drawing Functions"}}
