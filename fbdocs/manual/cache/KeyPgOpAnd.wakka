{{fbdoc item="title" value="Operator AND (Conjunction)"}}----
Retourne la manipulation de bits AND (conjonction) de deux valeurs num&eacute;riques

{{fbdoc item="syntax"}}##
	[[KeyPgDeclare declare]] [[KeyPgOperator operator]] **And** ( [[KeyPgByref byref]] //lhs// [[KeyPgAs as]] //T1//, [[KeyPgByref byref]] //rhs// [[KeyPgAs as]] //T2// ) [[KeyPgAs as]] //Ret//
##
{{fbdoc item="usage"}}##
	//result// = //lhs// **And** //rhs//
##
{{fbdoc item="param"}}
	##//lhs//##
		L'expression du c&ocirc;t&eacute; gauche.
	##//T1//##
		N'importe quel type num&eacute;rique.
	##//rhs//##
		L'expression du c&ocirc;t&eacute; droit.
	##//T2//##
		N'importe quel type num&eacute;rique.
	##//Ret//##
		Un type num&eacute;rique (varie avec ##//T1//## et ##//T2//##).

{{fbdoc item="section" value="Valeur retourn&eacute;e
	Retourne la manipulation de bits AND (conjonction) des deux op&eacute;randes.

{{fbdoc item="desc"}}
	Cet op&eacute;rateur retourne la manipulation de bits AND de ses op&eacute;randes, une op&eacute;ration logique dont le r&eacute;sultat est une valeur dont les bits d&eacute;pendent de la valeur des bits des deux op&eacute;randes.

	La table de v&eacute;rit&eacute; ci-dessous montre les diff&eacute;rentes combinaisons d'une op&eacute;ration AND bool&eacute;enne:

	{{table columns="" cellpadding="2" cells="<table>Bit c&ocirct&eacute gauche;Bit c&ocirct&eacute droit;R&eacutesultat;0;0;0;1;0;0;0;1;0;1;1;1;</table>

	Aucun court-circuit n'est ex&eacute;cut&eacute; - les deux expressions sont toujours &eacute;valu&eacute;es.
	
	Le type de la valeur retourn&eacute;e d&eacute;pend des types des valeurs pass&eacute;es. Les valeurs de types ##[[KeyPgByte Byte]]##, ##[[KeyPgUbyte UByte]]## et &agrave; virgule flottante sont en premier converties en ##[[KeyPgInteger Integer]]##. Si les types des deux c&ocirc;t&eacute;s diff&egrave;rent seulement par le fait d'&ecirc;tre sign&eacute; ou non, alors le type de la valeur retourn&eacute;e sera le m&ecirc;me que le type le l'op&eacute;rande c&ocirc;t&eacute; gauche (##//T1//##), autrement, le plus large des deux types sera utilis&eacute;.

	Cet op&eacute;rateur peut &ecirc;tre surcharg&eacute; pour des types d&eacute;finis par l'utilisateur.

{{fbdoc item="ex"}}
{{fbdoc item="filename" value="examples/manual/operator/and-bitwise.bas"}}%%(freebasic)
' Using the AND operator on two numeric values
DIM AS UBYTE numeric_value1, numeric_value2
numeric_value1 = 15 '00001111
numeric_value2 = 30 '00011110

'Result =  14  =     00001110
PRINT numeric_value1 AND numeric_value2
SLEEP
%%

{{fbdoc item="filename" value="examples/manual/operator/and-logical.bas"}}%%(freebasic)
' Using the AND operator on two conditional expressions
Dim As UByte numeric_value1, numeric_value2
numeric_value1 = 15
numeric_value2 = 25

IF numeric_value1 > 10 AND numeric_value1 < 20 Then Print "Numeric_Value1 is between 10 and 20"
IF numeric_value2 > 10 AND numeric_value2 < 20 Then Print "Numeric_Value2 is between 10 and 20"
SLEEP

' This will output "Numeric_Value1 is between 10 and 20" because
' both conditions of the IF statement is true
' It will not output the result of the second IF statement because the first
' condition is true and the second is false.
%%

{{fbdoc item="lang"}}
	- Dans le dialecte //[[CompilerOptlang -lang qb]]//, cet op&eacute;rateur ne peut pas &ecirc;tre surcharg&eacute;.

{{fbdoc item="diff"}}
	- Aucune

{{fbdoc item="see"}}
	- [[TblTruth Table de v&eacute;rit&eacute; des op&eacute;rateurs]]

{{fbdoc item="back" value="CatPgOpLogical|Logical Operators"}}{{fbdoc item="back" value="CatPgOperators|Operators"}}