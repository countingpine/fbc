<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">{{fbdoc item="title" value="ImageConvertRow"}}----<div id="fb_tab_r"> <img src="images/fblogo_mini.gif">
Convertit une ligne de donn&eacute;es image dans une autre profondeur de couleur<br \=""><br \="">{{fbdoc item="syntax"}}##<br \="">[[KeyPgDeclare Declare]] [[KeyPgSub Sub]] **ImageConvertRow** ( [[KeyPgByval ByVal]] //src// [[KeyPgAs As]] [[KeyPgAny Any]]  [[KeyPgPtr Ptr]], [[KeyPgByval ByVal]] //src_bpp// [[KeyPgAs As]] [[KeyPgInteger Integer]], [[KeyPgByval ByVal]] //dst// [[KeyPgAs As]] [[KeyPgAny Any]]  [[KeyPgPtr Ptr]], [[KeyPgByval ByVal]] //dst_bpp// [[KeyPgAs As]] [[KeyPgInteger Integer]], [[KeyPgByval ByVal]] //width// [[KeyPgAs As]] [[KeyPgInteger Integer]], [[KeyPgByval ByVal]] //isrgb// [[KeyPgAs As]] [[KeyPgInteger Integer]] = 1 )<br \="">##<br \="">

{{fbdoc item="usage"}}##<br \="">**ImageConvertRow**( //src//, //src_bpp//, //dst//, //dst_bpp//, //width// [, //isrgb// ] )<br \="">##<br \="">
	{{fbdoc item="param"}}<br \="">##//src//##<br \="">		L'adresse de d&eacute;part de la ligne source. Lasource est soit une image pleine couleur (full-color) avec uneprofondeur de couleur de 24 ou 32 bits par pixel, soit une image avecpalette d'une profondeur de 1-8 bits par pixel. Convertir une imageavec palette ne fonctionnera correctement que si vous &ecirc;tes dans un mode&eacute;cran utilisant la palette correcte pour l'image lors de la conversion.<br \="">
##//src_bpp//##<br \="">		Le nombre de bits par pixel dans la ligne source.  1-8, 24 et 32.<br \="">
##//dst//##<br \="">		L'adresse du d&eacute;but de la ligne destination.L'image peut &ecirc;tre une image pleine couleur de 16 ou 32 bits par pixel.Si la source est une image avec palette, la destination peut aussi &ecirc;treune image avec palette de 1 &agrave; 8 bits par pixel.<br \="">
	##//dst_bpp//##<br \="">		Le nombre de bits par pixel dans la ligne destination.  Valeurs valides: 1-8, 16 et 32.<br \="">
##//width//##<br \="">		La longueur de la ligne en pixels.<br \="">
##//isrgb//##<br \="">		Une valeur de z&eacute;ro indique que les canaux Rougeet Bleu sont l'autre voie dans l'image source. Utilisez cet indicateursi vous voulez que les canaux Rouge et Bleu doivent &ecirc;tre permut&eacute;spendant la conversion.<br \=""><br \="">
	{{fbdoc item="desc"}}<br \="">Copie une ligne d'une image d'uneposition m&eacute;moire vers une autre, convertit l'information couleur dechaque pixel pour correspondre &agrave; l'image destination.<br \=""><br \="">
		{{fbdoc item="ex"}}<br \="">%%(freebasic)
	#include "fbgfx.bi"<br>#if __FB_LANG__ = "fb"<br>Using FB<br>#endif<br><br>Const As Integer w = 64, h = 64<br>Dim As IMAGE Ptr img8, img32<br>Dim As Integer x, y<br><br><br>'' Cree une image 32-bit, taille w*h:<br>ScreenRes 1, 1, 32, , GFX_NULL<br>img32 = ImageCreate(w, h)<br><br>If img32 = 0 Then Print "Imagecreate failed on img32!": Sleep: End<br><br><br>'' Cree une image 8-bit, taille w*h:<br>ScreenRes 1, 1, 8, , GFX_NULL<br>img8 = ImageCreate(w, h)<br><br>If img8 = 0 Then Print "Imagecreate failed on img8!": Sleep: End<br><br><br>'' Remplit image 8-bit avec un motif<br>For y = 0 To h - 1<br>    For x = 0 To w - 1<br>        PSet img8, (x, y), 56 + (x + y) Mod 24<br>    Next x<br>Next y<br><br><br>'' Ouvre une fenetre graphique en mode 8-bit, et PUT l' image dans celle-ci:<br>ScreenRes 320, 200, 8<br>WindowTitle "8-bit color mode"<br>Put (10, 10), img8<br><br>Sleep<br><br><br>'' Copie les donnees image dans une image 32-bit<br>Dim As Byte Ptr p8, p32<br>Dim As Integer pitch8, pitch32<br><br>#ifndef ImageInfo '' older versions of FB don't have the ImageInfo feature<br>#define GETPITCH(img_) IIf(img_->Type=PUT_HEADER_NEW,img_->pitch,img_->old.width*img_->old.bpp)<br>#define GETP(img_) CPtr(Byte Ptr,img_)+IIf(img_->Type=PUT_HEADER_NEW,SizeOf(PUT_HEADER),SizeOf(_OLD_HEADER))<br>pitch8 = GETPITCH(img8): p8 = GETP(img8)<br>pitch32 = GETPITCH(img32): p32 = GETP(img32)<br>#else<br>ImageInfo( img8,  , , , pitch8,  p8  )<br>ImageInfo( img32, , , , pitch32, p32 )<br>#endif<br><br>For y = 0 To h - 1<br>    ImageConvertRow(@p8 [ y * pitch8 ],  8, _<br>                    @p32[ y * pitch32], 32, _<br>                    w)<br>Next y<br><br><br>'' Ouvre une fenetre graphique en mode 32-bit et PUT l' image sur celle-ci:<br>ScreenRes 320, 200, 32<br>WindowTitle "32-bit color mode"<br>Put (10, 10), img32<br><br>Sleep<br><br><br>'' Libere la memoire des images:<br>ImageDestroy img8<br>ImageDestroy img32<br>
		##<br><br \="">
	{{fbdoc item="lang"}}<br \="">  	- Non disponible dans le dialecte //[[CompilerOptlang -lang qb]]// sauf si r&eacute;f&eacute;renc&eacute; avec l'alias ##**__ImageConvertRow**##.<br \=""><br \="">  </li>
		{{fbdoc item="diff"}}<br \="">  	- Nouveau pour FreeBASIC<br \=""><br \="">  </li>
	{{fbdoc item="see"}}<br \="">	- ##[[KeyPgScreenres ScreenRes]]##<br \=""></li>	- ##[[KeyPgGetgraphics Get (Graphique)]]##<br \=""></li>	- ##[[KeyPgPutgraphics Put (Graphique)]]##<br \=""></li>	- ##[[KeyPgImagecreate ImageCreate]]##<br \=""></li>	- ##[[KeyPgImageDestroy ImageDestroy]]##<br \=""></li>	- ##[[KeyPgImageInfo ImageInfo]]##<br \=""><br \=""></li>
		The number of bits per pixel in the destination row.  Valid values for this are 1-8, 16 and 32.
	##//width//##
		The length of the row in pixels.
	##//isrgb//##
		A value of zero indicates that the Red and Blue channels are the other way round in the source image.  Use this switch if you want the Red and Blue channels to be swapped in the conversion.

{{fbdoc item="desc"}}
	Copies the row of an image from one memory location to another, converting the color information in each pixel to match the destination image.

{{fbdoc item="ex"}}
{{fbdoc item="filename" value="examples/manual/gfx/imageconvertrow.bas"}}%%(freebasic)
#include "fbgfx.bi"
#if __fb_lang__ = "fb"
Using FB
#endif

Const As Integer w = 64, h = 64
Dim As IMAGE Ptr img8, img32
Dim As Integer x, y


'' create a 32-bit image, size w*h:
Screenres 1, 1, 32, , GFX_NULL
img32 = ImageCreate(w, h)

If img32 = 0 Then Print "Imagecreate failed on img32!": Sleep: End


'' create an 8-bit image, size w*h:
Screenres 1, 1, 8, , GFX_NULL
img8 = ImageCreate(w, h)

If img8 = 0 Then Print "Imagecreate failed on img8!": Sleep: End


'' fill 8-bit image with a pattern
for y = 0 to h - 1
	for x = 0 to w - 1
	    pset img8, (x, y), 56 + (x + y) mod 24
	next x
next y


'' open a graphics window in 8-bit mode, and PUT the image into it:
Screenres 320, 200, 8
Windowtitle "8-bit color mode"
Put (10, 10), img8

Sleep


'' copy the image data into a 32-bit image
Dim As Byte Ptr p8, p32
Dim As Integer pitch8, pitch32

#ifndef ImageInfo '' older versions of FB don't have the ImageInfo feature
#define GETPITCH(img_) iif(img_->type=PUT_HEADER_NEW,img_->pitch,img_->old.width*img_->old.bpp)
#define GETP(img_) CPtr(Byte Ptr,img_)+iif(img_->type=PUT_HEADER_NEW,sizeof(PUT_HEADER),sizeof(_OLD_HEADER))
pitch8 = GETPITCH(img8): p8 = GETP(img8)
pitch32 = GETPITCH(img32): p32 = GETP(img32)
#else
ImageInfo( img8,  , , , pitch8,  p8  )
ImageInfo( img32, , , , pitch32, p32 )
#endif

For y = 0 To h - 1
	ImageConvertRow(@p8 [ y * pitch8 ],  8, _
	                @p32[ y * pitch32], 32, _
	                w)
Next y


'' open a graphics window in 32-bit mode and PUT the image into it:
Screenres 320, 200, 32
Windowtitle "32-bit color mode"
Put (10, 10), img32

Sleep


'' free the images from memory:
ImageDestroy img8
ImageDestroy img32
%%

{{fbdoc item="lang"}}
	- Not available in the //[[CompilerOptlang -lang qb]]// dialect unless referenced with the alias ##**""__ImageConvertRow""**##.

{{fbdoc item="diff"}}
	- New to ""FreeBASIC""

{{fbdoc item="see"}}
	- ##[[KeyPgScreenres ScreenRes]]##
	- ##[[KeyPgGetgraphics Get (Graphics)]]##
	- ##[[KeyPgPutgraphics Put (Graphics)]]##
	- ##[[KeyPgImagecreate ImageCreate]]##
	- ##[[KeyPgImageDestroy ImageDestroy]]##
	- ##[[KeyPgImageInfo ImageInfo]]##

{{fbdoc item="back" value="CatPgGfx2D|2D Drawing Functions"}}