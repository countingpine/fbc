{{fbdoc item="title" value="Utilisation de biblioth&egrave;ques FreeBASIC construites avec GCC"}}----
//par Jeff Marshall//

Montre comment créer une bibliothèque statique avec FreeBASIC puis l'appeler à partir d'un programme C en utilisant GCC comme compilateur.

	& //Testé avec la version mimimum fbc v0.18.2b//

Cet article montre l'utilisation sous Windows, mais l'application à FreeBASIC sur d'autres plates-formes est similaire.

{{fbdoc item="section" value="Dans ce tutoriel:"}}
	{{anchor name="S1|Un simple test"}}
	{{anchor name="S2|Bibliothèque FreeBASIC avec dépendances"}}
	{{anchor name="S3|Utiliser FreeBASIC comme un "Linker" intelligent"}}


{{anchor name="S1"}}{{fbdoc item="section" value="Un simple test"}}

Pour ce test simple, nous allons créer une bibliothèque statique FreeBASIC, une sans aucune dépendance. Pour la première fois cela rendra les choses plus faciles et va nous permettre de vérifier que les bases sont fonctionnelles:

Nous avons d'abord besoin d'une bibliothèque et ce sera juste une seule fonction triviale qui va ajouter deux entiers ensemble et retourner le résultat. Notez l'utilisation de ##**cdecl**## et ##**Alias**## dans notre définition de la procédure. Par défaut, C utilise la convention d'appel ##**cdecl**##. Utiliser ##**Alias**## dans la déclaration FreeBASIC rend plus facile la correspondance de sensibilité à la casse entre FreeBASIC et C. //C est sensible à la casse, alors que FreeBASIC ne l'est normalement pas.//

%%(freebasic)
'' mylib1.bas

function Add2Numbers cdecl alias "Add2Numbers" _
	( _
		byval x as integer, _
		byval y as integer _
	) as integer

	return x + y

end function
%%

Créer un fichier appelé ##mylib1.bas## comme ci-dessus et le compiler avec:

	##fbc -lib mylib1.bas##.  

Cela va créer notre bibliothèque statique ##libmylib1.a##. Ensuite nous avons besoin d'un programme C qui va appeler la bibliothèque que nous venons de créer. Nous devons ajouter un prototype qui correspond exactement à la fonction que nous avons dans la bibliothèque FreeBASIC. Le listing C ci-dessous est notre principal point d'entrée, il met en place un couple de variables pour appeler ##""Add2Numbers()""## et afficher les résultats.

%%(c)
/* test1.c */

#include <stdio.h>

/* Prototype from libmylib.a */
int Add2Numbers( int x, int y );

int main ()
{
	int a = 5;
	int b = 7;
	int c = Add2Numbers( a, b );

	printf( "a = %d\n", a );
	printf( "c = %d\n", b );
	printf( "a + b = %d\n", c );

	return 0;
}
%%

Pour compiler ce programme C utilisant la bibliothèque FreeBASIC que nous venons juste de créer, nous devons compiler ##test1.c## comme nous l'aurions fait normalement, mais il faut aussi lui dire quelles bibliothèques sont nécessaires.  Dans notre cas c'est ##libmylib1.a##.

	##gcc test1.c -L . -l mylib1 -o test1.exe##

L'option '-L .' indique à l'éditeur de liens de chercher les bibliothèques dans le répertoire courant, et '-l mylib1' indique que nous voulons lier avec la bibliothèque que nous avons céée. C'est la cas le plus simple car la bibliothèque libmylib1.a n'a pas de dépendances. Si mylib1.bas nécessite d'autres bibliothèques, par exemple la bibliothèque FreeBASIC d'exécution libfb.a, nous devrions le spécifier aussi à gcc.


{{anchor name="S2"}}{{fbdoc item="section" value="Bibliothèque FreeBASIC avec dépendances"}}

Ici, nous créons une bibliothèque FreeBASIC qui utilise certaines fonctionnalités des bibliothèques d'exécution et graphique de FreeBASIC. Dans ce cas, nous aurons à préciser toutes les bibliothèques supplémentaires nécessaires pour GCC.

%%(freebasic)
'' mylib2.bas

sub TestGfx cdecl alias "TestGfx" ()

	screen 12

	line (0,0)-(100,100),15

	sleep

end sub
%%

Créez un fichier appelé ##mylib2.bas## avec le listing ci-dessus et le compiler avec:

	##fbc -lib mylib2.bas##.

Cela va créer notre bibliothèque statique ##libmylib2.a##.  Ensuite nous avons besoin d'un programme C qui va appeler la bibliothèque que nous venons de créer. Nous devons ajouter un prototype qui correspondra exactement à la fonction que nous avons dans la bibliothèque FreeBASIC. Ce listing C fournira notre point d'entrée et il suffit d'appeler ##TestGfx()## avant de terminer.

%%(c)
/* test2.c */

void TestGfx();

int main()
{

	TestGfx();

	return 0;

}
%%

Pour compiler et lier ##test2.c## directement avec ##GCC##, non seulement nous avons besoin de dire à ##GCC## que nous voulons le lier avec ##libmylib2.a##, mais aussi toutes les autres bibliothèques que ##libmylib2.a## nécessite.

	##gcc test2.c -L. -lmylib2 -L"C:\FreeBASIC\lib\win32" "C:\FreeBASIC\lib\win32\fbrt0.o" -lfbgfx -lfb -lgdi32 -o test2.exe##

Selon ce que notre bibliothèque FreeBASIC utilise, elle peut utiliser plusieurs bibliothèques supplémentaires, nous devons spécifier tous les noms de ces bibliothèques sur la ligne de commande de CCG. Dans cet exemple, FreeBASIC est situé dans "C:\FreeBASIC", mais vous pouvez spécifier n'importe quel autre répertoire où vous avez installé FreeBASIC. "C:\FreeBASIC\lib\win32\fbrt0.o" est un fichier spécial de démarrage qui va initialiser la bibliothèque d'exécution FreeBASIC. Plus précisément, il est initialisé après la bibliothèque d'exécution C, mais avant que tout code de notre programme ne soit appelé. ##-lfbgfx##, ##-lfb##, ##-lgdi32##, sont les bibliothèques supplémentaires nécessaires pour compléter la liaison. Les bibliothèques réelles peuvent varier en fonction des fonctions d'exécution FreeBASIC qui sont utilisées, et de la plate-forme, DOS ou Linux, pour laquelle le programme est compilé.


{{anchor name="S3"}}{{fbdoc item="section" value="Utiliser FreeBASIC comme un "Linker" intelligent"}}

FreeBASIC a une fonctionnalité intégrée intéressante qui stocke un peu d'informations supplémentaires dans la bibliothèque indiquant quelles options de compilation ont été utilisées et quelles bibliothèques dépendantes sont nécessaires. C'est une fonctionnalité propre à FreeBASIC, donc ce genre de capacité n'existera pas lors de l'utilisation de ## CCG ## comme compilateur principal et "linker".

Si nous réutilisons les exemples de la section précédente, ## mylib2.bas ## et ## test2.c ##, mais juste pour les compiler et les lier différemment, nous pouvons nous épargner un tas d'écriture. Avantage: nous n'avons normalement pas à savoir ou à se rappeler avec quelles dépendances notre bibliothèque FreeBASIC a été construite. Compiler ##mylib2.bas## comme avant en une bibliothèque statique.

	##fbc -lib mytest2.bas##

Ensuite, nous compilons notre programme de test en C. Notez l'option '-c' de la commande en ligne de ##GCC##. Cela indique que nous allons nous contenter de compiler le code source en C, mais sans le lier. ##test2.o## aura encore le point d'entrée, mais nous allons le mettre dans un fichier objet au lieu d'essayer de créer un exécutable immédiatement.

	##gcc -c test2.c -o test2.o##

Enfin, nous utilisons ##fbc## pour réaliser l'étape lien. Nous ne compilerons pas des fichiers source basiques ici, mais nous allons utiliser les fonctionnalités intelligentes de lien de FreeBASIC de telle sorte que la ligne de commande est assez simple:

	##fbc test2.o -l mylib2##

Cela créera un exécutable nommé ##test2.exe## car ##test2.o## a été spécifié en premier sur la ligne de commande.  FreeBASIC lira les informations supplémentaires stockées dans ##libmylib2.a## et connaîtra automatiquement les bibliothèques supplémentaires à lier.  C'est plus facile que les charger directement à l'aide de ##gcc##, surtout lorsque de nombreuses bibliothèques supplémentaires FreeBASIC sont nécessaires.


{{fbdoc item="see"}}
	- ##[[ProPgStaticLibraries Les bibliothèques statiques]]##


{{fbdoc item="back" value="CommunityTutorials|Community Tutorials"}}

