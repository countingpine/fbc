{{fbdoc item="title" value="Using FreeBASIC Built Libraries with GCC"}}----
//par Jeff Marshall//

Montre comment cr&eacute;er une biblioth&egrave;que statique avec FreeBASIC puis l'appeler &agrave; partir d'un programme C en utilisant GCC comme compilateur.

	- //Test&eacute; avec la version mimimum fbc v0.18.2b//

Cet article montre l'utilisation sous Windows, mais l'application &agrave; FreeBASIC sur d'autres plates-formes est similaire.

**<u>Dans ce tutoriel:</u>**
	[[#S1">Un simple test]]
	[[#S2">Biblioth&egrave;que FreeBASIC avec d&eacute;pendances]]
	[[#S3">Utiliser FreeBASIC comme un "Linker" intelligent]]


<a name="S1"></a>**<u>Un simple test</u>**

Pour ce test simple, nous allons cr&eacute;er une biblioth&egrave;que statique FreeBASIC, une sans aucune d&eacute;pendance. Pour la premi&egrave;re fois cela rendra les choses plus faciles et va nous permettre de v&eacute;rifier que les bases sont fonctionnelles:

Nous avons d'abord besoin d'une biblioth&egrave;que et ce sera juste une seule fonction triviale qui va ajouter deux entiers ensemble et retourner le r&eacute;sultat. Notez l'utilisation de ##**cdecl**## et ##**Alias**## dans notre d&eacute;finition de la proc&eacute;dure. Par d&eacute;faut, C utilise la convention d'appel ##**cdecl**##. Utiliser ##**Alias**## dans la d&eacute;claration FreeBASIC rend plus facile la correspondance de sensibilit&eacute; &agrave; la casse entre FreeBASIC et C. //C est sensible &agrave; la casse, alors que FreeBASIC ne l'est normalement pas.//

%%(freebasic)
'' mylib1.bas

function Add2Numbers cdecl alias "Add2Numbers" _
	( _
		byval x as integer, _
		byval y as integer _
	) as integer

	return x + y

end function
%%

Cr&eacute;er un fichier appel&eacute; ##mylib1.bas## comme ci-dessus et le compiler avec:

	##fbc -lib mylib1.bas##.  

Cela va cr&eacute;er notre biblioth&egrave;que statique ##libmylib1.a##. Ensuite nous avons besoin d'un programme C qui va appeler la biblioth&egrave;que que nous venons de cr&eacute;er. Nous devons ajouter un prototype qui correspond exactement &agrave; la fonction que nous avons dans la biblioth&egrave;que FreeBASIC. Le listing C ci-dessous est notre principal point d'entr&eacute;e, il met en place un couple de variables pour appeler ##Add2Numbers()## et afficher les r&eacute;sultats.

%%(c)
/* test1.c */

#include <stdio.h>

/* Prototype from libmylib.a */
int Add2Numbers( int x, int y );

int main ()
{
	int a = 5;
	int b = 7;
	int c = Add2Numbers( a, b );

	printf( "a = %d\n", a );
	printf( "c = %d\n", b );
	printf( "a + b = %d\n", c );

	return 0;
}
%%

Pour compiler ce programme C utilisant la biblioth&egrave;que FreeBASIC que nous venons juste de cr&eacute;er, nous devons compiler ##test1.c## comme nous l'aurions fait normalement, mais il faut aussi lui dire quelles biblioth&egrave;ques sont n&eacute;cessaires.  Dans notre cas c'est ##libmylib1.a##.

	##gcc test1.c -L . -l mylib1 -o test1.exe##

L'option '-L .' indique &agrave; l'&eacute;diteur de liens de chercher les biblioth&egrave;ques dans le r&eacute;pertoire courant, et '-l mylib1' indique que nous voulons lier avec la biblioth&egrave;que que nous avons c&eacute;&eacute;e. C'est la cas le plus simple car la biblioth&egrave;que libmylib1.a n'a pas de d&eacute;pendances. Si mylib1.bas n&eacute;cessite d'autres biblioth&egrave;ques, par exemple la biblioth&egrave;que FreeBASIC d'ex&eacute;cution libfb.a, nous devrions le sp&eacute;cifier aussi &agrave; gcc.


<a name="S2"></a>**<u>Biblioth&egrave;que FreeBASIC avec d&eacute;pendances</u>**

Ici, nous cr&eacute;ons une biblioth&egrave;que FreeBASIC qui utilise certaines fonctionnalit&eacute;s des biblioth&egrave;ques d'ex&eacute;cution et graphique de FreeBASIC. Dans ce cas, nous aurons &agrave; pr&eacute;ciser toutes les biblioth&egrave;ques suppl&eacute;mentaires n&eacute;cessaires pour GCC.

%%(freebasic)
'' mylib2.bas

sub TestGfx cdecl alias "TestGfx" ()

	screen 12

	line (0,0)-(100,100),15

	sleep

end sub
%%

Cr&eacute;ez un fichier appel&eacute; ##mylib2.bas## avec le listing ci-dessus et le compiler avec:

	##fbc -lib mylib2.bas##.

Cela va cr&eacute;er notre biblioth&egrave;que statique ##libmylib2.a##.  Ensuite nous avons besoin d'un programme C qui va appeler la biblioth&egrave;que que nous venons de cr&eacute;er. Nous devons ajouter un prototype qui correspondra exactement &agrave; la fonction que nous avons dans la biblioth&egrave;que FreeBASIC. Ce listing C fournira notre point d'entr&eacute;e et il suffit d'appeler ##TestGfx()## avant de terminer.

%%(c)
/* test2.c */

void TestGfx();

int main()
{

	TestGfx();

	return 0;

}
%%

Pour compiler et lier ##test2.c## directement avec ##GCC##, non seulement nous avons besoin de dire &agrave; ##GCC## que nous voulons le lier avec ##libmylib2.a##, mais aussi toutes les autres biblioth&egrave;ques que ##libmylib2.a## n&eacute;cessite.

	##gcc test2.c -L. -lmylib2 -L"C:\FreeBASIC\lib\win32" "C:\FreeBASIC\lib\win32\fbrt0.o" -lfbgfx -lfb -lgdi32 -o test2.exe##

Selon ce que notre biblioth&egrave;que FreeBASIC utilise, elle peut utiliser plusieurs biblioth&egrave;ques suppl&eacute;mentaires, nous devons sp&eacute;cifier tous les noms de ces biblioth&egrave;ques sur la ligne de commande de CCG. Dans cet exemple, FreeBASIC est situ&eacute; dans "C:\FreeBasic", mais vous pouvez sp&eacute;cifier n'importe quel autre r&eacute;pertoire o&ugrave; vous avez install&eacute; FreeBASIC. "C:\FreeBasic\lib\win32\fbrt0.o" est un fichier sp&eacute;cial de d&eacute;marrage qui va initialiser la biblioth&egrave;que d'ex&eacute;cution FreeBASIC. Plus pr&eacute;cis&eacute;ment, il est initialis&eacute; apr&egrave;s la biblioth&egrave;que d'ex&eacute;cution C, mais avant que tout code de notre programme ne soit appel&eacute;. ##-lfbgfx##, ##-lfb##, ##-lgdi32##, sont les biblioth&egrave;ques suppl&eacute;mentaires n&eacute;cessaires pour compl&eacute;ter la liaison. Les biblioth&egrave;ques r&eacute;elles peuvent varier en fonction des fonctions d'ex&eacute;cution FreeBASIC qui sont utilis&eacute;es, et de la plate-forme, DOS ou Linux, pour laquelle le programme est compil&eacute;.


<a name="S3"></a>**<u>Utiliser FreeBASIC comme un "Linker" intelligent</u>**

FreeBASIC a une fonctionnalit&eacute; int&eacute;gr&eacute;e int&eacute;ressante qui stocke un peu d'informations suppl&eacute;mentaires dans la biblioth&egrave;que indiquant quelles options de compilation ont &eacute;t&eacute; utilis&eacute;es et quelles biblioth&egrave;ques d&eacute;pendantes sont n&eacute;cessaires. C'est une fonctionnalit&eacute; propre &agrave; FreeBASIC, donc ce genre de capacit&eacute; n'existera pas lors de l'utilisation de ## CCG ## comme compilateur principal et "linker".

Si nous r&eacute;utilisons les exemples de la section pr&eacute;c&eacute;dente, ## mylib2.bas ## et ## test2.c ##, mais juste pour les compiler et les lier diff&eacute;remment, nous pouvons nous &eacute;pargner un tas d'&eacute;criture. Avantage: nous n'avons normalement pas &agrave; savoir ou &agrave; se rappeler avec quelles d&eacute;pendances notre biblioth&egrave;que FreeBASIC a &eacute;t&eacute; construite. Compiler ##mylib2.bas## comme avant en une biblioth&egrave;que statique.

	##fbc -lib mytest2.bas##

Ensuite, nous compilons notre programme de test en C. Notez l'option '-c' de la commande en ligne de ##GCC##. Cela indique que nous allons nous contenter de compiler le code source en C, mais sans le lier. ##test2.o## aura encore le point d'entr&eacute;e, mais nous allons le mettre dans un fichier objet au lieu d'essayer de cr&eacute;er un ex&eacute;cutable imm&eacute;diatement.

	##gcc -c test2.c -o test2.o##

Enfin, nous utilisons ##fbc## pour r&eacute;aliser l'&eacute;tape lien. Nous ne compilerons pas des fichiers source basiques ici, mais nous allons utiliser les fonctionnalit&eacute;s intelligentes de lien de FreeBASIC de telle sorte que la ligne de commande est assez simple:

	##fbc test2.o -l mylib2##

Cela cr&eacute;era un ex&eacute;cutable nomm&eacute; ##test2.exe## car ##test2.o## a &eacute;t&eacute; sp&eacute;cifi&eacute; en premier sur la ligne de commande.  FreeBASIC lira les informations suppl&eacute;mentaires stock&eacute;es dans ##libmylib2.a## et conna&icirc;tra automatiquement les biblioth&egrave;ques suppl&eacute;mentaires &agrave; lier.  C'est plus facile que les charger directement &agrave; l'aide de ##gcc##, surtout lorsque de nombreuses biblioth&egrave;ques suppl&eacute;mentaires FreeBASIC sont n&eacute;cessaires.


{{fbdoc item="see"}}
	- ##[[ProPgStaticLibraries Les biblioth&egrave;ques statiques]]##


{{fbdoc item="back" value="CommunityTutorials|Community Tutorials"}}