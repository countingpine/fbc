{{fbdoc item="title" value="Static Libraries"}}----
Une biblioth&egrave;que statique est du code compil&eacute; qui peut &ecirc;tre utilis&eacute; plus tard lors de la construction d'un ex&eacute;cutable.

Lorsque le compilateur g&eacute;n&egrave;re un ex&eacute;cutable, les fichiers sources de base sont d'abord transform&eacute;s en fichiers objets.  Les fichiers objets sont ensuite li&eacute;s ensemble pour cr&eacute;er un ex&eacute;cutable.  Lorsque nous compilons le code source, nous ne le faisons pas n&eacute;cessairement pour cr&eacute;er un ex&eacute;cutable.  Nous pouvons plut&ocirc;t grouper tous les fichiers objets (fabriqu&eacute;s &agrave; partir des sources) en un fichier unique appel&eacute; une biblioth&egrave;que statique.

La biblioth&egrave;que est appel&eacute;e statique, parce que lorsque les fichiers objets qu'elle contient sont ensuite li&eacute;s dans un fichier ex&eacute;cutable, une copie de tout le code n&eacute;cessaire de la biblioth&egrave;que est ajout&eacute; &agrave; l'ex&eacute;cutable.

Une fois que la biblioth&egrave;que est g&eacute;n&eacute;r&eacute;e, Une fois que la biblioth&egrave;que est g&eacute;n&eacute;r&eacute;e, nous pouvons alors utiliser le code qu'elle contient comme si nous avions compil&eacute; les sources directement avec notre programme.

Voici un exemple simple cr&eacute;ant une biblioth&egrave;que statique en utilisant ces trois fichiers:
	- ##mylib.bas## - le source de la biblioth&egrave;que
	- ##mylib.bi## - l'en-t&ecirc;te pour la biblioth&egrave;que
	- ##mytest.bas## - un programme de test

Notre biblioth&egrave;que sera un module unique assurant une fonction unique:

{{fbdoc item="filename" value="examples/manual/proguide/static-lib/mylib.bas"}}%%(freebasic)
'' mylib.bas
'' compiler avec: fbc -lib mylib.bas

'' Additionne deux nombres ensemble et retourne le r&eacute;sultat
Public Function Add2( ByVal x As Integer, ByVal y As Integer ) As Integer
  Return( x + y )
End Function
%%
Compiler la biblioth&egrave;que avec:
	##fbc -lib mylib.bas##

L'option //[[CompilerOptlib -lib]]// indique au compilateur de prendre le code source, ##mylib.bas##, et de le transformer en un fichier objet ##mylib.o##, puis de stocker le fichier objet dans un fichier biblioth&egrave;que, aussi appel&eacute; une archive, ##libmylib.a##.  Une biblioth&egrave;que peut contenir de nombreux modules (fichiers source), chacun avec de nombreuses fonctions, mais pour cet exemple simple, il n'y en a simplement qu'un seul.

Pour faire usage de la biblioth&egrave;que dans un autre code source , nous avons besoin d'une certaine fa&ccedil;on de dire au compilateur ce qui est exactement dans la biblioth&egrave;que.  Une bonne fa&ccedil;on pour y parvenir est de mettre les d&eacute;clarations (&eacute;galement appel&eacute;e une interface ou API) de la biblioth&egrave;que dans un fichier d'en-t&ecirc;te.

{{fbdoc item="filename" value="examples/manual/proguide/static-lib/mylib.bi"}}%%(freebasic)
'' mylib.bi
#inclib "mylib"
Declare Function Add2( ByVal x As Integer, ByVal y As Integer ) As Integer
%%
Il n'est pas n&eacute;cessaire de compiler l'en-t&ecirc;te.  Nous le voulons dans sa forme source, comme cela il peut &ecirc;tre inclus avec les autres fichiers source.  L'instruction  ##[[KeyPgInclib #inclib]]## dira au compilateur le nom de la biblioth&egrave;que statique que nous voulons lier lorsque, &eacute;ventuellement, nous d&eacute;sirerons g&eacute;n&eacute;rer un ex&eacute;cutable.

Gr&acirc;ce &agrave; notre biblioth&egrave;que (un fichier .a) et un fichier d'en-t&ecirc;te (.bi file) nous pouvons les essayer dans un programme de test:

{{fbdoc item="filename" value="examples/manual/proguide/static-lib/mytest.bas"}}%%(freebasic)
'' mytest.bas
'' compiler avec: fbc mytest.bas
#include once "mylib.bi"
Print Add2(1,2)
%%
L'instruction ##[[KeyPgInclude #include]]## indique au compilateur d'inclure le code source de ##mylib.bi## comme si nous l'avions tap&eacute; dans le source original.  Avec la mani&egrave;re dont nous avons &eacute;crit notre fichier d'inclusion, il indique au compilateur tout ce qu'il doit savoir sur la biblioth&egrave;que.

Nous compilons ceci avec:
	##fbc mytest.bas##

Puis, quand nous lancerons l'ex&eacute;cutable ##mytest##, nous devrions obtenir ce r&eacute;sultat:
	##3##

Plus d'un module source peut &ecirc;tre utilis&eacute; lors de la fabrication de la biblioth&egrave;que.  Et les programmes de base peuvent utiliser plus d'une biblioth&egrave;que en incluant les fichiers d'en-t&ecirc;te n&eacute;cessaires.  Certaines biblioth&egrave;ques sont si importantes qu'elles peuvent utiliser plusieurs en-t&ecirc;tes.  Pour de tr&egrave;s grands projets, la cr&eacute;ation de biblioth&egrave;ques avec certains modules de code qui ne changent que rarement peut am&eacute;liorer consid&eacute;rablement les temps de compilation.

Les biblioth&egrave;ques peuvent &eacute;ventuellement contenir des informations de d&eacute;bogage sp&eacute;cifi&eacute;es avec l'option de ligne de commande //[[CompilerOptg -g]]//.

Les fichiers objets, et donc les biblioth&egrave;ques, sont d&eacute;pendants de la plate-forme et dans certains cas d&eacute;pendants d'une version particuli&egrave;re du compilateur et de la biblioth&egrave;que d'ex&eacute;cution FreeBasic.

{{fbdoc item="see"}}
	- [[ProPgSharedLibraries Biblioth&egrave;ques partag&eacute;es]]
	- ##[[KeyPgInclib #inclib]]##
	- ##[[KeyPgInclude #include]]##
	- [[CompilerOptlib Option du compilateur: -lib]]

{{fbdoc item="back" value="CatPgProgrammer|Programmer's Guide"}}