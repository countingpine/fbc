{{fbdoc item="title" value="Operator PROCPTR (Procedure pointer)"}}----
Renvoie l'adresse d'une procédure

{{fbdoc item="syntax"}}##
	[[KeyPgDeclare declare]] [[KeyPgOperator operator]] **Procptr** ( [[KeyPgByref byref]] //lhs// [[KeyPgAs as]] //T// ) [[KeyPgAs as]] //T// [[KeyPgPtr ptr]]
##
{{fbdoc item="usage"}}##
	//result// = **Procptr** ( //lhs// )
##
{{fbdoc item="param"}}
	##//lhs//##
		Une procédure.
	##//T//##
		Le type de procédure.

{{fbdoc item="ret"}}
	Renvoie l'adresse de la procédure.

{{fbdoc item="desc"}}
	Cet opérateur renvoie l'adresse d'une procédure ##[[KeyPgSub Sub]]## ou ##[[KeyPgFunction Function]]##.

	L'##[[KeyPgOpAt Operator @ (Adresse de)]]##, utilisé avec des procédures, a un comportement identique.

{{fbdoc item="ex"}}
{{fbdoc item="filename" value="examples/manual/operator/procptr.bas"}}%%(freebasic)
' This example uses ProcPtr to demonstrate function pointers
Declare Function Subtract( x as Integer, y as Integer) as Integer
Declare Function Add( x as Integer, y as Integer) as Integer
Dim myFunction as Function( x as Integer, y as Integer) as Integer

' myFunction will now be assigned to Add
myFunction = Procptr( Add )
print myFunction(2, 3)

' myFunction will now be assigned to Subtract.  Notice the different output.
myFunction = Procptr( Subtract )
print myFunction(2, 3)

Function Add( x as Integer, y as Integer) as Integer
	return x + y
end function

Function Subtract( x as Integer, y as Integer) as Integer
	return x - y
end function
%%

{{fbdoc item="lang"}}
	- Non disponible dans le dialecte //[[CompilerOptlang -lang qb]]// sauf si référencé avec l'alias ##**""__Procptr""**##.

{{fbdoc item="diff"}}
	- Nouveau pour ""FreeBASIC""

{{fbdoc item="see"}}
	- ##[[KeyPgSub Sub]]##
	- ##[[KeyPgOpVarptr Varptr]]##
	- ##[[KeyPgOpStrptr Strptr]]##
	- [[ProPgPointers Pointeurs]]

{{fbdoc item="back" value="CatPgOpPoint|Pointer Operators"}}{{fbdoc item="back" value="CatPgOperators|Operators"}}