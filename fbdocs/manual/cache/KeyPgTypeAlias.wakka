{{fbdoc item="title" value="Type (Alias)"}}----
D&eacute;clare un autre nom pour un type

{{fbdoc item="syntax"}}##
	**Type** //typename// [[KeyPgAs as]] //symbol//
##
{{fbdoc item="param"}}
	##//typename//## 
		nouveau nom de remplacement.
	##//symbol//## 
		symbole ou d&eacute;claration de type de donn&eacute;es &agrave; associer &agrave; ##//typename//##. 

{{fbdoc item="desc"}}
	##//symbol//## peut se r&eacute;f&eacute;rer &agrave; tout type de donn&eacute;es d&eacute;clar&eacute;, y compris un type-int&eacute;gr&eacute; de donn&eacute;es, ##[[KeyPgSub Sub]]## ou pointeur de ##[[KeyPgFunction Function]]##, d&eacute;claration de ##[[KeyPgType Type]]##, d&eacute;claration d'##[[KeyPgUnion Union]]##, ou d&eacute;claration d'##[[KeyPgEnum Enum]]##&eacute;ration.

	Un alias de type peut &ecirc;tre utilis&eacute; pour permettre des d&eacute;clarations anticip&eacute;es de [[CatPgUserDefTypes Types d&eacute;finis par l'utilisateur]].

{{fbdoc item="ex"}}
{{fbdoc item="filename" value="examples/manual/udt/type-fwd.bas"}}%%(freebasic)
TYPE ParentFwd as Parent
TYPE Child
	Name as zstring * 32
	ParentRef AS ParentFwd ptr
	''...
END TYPE

TYPE Parent
	Name as zstring * 32
	ChildList(0 to 9) AS Child
	''...
END TYPE

DIM p AS Parent
p.Name = "Foo"
with p.ChildList(0)
	.Name = "Jr."
	.ParentRef = @p
	'' ...
End With    

with p.ChildList(0)
	print .Name; " is child of "; .parentRef->Name
end with
%%

{{fbdoc item="diff"}}
	- Nouveau pour FreeBASIC

{{fbdoc item="see"}}
	- ##[[KeyPgType Type...End Type]]##
	- ##[[KeyPgTypeTemp Type (Temporary)]]##

{{fbdoc item="back" value="CatPgUserDefTypes|User Defined Types"}}