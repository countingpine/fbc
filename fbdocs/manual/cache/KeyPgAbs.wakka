{{fbdoc item="title" value="ABS"}}----
Calcule la valeur absolue d'un nombre

{{fbdoc item="syntax"}}##
	[[KeyPgDeclare declare]] [[KeyPgFunction function]] **Abs** [[KeyPgOverload overload]] ( [[KeyPgByval byval]] //number// [[KeyPgAs as]] [[KeyPgInteger integer]] ) [[KeyPgAs as]] [[KeyPgInteger integer]]
	[[KeyPgDeclare declare]] [[KeyPgFunction function]] **Abs** ( [[KeyPgByval byval]] //number// [[KeyPgAs as]] [[KeyPgLongint longint]] ) [[KeyPgAs as]] [[KeyPgLongint longint]]
	[[KeyPgDeclare declare]] [[KeyPgFunction function]] **Abs** ( [[KeyPgByval byval]] //number// [[KeyPgAs as]] [[KeyPgDouble double]] ) [[KeyPgAs as]] [[KeyPgDouble double]]
##
{{fbdoc item="usage"}}##
	result = **Abs**( //number// )
##
{{fbdoc item="param"}}
	##//number//##
		Valeur pour laquelle on &eacute;value la valeur absolue.

{{fbdoc item="section" value="Valeur retourn&eacute;e
	La valeur absolue de ##//number//##.

{{fbdoc item="desc"}}
	La valeur absolue d'un nombre est sa grandeur non sign&eacute;e. Par exemple, ##Abs(-1)## et ##Abs(1)## retournent tous les deux ##1##. L'argument requis ##//number//## peut &ecirc;tre n'importe quelle expression num&eacute;rique.

	L'##[[KeyPgOperator Operator]]## unaire ##**Abs**## peut &ecirc;tre surcharg&eacute; avec des types d&eacute;finis par l'utilisateur..

{{fbdoc item="ex"}}
{{fbdoc item="filename" value="examples/manual/math/abs.bas"}}%%(freebasic)
dim n as integer

print Abs( -1 )
print Abs( -3.1415 )
print Abs( 42 )
print Abs( n )

n = -69

print Abs( n )
%%
Affiche:
%%
1
3.1415
42
0
69
%%

{{fbdoc item="lang"}}
	- Dans le dialecte //[[CompilerOptlang -lang qb]]//, cet op&eacute;rateur ne peut pas &ecirc;tre surcharg&eacute;.

{{fbdoc item="diff"}}
	- Aucune

{{fbdoc item="see"}}
	- ##[[KeyPgSgn Sgn]]##
	- ##[[KeyPgOperator Operator]]##

{{fbdoc item="back" value="CatPgMath|Math"}}