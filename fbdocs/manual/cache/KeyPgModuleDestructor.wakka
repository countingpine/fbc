{{fbdoc item="title" value="DESTRUCTOR (Module)"}}----
Spécifie l'exécution d'une procédure à la fin du programme

{{fbdoc item="syntax"}}##
	[[[KeyPgPublic Public]] | [[KeyPgPrivate Private]]] [[KeyPgSub Sub]] //identifier// [[[KeyPgAlias Alias]] "//external_identifier//"] [()] **Destructor** [//priority//] [[[KeyPgStatic Static]]]
		{ //procedure body// }
	[[KeyPgEnd End]] [[KeyPgSub Sub]]
##
{{fbdoc item="desc"}}
	Définit une procédure qui sera appelée automatiquement en "fin-du-code" d'un programme compilé.  "Fin-du-code" est générée par le compilateur et est exécutée quand le programme se termine normalement.  Les procédures définies comme des destructeurs peuvent être utilisées de la même manière que les procédures ordinaires, c'est à dire, qu'elles peuvent être appelées à partir du code au niveau du module, comme d'autres procédures.  

	La procédure doit avoir une liste de paramètres vide.  Une erreur de compilation sera générée si le mot-clef ##**Destructor**## est utilisé dans une définition de ##[[KeyPgSub Sub]]## ayant un ou plusieurs paramètres. Dans un ensemble de procédures surchargées, un seul (1) constructeur peut être défini en raison de l'ambiguïté d'avoir plusieurs ##[[KeyPgSub Sub]]## qui n'ont aucun argument.

	Dans un seul module, les destructeurs sont normalement exécutés dans l'ordre dans lequel ils ont été définis.

	L'attribut ##//priority//##, un entier compris entre 101 et 65535, peut être utilisé pour forcer les destructeurs à être exécutés dans un certain ordre.  La valeur de ##//priority//## n'a pas de signification particulière, que la relation entre le numéro et les priorités des autres constructeurs.  101 est la plus basse priorité et est exécuté en dernier.  Tous les destructeurs ayant un attribut de ##//priority//## sont exécutés après les destructeurs n'ayant pas cet attribut.  La valeur de priorité de 65535 est équivalente à ne pas attribuer une valeur de priorité.

	Un module peut définir des procédures destructeur multiples.  Des procédures destructeur peuvent aussi apparaître dans plusieurs modules. Toutes les procédures définies avec la syntaxe ci-dessus seront ajoutées à la liste des procédures à appeler lorsque le programme se terminera.
	
	L'ordre dans lequel les destructeurs définis dans plusieurs modules sont exécutés est connu uniquement au moment de l'édition de lien.  Par conséquent, des précautions particulières doivent être prises lors de l'utilisation des destructeurs qui peuvent faire appel à un module secondaire qui lui aussi définit des destructeurs.  Dans un tel cas, il est conseillé d'utiliser un destructeur unique qui explicite les procédures d'appel de fin de programme dans plusieurs modules pour assurer une fin de programme correcte.

	Les destructeurs seront appelés si le programme se termine normalement ou si une vérification des erreurs est activée et que le programme se termine anormalement.

{{fbdoc item="ex"}}
	{{fbdoc item="filename" value="examples/manual/procs/mod-dtor.bas"}}%%(freebasic)
sub pauseonexit destructor
	
	'' If the program reaches the end, or aborts with an error, 
	'' it will run this destructor before closing
	
	print "Press any key to end the program..."
	sleep
	
end sub

dim array(0 to 10, 0 to 10) as integer
dim as integer i = 0, j = 11

'' this next line will cause the program to abort with an 
'' error if you compile with array bounds checking enabled (fbc -exx ...)
print array(i, j)
%%

{{fbdoc item="diff"}}
	- Nouveau pour ""FreeBASIC""

{{fbdoc item="see"}}
	- ##[[KeyPgDestructor Destructor (Classe)]]##
	- ##[[KeyPgModuleConstructor Constructor (Module)]]##
	- ##[[KeyPgSub Sub]]##

{{fbdoc item="back" value="CatPgProcedures|Procedures"}}