{{fbdoc item="title" value="CONTINUE"}}----
Déclaration de contrôle de flux pour poursuivre avec l'itération suivante d'une boucle

{{fbdoc item="syntax"}}##
	**Continue** {[[KeyPgDoloop do]] | [[KeyPgFornext for]] | [[KeyPgWhilewend while]]}
##
{{fbdoc item="desc"}}
	Saute tout le code jusqu'à la clause de fin d'une structure de boucle, c'est à dire un bloc ##[[KeyPgDoloop Do...Loop]]##, ##[[KeyPgFornext For...Next]]##, ou ##[[KeyPgWhilewend While...Wend]]##, puis exécute la vérification de l'état de la limite. Dans le cas d'une boucle ##[[KeyPgFornext For...Next]]##, la variable est incrémentée selon la valeur de ##[[KeyPgStep Step]]##.

	Lorsqu'il y a plusieurs blocs ##[[KeyPgDoloop Do]]## / ##[[KeyPgFornext For]]## / ##[[KeyPgWhilewend While]]## imbriqués, cela continuera sur le bloc de ce type le plus intérieur, à savoir le dernier entré.  Vous pouvez continuer un bloc précédent de ce type en donnant à la suite plusieurs mots, séparés par des virgules.  Par exemple, ##**continue while, while**##

{{fbdoc item="ex"}}
{{fbdoc item="filename" value="examples/manual/control/continue.bas"}}%%(freebasic)
Dim As Integer n

Print "Here are odd numbers between 0 and 10!"
Print
For n = 0 To 10

  If ( n Mod 2 ) = 0 Then 
	Continue For
  End If
  
  Print n
  
Next n
%%

{{fbdoc item="filename" value="examples/manual/control/continue2.bas"}}%%(freebasic)
 '' simple prime number finder

Print "Here are the prime numbers between 1 and 20!"
Print

Dim n As Integer, d As Integer

For n = 2 To 20
	
	For d = 2 To Int(Sqr(n))
	    
	    If ( n Mod d ) = 0 Then ' d divides n
	        
	        Continue For, For ' n is not prime, so try next n
	        
	    End If
	    
	Next d
	
	Print n
	
Next n
%%

{{fbdoc item="lang"}}
	- Non disponible dans le dialecte //[[CompilerOptlang -lang qb]]// sauf si référencé avec l'alias ##**""__Continue""**##.

{{fbdoc item="diff"}}
	- Nouveau pour ""FreeBASIC""

{{fbdoc item="see"}}
	- ##[[KeyPgExit Exit]]##

{{fbdoc item="back" value="CatPgControlFlow|Control Flow"}}