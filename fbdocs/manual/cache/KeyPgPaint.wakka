{{fbdoc item="title" value="PAINT"}}----
Remplit une surface d&eacute;limit&eacute;e par une bordure, avec la couleur indiqu&eacute;e

{{fbdoc item="syntax"}}##
	**Paint** [//target//,] [STEP] (//x//, //y//)[, [//paint//][, [//border_color//]]]
##
{{fbdoc item="param"}}
	##//target//##
		le tampon sur lequel on dessine.  
	##STEP##
		indique que les coordonn&eacute;es sont relatives
	##(//x//, //y//)##
		coordonn&eacute;es du pixel sur lequel on commence le remplissage en utilisant ##//paint//##
	##//paint//##
		la couleur ou le motif pour effectuer le remplissage
		une valeur num&eacute;rique indique une couleur, alors qu'une cha&icirc;ne indique un motif de remplissage
	##//border_color//##
		couleur de la bordure pour limiter le remplissage

{{fbdoc item="desc"}}
	Commande graphique pour remplir une zone d&eacute;limit&eacute;e par une bordure d'une certaine couleur. Aussi appel&eacute;e 'flood-fill' (seau de peinture) ou 'paint bucket' (inondation-remplissage).

	##**Paint**## op&egrave;re sur la page de travail courante valid&eacute;e par ##[[KeyPgScreenset ScreenSet]]## ou sur le tampon cible de ##[[KeyPgGetgraphics Get]]##/##[[KeyPgPutgraphics Put]]##, si sp&eacute;cifi&eacute;.

	Le remplissage commence aux coordonn&eacute;es ##(//x//,//y//)##; si ##STEP## est pr&eacute;cis&eacute;, elles sont relatives &agrave; la derni&egrave;re position du curseur graphique. Les coordonn&eacute;es sont affect&eacute;es sont affect&eacute;es par le syst&egrave;me de coordonn&eacute;es personnel &eacute;tabli avec ##[[KeyPgWindow Window]]## et/ou ##[[KeyPgViewgraphics View (Graphics)]]##; le cadrage &eacute;tabli par ##[[KeyPgViewgraphics View]]## s'applique aussi.
	
	Si l'argument ##//paint//## est un nombre, il est utilis&eacute; comme une couleur du m&ecirc;me format que celui utilis&eacute; par ##[[KeyPgColor Color]]## et la r&eacute;gion est remplie en utilisant cette couleur. Si ##//paint//## est une ##[[KeyPgString String (cha&icirc;ne)]]##, la r&eacute;gion est remplie avec un motif; le motif a toujours  8 * 8 pixels, et la cha&icirc;ne pass&eacute;e doit contenir des donn&eacute;es dans un format correspondant &agrave; la profondeur de couleur courante. La cha&icirc;ne du motif contient les pixels ligne par ligne, et sa taille doit &ecirc;tre comme ci-dessous:

	Pour des profondeurs de couleur de 1, 2, 4 et 8:
	##size = 8 * 8 = 64##
	Pour des profondeurs de couleur de 15 et 16:
	##size = (8 * 8) * 2 = 128##
	Pour des profondeurs de couleur de 24 et 32:
	##size = (8 * 8) * 4 = 256##

	Si la cha&icirc;ne pass&eacute;e est plus petite, les pixels manquants seront &agrave; 0. Si l'argument ##//paint//## est omis, un remplissage normal sera ex&eacute;cut&eacute; en utilisant la couleur d'avant-plan valid&eacute;e par ##[[KeyPgColor Color]]##. Le remplissage continue tant que des pixels de la couleur bordure sont trouv&eacute;s; si ##//border_color//## est omis, la couleur courante d'arri&egrave;re-plan est utilis&eacute;e.

{{fbdoc item="ex"}}
{{fbdoc item="filename" value="examples/manual/gfx/paint.bas"}}%%(freebasic)
' Dessine un cercle blanc interieur peint en bleu
screen 13
circle (160, 100), 30, 15
paint (160, 100), 1, 15
sleep
%%

{{fbdoc item="filename" value="examples/manual/gfx/paint2.bas"}}%%(freebasic)
' Dessine un cercle et le remplit avec un motif a damier

'' Choisit la profondeur de bits pour Screen
'' Essayer de valider d' autres valeurs: 8, 16 ou 32

const bit_depth = 8

'' Fonction pour retourner la couleur pixel, sous forme de chaine
'' retourne la chaine dans le format approprie pour la profondeur de bit courante
function paint_pixel( byval c as uinteger, byval bit_depth_ as integer ) as string
	
	if bit_depth_ <= 8 then '' 8-bit:
	    function =  chr( cubyte(c) )
	    
	elseif bit_depth_ <= 16 then '' 16-bit:
	    function = mkshort( c shr 3 and &h1f or _
	                        c shr 5 and &h7e0 or _
	                        c shr 8 and &hf800 )
	    
	elseif bit_depth_ <= 32 then '' 32-bit:
	    function = mkl(c)
	    
	end if
	
end function


'' Ouvre une fenetre graphique a la profondeur de bit choisie
screenres 320, 200, bit_depth

'' Declare variables pour manier couleurs
dim as uinteger c, c1, c2, cb

'' Declare variable chaine pour manier le motif utilise dans Paint
dim as string paint_pattern = ""

'' Valide couleurs
if bit_depth <= 8 then
	c1 = 7  ''couleur motif 1
	c2 = 8  ''couleur motif 2
	cb = 15 ''couleur bord
else
	c1 = RGB(192, 192, 192) '' couleur motif 1
	c2 = RGB(128, 128, 128) '' couleur motif 2
	cb = RGB(255, 255, 255) '' couleur bord
end if

'' Fabrique le motif a utiliser dans Paint
for y as uinteger = 0 to 7
	for x as uinteger = 0 to 7
	    
	    '' Choisit la couleur du pixel (c)
	    if (x \ 4 + y \ 4) mod 2 > 0 then
	        c = c1
	    else
	        c = c2
	    end if
	    
	    '' Ajoute le pixel au motif
	    paint_pattern = paint_pattern + paint_pixel(c, bit_depth)
	    
	    '' La ligne suivante peut etre utilisee si vous desirez afficher le 
	    '' motif dans le coin haut gauche de l' ecran:
	    
	    ' pset (x, y), c
	    
	next x
next y

'' Dessine un cercle avec la couleur du bord
circle (160, 100), 50, cb, , , 1.0

'' Peint la region du cercle avec paint_pattern, stoppant a la couleur du bord
paint (160, 100), paint_pattern, cb

'' Pause avant fin du programme
sleep
%%

{{fbdoc item="diff"}}
	- ##//target//## est nouveau pour FreeBASIC
	- Dans QB, le motif de remplissage est toujours de 8 bits de largeur et la hauteur est la longueur de la cha&icirc;ne (jusqu'&agrave; 64). Dans FreeBASIC, le motif de remplissage a 8 pixels de large, est ind&eacute;pendent de la profondeur de couleur et la hauteur est toujours de 8.
	- Le param&egrave;tre de couleur d'arri&egrave;re-plan support&eacute; par QB ne l'est pas par la version FreeBASIC.

{{fbdoc item="see"}}
	- ##[[KeyPgScreengraphics Screen]]##

{{fbdoc item="back" value="CatPgGfx2D|2D Drawing Functions"}}